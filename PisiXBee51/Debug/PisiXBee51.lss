
PisiXBee51.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00802000  000012b4  00001348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000077  0080202a  0080202a  00001372  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001372  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000570  00000000  00000000  000013ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00009b36  00000000  00000000  0000193e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001aca  00000000  00000000  0000b474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e7d  00000000  00000000  0000cf3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000d50  00000000  00000000  0000edbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000448f  00000000  00000000  0000fb0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000321f  00000000  00000000  00013f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000510  00000000  00000000  000171ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
                     DMA_CH_DESTDIR_t destDirection,
                     uint16_t blockSize,
                     DMA_CH_BURSTLEN_t burstMode,
                     uint8_t repeatCount,
                     bool useRepeat )
{
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      14:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
	channel->SRCADDR0 = (( (uint16_t) srcAddr) >> 0*8 ) & 0xFF;
      18:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
	channel->SRCADDR1 = (( (uint16_t) srcAddr) >> 1*8 ) & 0xFF;
	channel->SRCADDR2 = 0;
      1c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>

	channel->DESTADDR0 = (( (uint16_t) destAddr) >> 0*8 ) & 0xFF;
	channel->DESTADDR1 = (( (uint16_t) destAddr) >> 1*8 ) & 0xFF;
      20:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
	channel->DESTADDR2 = 0;

	channel->ADDRCTRL = (uint8_t) srcReload | srcDirection |
      24:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      28:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
	                              destReload | destDirection;
	channel->TRFCNT = blockSize;
      2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
	channel->CTRLA = ( channel->CTRLA & ~( DMA_CH_BURSTLEN_gm | DMA_CH_REPEAT_bm ) ) |
      30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      38:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
	                  burstMode | ( useRepeat ? DMA_CH_REPEAT_bm : 0);

	if ( useRepeat ) {
		channel->REPCNT = repeatCount;
      40:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      44:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
	}
}
      48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      4c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      50:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      54:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      58:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
        }
        qPort->DIRCLR = (0x03<<qPin);
    }

    /* Set QDPH0 and QDPH1 sensing level. */
    PORTCFG.MPCMASK = (0x03<<qPin);
      5c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      64:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      68:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      6c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
    qPort->PIN0CTRL = (qPort->PIN0CTRL & ~PORT_ISC_gm) | PORT_ISC_LEVEL_gc
      70:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      74:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      78:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      7c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      80:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
                      | (invIO ? PORT_INVEN_bm : 0);

    return true;
      84:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
    /* Make setup depending on if Index signal is used. */
    if(useIndex)
    {
        if(qPin > 5)
        {
            return false;
      88:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
    PORTCFG.MPCMASK = (0x03<<qPin);
    qPort->PIN0CTRL = (qPort->PIN0CTRL & ~PORT_ISC_gm) | PORT_ISC_LEVEL_gc
                      | (invIO ? PORT_INVEN_bm : 0);

    return true;
}
      8c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      90:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      94:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      98:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      9c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b8:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__vector_46>
      bc:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_47>
      c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e8:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__vector_58>
      ec:	0c 94 09 02 	jmp	0x412	; 0x412 <__vector_59>
      f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      fc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     100:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     104:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     108:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     10c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     110:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     114:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     118:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     11c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     120:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     124:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     128:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     12c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     130:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     134:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     138:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     13c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     140:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     144:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     148:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     14c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     150:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     154:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     158:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     15c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     160:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     164:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     168:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     16c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     170:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     174:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     178:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     17c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     180:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     184:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     188:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     18c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     190:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     194:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     198:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     19c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e2       	ldi	r29, 0x2F	; 47
     206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e4 eb       	ldi	r30, 0xB4	; 180
     210:	f2 e1       	ldi	r31, 0x12	; 18
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	aa 32       	cpi	r26, 0x2A	; 42
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	20 e2       	ldi	r18, 0x20	; 32
     220:	aa e2       	ldi	r26, 0x2A	; 42
     222:	b0 e2       	ldi	r27, 0x20	; 32
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a1 3a       	cpi	r26, 0xA1	; 161
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <main>
     232:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <_exit>

00000236 <__bad_interrupt>:
     236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023a <adc_init>:
static int8_t offset;

void adc_init(void)
{
    /* Move stored calibration values to ADC A */
    ADC_CalibrationValues_Load(&ADCA);
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	92 e0       	ldi	r25, 0x02	; 2
     23e:	0e 94 77 02 	call	0x4ee	; 0x4ee <ADC_CalibrationValues_Load>

    /* Set up ADC A to have signed conversion mode and 12 bit resolution. */
    ADC_ConvMode_and_Resolution_Config(&ADCA, true, ADC_RESOLUTION_12BIT_gc);
     242:	e0 e0       	ldi	r30, 0x00	; 0
     244:	f2 e0       	ldi	r31, 0x02	; 2
     246:	81 81       	ldd	r24, Z+1	; 0x01
     248:	89 7e       	andi	r24, 0xE9	; 233
     24a:	80 61       	ori	r24, 0x10	; 16
     24c:	81 83       	std	Z+1, r24	; 0x01

    // The ADC has different voltage reference options, controlled by the REFSEL bits in the
    // REFCTRL register. Here the internal reference is selected
    // IntVCC = Vcc / 1.6 = 2,0625 V
    ADC_Reference_Config(&ADCA, ADC_REFSEL_INTVCC_gc);
     24e:	82 81       	ldd	r24, Z+2	; 0x02
     250:	8f 78       	andi	r24, 0x8F	; 143
     252:	80 61       	ori	r24, 0x10	; 16
     254:	82 83       	std	Z+2, r24	; 0x02

    // The clock into the ADC decide the maximum sample rate and the conversion time, and
    // this is controlled by the PRESCALER bits in the PRESCALER register. Here, the
    // Peripheral Clock is divided by 64 ( gives 500 KSPS with 32Mhz clock )
    ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV64_gc);
     256:	84 81       	ldd	r24, Z+4	; 0x04
     258:	88 7f       	andi	r24, 0xF8	; 248
     25a:	84 60       	ori	r24, 0x04	; 4
     25c:	84 83       	std	Z+4, r24	; 0x04

    // The used Virtual Channel (CH0) must be set in the correct mode
    // In this task we will use single ended input, so this mode is selected

    /* Setup channel 0 to have single ended input. */
    ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     25e:	a0 e2       	ldi	r26, 0x20	; 32
     260:	b2 e0       	ldi	r27, 0x02	; 2
     262:	8c 91       	ld	r24, X
     264:	80 7e       	andi	r24, 0xE0	; 224
     266:	81 60       	ori	r24, 0x01	; 1
     268:	8c 93       	st	X, r24
                                     ADC_CH_INPUTMODE_SINGLEENDED_gc,
                                     ADC_CH_GAIN_1X_gc);

    // Setting up the which pins to convert.
    // Note that the negative pin is internally connected to ground
    ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN8_gc, ADC_CH_MUXNEG_PIN0_gc);
     26a:	80 e4       	ldi	r24, 0x40	; 64
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	8c 93       	st	X, r24


    // Before the ADC can be used it must be enabled
    ADC_Enable(&ADCA);
     270:	80 81       	ld	r24, Z
     272:	81 60       	ori	r24, 0x01	; 1
     274:	80 83       	st	Z, r24


    // Wait until the ADC is ready
    ADC_Wait_8MHz(&ADCA);
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	92 e0       	ldi	r25, 0x02	; 2
     27a:	0e 94 39 02 	call	0x472	; 0x472 <ADC_Wait_8MHz>

    /* Get offset value for ADCA.  */
    offset = ADC_Offset_Get_Signed(&ADCA, &(ADCA.CH0), true);
     27e:	41 e0       	ldi	r20, 0x01	; 1
     280:	60 e2       	ldi	r22, 0x20	; 32
     282:	72 e0       	ldi	r23, 0x02	; 2
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	92 e0       	ldi	r25, 0x02	; 2
     288:	0e 94 44 02 	call	0x488	; 0x488 <ADC_Offset_Get_Signed>
     28c:	80 93 2a 20 	sts	0x202A, r24
     290:	08 95       	ret

00000292 <adc_read>:
}

uint16_t adc_read(uint8_t channel)
{
    ADC_Ch_InputMux_Config(&ADCA.CH0, (channel << 3), ADC_CH_MUXNEG_PIN0_gc);
     292:	88 0f       	add	r24, r24
     294:	88 0f       	add	r24, r24
     296:	88 0f       	add	r24, r24
     298:	e0 e2       	ldi	r30, 0x20	; 32
     29a:	f2 e0       	ldi	r31, 0x02	; 2
     29c:	81 83       	std	Z+1, r24	; 0x01

    // Start a single conversion
    ADC_Ch_Conversion_Start(&ADCA.CH0);
     29e:	80 81       	ld	r24, Z
     2a0:	80 68       	ori	r24, 0x80	; 128
     2a2:	80 83       	st	Z, r24

    while(!ADC_Ch_Conversion_Complete(&ADCA.CH0));
     2a4:	83 81       	ldd	r24, Z+3	; 0x03
     2a6:	80 ff       	sbrs	r24, 0
     2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <adc_read+0x12>

    return ADC_ResultCh_GetWord_Signed(&ADCA.CH0, offset);
     2aa:	60 91 2a 20 	lds	r22, 0x202A
     2ae:	80 e2       	ldi	r24, 0x20	; 32
     2b0:	92 e0       	ldi	r25, 0x02	; 2
     2b2:	0e 94 2f 02 	call	0x45e	; 0x45e <ADC_ResultCh_GetWord_Signed>
}
     2b6:	08 95       	ret

000002b8 <__vector_47>:

volatile uint32_t systick = 0;

// Systick interrupt service
ISR(SYSTICK_TIMER_INTERRUPT)
{
     2b8:	1f 92       	push	r1
     2ba:	0f 92       	push	r0
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	0f 92       	push	r0
     2c0:	11 24       	eor	r1, r1
     2c2:	8f 93       	push	r24
     2c4:	9f 93       	push	r25
     2c6:	af 93       	push	r26
     2c8:	bf 93       	push	r27
    systick++;
     2ca:	80 91 2b 20 	lds	r24, 0x202B
     2ce:	90 91 2c 20 	lds	r25, 0x202C
     2d2:	a0 91 2d 20 	lds	r26, 0x202D
     2d6:	b0 91 2e 20 	lds	r27, 0x202E
     2da:	01 96       	adiw	r24, 0x01	; 1
     2dc:	a1 1d       	adc	r26, r1
     2de:	b1 1d       	adc	r27, r1
     2e0:	80 93 2b 20 	sts	0x202B, r24
     2e4:	90 93 2c 20 	sts	0x202C, r25
     2e8:	a0 93 2d 20 	sts	0x202D, r26
     2ec:	b0 93 2e 20 	sts	0x202E, r27
}
     2f0:	bf 91       	pop	r27
     2f2:	af 91       	pop	r26
     2f4:	9f 91       	pop	r25
     2f6:	8f 91       	pop	r24
     2f8:	0f 90       	pop	r0
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <radio_init>:

// USART data struct used in task
USART_data_t USART_data;

void radio_init(uint32_t baud)
{
     302:	cf 92       	push	r12
     304:	df 92       	push	r13
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	6b 01       	movw	r12, r22
     310:	7c 01       	movw	r14, r24
    // (TX) as output
    COMPORT.DIRSET   = (1<<TXD);
     312:	e0 e8       	ldi	r30, 0x80	; 128
     314:	f6 e0       	ldi	r31, 0x06	; 6
     316:	88 e0       	ldi	r24, 0x08	; 8
     318:	81 83       	std	Z+1, r24	; 0x01
    // (RX) as input
    COMPORT.DIRCLR   = (1<<RXD);
     31a:	84 e0       	ldi	r24, 0x04	; 4
     31c:	82 83       	std	Z+2, r24	; 0x02

    // Use USARTE0 and initialize buffers
    USART_InterruptDriver_Initialize(&USART_data, &RADIO_USART, USART_DREINTLVL_LO_gc);
     31e:	41 e0       	ldi	r20, 0x01	; 1
     320:	60 ea       	ldi	r22, 0xA0	; 160
     322:	7a e0       	ldi	r23, 0x0A	; 10
     324:	8f e2       	ldi	r24, 0x2F	; 47
     326:	90 e2       	ldi	r25, 0x20	; 32
     328:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <USART_InterruptDriver_Initialize>

    // USARTE0, 8 Data bits, No Parity, 1 Stop bit
    USART_Format_Set(USART_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     32c:	c0 91 2f 20 	lds	r28, 0x202F
     330:	d0 91 30 20 	lds	r29, 0x2030
     334:	83 e0       	ldi	r24, 0x03	; 3
     336:	8d 83       	std	Y+5, r24	; 0x05

    // Enable RXC interrupt
    USART_RxdInterruptLevel_Set(USART_data.usart, USART_RXCINTLVL_LO_gc);
     338:	8b 81       	ldd	r24, Y+3	; 0x03
     33a:	8f 7c       	andi	r24, 0xCF	; 207
     33c:	80 61       	ori	r24, 0x10	; 16
     33e:	8b 83       	std	Y+3, r24	; 0x03

    // Set Baudrate
    USART_Baudrate_Set(&RADIO_USART, (((F_CPU)/(16*baud))) , 0);
     340:	cc 0c       	add	r12, r12
     342:	dd 1c       	adc	r13, r13
     344:	ee 1c       	adc	r14, r14
     346:	ff 1c       	adc	r15, r15
     348:	cc 0c       	add	r12, r12
     34a:	dd 1c       	adc	r13, r13
     34c:	ee 1c       	adc	r14, r14
     34e:	ff 1c       	adc	r15, r15
     350:	a7 01       	movw	r20, r14
     352:	96 01       	movw	r18, r12
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	44 1f       	adc	r20, r20
     35a:	55 1f       	adc	r21, r21
     35c:	22 0f       	add	r18, r18
     35e:	33 1f       	adc	r19, r19
     360:	44 1f       	adc	r20, r20
     362:	55 1f       	adc	r21, r21
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	78 e4       	ldi	r23, 0x48	; 72
     368:	88 ee       	ldi	r24, 0xE8	; 232
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__udivmodsi4>
     370:	e0 ea       	ldi	r30, 0xA0	; 160
     372:	fa e0       	ldi	r31, 0x0A	; 10
     374:	26 83       	std	Z+6, r18	; 0x06
     376:	bb 27       	eor	r27, r27
     378:	a5 2f       	mov	r26, r21
     37a:	94 2f       	mov	r25, r20
     37c:	83 2f       	mov	r24, r19
     37e:	87 83       	std	Z+7, r24	; 0x07
    //USART_Baudrate_Set(&RADIO_USART, 32 , 0);
    /* Enable both RX and TX. */
    USART_Rx_Enable(USART_data.usart);
     380:	8c 81       	ldd	r24, Y+4	; 0x04
     382:	80 61       	ori	r24, 0x10	; 16
     384:	8c 83       	std	Y+4, r24	; 0x04
    USART_Tx_Enable(USART_data.usart);
     386:	8c 81       	ldd	r24, Y+4	; 0x04
     388:	88 60       	ori	r24, 0x08	; 8
     38a:	8c 83       	std	Y+4, r24	; 0x04

    // Enable PMIC interrupt level low
    PMIC.CTRL |= PMIC_LOLVLEX_bm;
     38c:	e0 ea       	ldi	r30, 0xA0	; 160
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	82 81       	ldd	r24, Z+2	; 0x02
     392:	81 60       	ori	r24, 0x01	; 1
     394:	82 83       	std	Z+2, r24	; 0x02

    // Enable global interrupts
    sei();
     396:	78 94       	sei

}
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	df 90       	pop	r13
     3a2:	cf 90       	pop	r12
     3a4:	08 95       	ret

000003a6 <radio_puts>:
        }
    }
}

void radio_puts(char* stringPtr)
{
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ec 01       	movw	r28, r24
    while (*stringPtr)
     3ac:	06 c0       	rjmp	.+12     	; 0x3ba <radio_puts+0x14>
    {
        if(USART_TXBuffer_PutByte(&USART_data, *stringPtr))
     3ae:	8f e2       	ldi	r24, 0x2F	; 47
     3b0:	90 e2       	ldi	r25, 0x20	; 32
     3b2:	0e 94 86 03 	call	0x70c	; 0x70c <USART_TXBuffer_PutByte>
     3b6:	81 11       	cpse	r24, r1
        {
            stringPtr++;
     3b8:	21 96       	adiw	r28, 0x01	; 1
    }
}

void radio_puts(char* stringPtr)
{
    while (*stringPtr)
     3ba:	68 81       	ld	r22, Y
     3bc:	61 11       	cpse	r22, r1
     3be:	f7 cf       	rjmp	.-18     	; 0x3ae <radio_puts+0x8>
        if(USART_TXBuffer_PutByte(&USART_data, *stringPtr))
        {
            stringPtr++;
        }
    }
}
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <__vector_58>:
//  Receive complete interrupt service routine.
//  Calls the common receive complete handler with pointer to the correct USART
//  as argument.

ISR( RADIO_USART_RXC_vect ) // Note that this vector name is a define mapped to the correct interrupt vector
{
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	2f 93       	push	r18
     3d2:	3f 93       	push	r19
     3d4:	4f 93       	push	r20
     3d6:	5f 93       	push	r21
     3d8:	6f 93       	push	r22
     3da:	7f 93       	push	r23
     3dc:	8f 93       	push	r24
     3de:	9f 93       	push	r25
     3e0:	af 93       	push	r26
     3e2:	bf 93       	push	r27
     3e4:	ef 93       	push	r30
     3e6:	ff 93       	push	r31
    // See "board.h"
    USART_RXComplete( &USART_data );
     3e8:	8f e2       	ldi	r24, 0x2F	; 47
     3ea:	90 e2       	ldi	r25, 0x20	; 32
     3ec:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_RXComplete>
}
     3f0:	ff 91       	pop	r31
     3f2:	ef 91       	pop	r30
     3f4:	bf 91       	pop	r27
     3f6:	af 91       	pop	r26
     3f8:	9f 91       	pop	r25
     3fa:	8f 91       	pop	r24
     3fc:	7f 91       	pop	r23
     3fe:	6f 91       	pop	r22
     400:	5f 91       	pop	r21
     402:	4f 91       	pop	r20
     404:	3f 91       	pop	r19
     406:	2f 91       	pop	r18
     408:	0f 90       	pop	r0
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	0f 90       	pop	r0
     40e:	1f 90       	pop	r1
     410:	18 95       	reti

00000412 <__vector_59>:
//  Data register empty  interrupt service routine.
//  Calls the common data register empty complete handler with pointer to the
//  correct USART as argument.

ISR( RADIO_USART_DRE_vect ) // Note that this vector name is a define mapped to the correct interrupt vector
{
     412:	1f 92       	push	r1
     414:	0f 92       	push	r0
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	0f 92       	push	r0
     41a:	11 24       	eor	r1, r1
     41c:	2f 93       	push	r18
     41e:	3f 93       	push	r19
     420:	4f 93       	push	r20
     422:	5f 93       	push	r21
     424:	6f 93       	push	r22
     426:	7f 93       	push	r23
     428:	8f 93       	push	r24
     42a:	9f 93       	push	r25
     42c:	af 93       	push	r26
     42e:	bf 93       	push	r27
     430:	ef 93       	push	r30
     432:	ff 93       	push	r31
    // See "board.h"
    USART_DataRegEmpty( &USART_data );
     434:	8f e2       	ldi	r24, 0x2F	; 47
     436:	90 e2       	ldi	r25, 0x20	; 32
     438:	0e 94 c2 03 	call	0x784	; 0x784 <USART_DataRegEmpty>
     43c:	ff 91       	pop	r31
     43e:	ef 91       	pop	r30
     440:	bf 91       	pop	r27
     442:	af 91       	pop	r26
     444:	9f 91       	pop	r25
     446:	8f 91       	pop	r24
     448:	7f 91       	pop	r23
     44a:	6f 91       	pop	r22
     44c:	5f 91       	pop	r21
     44e:	4f 91       	pop	r20
     450:	3f 91       	pop	r19
     452:	2f 91       	pop	r18
     454:	0f 90       	pop	r0
     456:	0f be       	out	0x3f, r0	; 63
     458:	0f 90       	pop	r0
     45a:	1f 90       	pop	r1
     45c:	18 95       	reti

0000045e <ADC_ResultCh_GetWord_Signed>:
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
    int16_t answer;

    /* Clear interrupt flag.*/
    adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     45e:	21 e0       	ldi	r18, 0x01	; 1
     460:	fc 01       	movw	r30, r24
     462:	23 83       	std	Z+3, r18	; 0x03

    /* Return result register contents*/
    answer = adc_ch->RES - signedOffset;
     464:	84 81       	ldd	r24, Z+4	; 0x04
     466:	95 81       	ldd	r25, Z+5	; 0x05

    return answer;
}
     468:	86 1b       	sub	r24, r22
     46a:	91 09       	sbc	r25, r1
     46c:	67 fd       	sbrc	r22, 7
     46e:	93 95       	inc	r25
     470:	08 95       	ret

00000472 <ADC_Wait_8MHz>:
 *        than 8 MHz use the ADC_wait_32MHz function.
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_8MHz(ADC_t * adc)
{
     472:	fc 01       	movw	r30, r24
    /* Store old prescaler value. */
    uint8_t prescaler_val = adc->PRESCALER;
     474:	84 81       	ldd	r24, Z+4	; 0x04

    /* Set prescaler value to minimum value. */
    adc->PRESCALER = ADC_PRESCALER_DIV4_gc;
     476:	14 82       	std	Z+4, r1	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     478:	af ef       	ldi	r26, 0xFF	; 255
     47a:	b1 e0       	ldi	r27, 0x01	; 1
     47c:	11 97       	sbiw	r26, 0x01	; 1
     47e:	f1 f7       	brne	.-4      	; 0x47c <ADC_Wait_8MHz+0xa>
     480:	00 c0       	rjmp	.+0      	; 0x482 <ADC_Wait_8MHz+0x10>
     482:	00 00       	nop

    /* Wait 4*COMMON_MODE_CYCLES for common mode to settle. */
    _delay_us(4*COMMON_MODE_CYCLES);

    /* Set prescaler to old value*/
    adc->PRESCALER = prescaler_val;
     484:	84 83       	std	Z+4, r24	; 0x04
     486:	08 95       	ret

00000488 <ADC_Offset_Get_Signed>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
     488:	fb 01       	movw	r30, r22
    if (oversampling)
     48a:	44 23       	and	r20, r20
     48c:	e1 f0       	breq	.+56     	; 0x4c6 <ADC_Offset_Get_Signed+0x3e>
     48e:	84 e0       	ldi	r24, 0x04	; 4
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
    int16_t answer;

    /* Clear interrupt flag.*/
    adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     496:	61 e0       	ldi	r22, 0x01	; 1
    {
        int16_t offset=0;
        for (int i=0; i<4; i++)
        {
            /* Do one conversion to find offset. */
            ADC_Ch_Conversion_Start(ch);
     498:	40 81       	ld	r20, Z
     49a:	40 68       	ori	r20, 0x80	; 128
     49c:	40 83       	st	Z, r20

            do
            {
            }
            while (!ADC_Ch_Conversion_Complete(ch));
     49e:	43 81       	ldd	r20, Z+3	; 0x03
     4a0:	40 ff       	sbrs	r20, 0
     4a2:	fd cf       	rjmp	.-6      	; 0x49e <ADC_Offset_Get_Signed+0x16>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
    int16_t answer;

    /* Clear interrupt flag.*/
    adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     4a4:	63 83       	std	Z+3, r22	; 0x03

    /* Return result register contents*/
    answer = adc_ch->RES - signedOffset;
     4a6:	44 81       	ldd	r20, Z+4	; 0x04
     4a8:	55 81       	ldd	r21, Z+5	; 0x05

            do
            {
            }
            while (!ADC_Ch_Conversion_Complete(ch));
            offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
     4aa:	24 0f       	add	r18, r20
     4ac:	35 1f       	adc	r19, r21
     4ae:	01 97       	sbiw	r24, 0x01	; 1
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
        int16_t offset=0;
        for (int i=0; i<4; i++)
     4b0:	00 97       	sbiw	r24, 0x00	; 0
     4b2:	91 f7       	brne	.-28     	; 0x498 <ADC_Offset_Get_Signed+0x10>
            {
            }
            while (!ADC_Ch_Conversion_Complete(ch));
            offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
        }
        return ((int8_t)(offset/4));
     4b4:	c9 01       	movw	r24, r18
     4b6:	99 23       	and	r25, r25
     4b8:	0c f4       	brge	.+2      	; 0x4bc <ADC_Offset_Get_Signed+0x34>
     4ba:	03 96       	adiw	r24, 0x03	; 3
     4bc:	95 95       	asr	r25
     4be:	87 95       	ror	r24
     4c0:	95 95       	asr	r25
     4c2:	87 95       	ror	r24
     4c4:	08 95       	ret
    else
    {
        int8_t offset=0;

        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
     4c6:	80 81       	ld	r24, Z
     4c8:	80 68       	ori	r24, 0x80	; 128
     4ca:	80 83       	st	Z, r24

        do
        {
        }
        while (!ADC_Ch_Conversion_Complete(ch));
     4cc:	83 81       	ldd	r24, Z+3	; 0x03
     4ce:	80 ff       	sbrs	r24, 0
     4d0:	fd cf       	rjmp	.-6      	; 0x4cc <ADC_Offset_Get_Signed+0x44>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
    int16_t answer;

    /* Clear interrupt flag.*/
    adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	83 83       	std	Z+3, r24	; 0x03

    /* Return result register contents*/
    answer = adc_ch->RES - signedOffset;
     4d6:	84 81       	ldd	r24, Z+4	; 0x04
     4d8:	95 81       	ldd	r25, Z+5	; 0x05
        while (!ADC_Ch_Conversion_Complete(ch));
        offset = (uint8_t)ADC_ResultCh_GetWord_Signed(ch, 0x00);

        return offset;
    }
}
     4da:	08 95       	ret

000004dc <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
    uint8_t result;

    /* Load the NVM Command register to read the calibration row. */
    NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	90 93 ca 01 	sts	0x01CA, r25
    result = pgm_read_byte(index);
     4e2:	e8 2f       	mov	r30, r24
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	84 91       	lpm	r24, Z

    /* Clean up NVM Command register. */
    NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     4e8:	10 92 ca 01 	sts	0x01CA, r1

    return result;
}
     4ec:	08 95       	ret

000004ee <ADC_CalibrationValues_Load>:
 *  register. The calibration data reduces the non-linearity error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	ec 01       	movw	r28, r24
    if (&ADCA == adc)
     4f4:	c1 15       	cp	r28, r1
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	d8 07       	cpc	r29, r24
     4fa:	59 f4       	brne	.+22     	; 0x512 <ADC_CalibrationValues_Load+0x24>
    {
        /* Get ADCACAL0 from production signature . */
        adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
     4fc:	80 e2       	ldi	r24, 0x20	; 32
     4fe:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SP_ReadCalibrationByte>
     502:	c0 e0       	ldi	r28, 0x00	; 0
     504:	d2 e0       	ldi	r29, 0x02	; 2
     506:	8c 87       	std	Y+12, r24	; 0x0c
        adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
     508:	81 e2       	ldi	r24, 0x21	; 33
     50a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SP_ReadCalibrationByte>
     50e:	8d 87       	std	Y+13, r24	; 0x0d
     510:	08 c0       	rjmp	.+16     	; 0x522 <ADC_CalibrationValues_Load+0x34>
    }
    else
    {
        /* Get ADCBCAL0 from production signature  */
        adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
     512:	84 e2       	ldi	r24, 0x24	; 36
     514:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SP_ReadCalibrationByte>
     518:	8c 87       	std	Y+12, r24	; 0x0c
        adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
     51a:	85 e2       	ldi	r24, 0x25	; 37
     51c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SP_ReadCalibrationByte>
     520:	8d 87       	std	Y+13, r24	; 0x0d
    }
}
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     528:	0f 93       	push	r16
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	1f 92       	push	r1
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62

    // Restore global interrupt setting from scratch register.
    asm("out  0x3F, R1");

#elif defined __GNUC__
    AVR_ENTER_CRITICAL_REGION( );
     534:	2f b7       	in	r18, 0x3f	; 63
     536:	29 83       	std	Y+1, r18	; 0x01
     538:	f8 94       	cli
    volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
    RAMPZ = 0;
     53a:	1b be       	out	0x3b, r1	; 59
#endif
    asm volatile(
     53c:	fc 01       	movw	r30, r24
     53e:	08 ed       	ldi	r16, 0xD8	; 216
     540:	04 bf       	out	0x34, r16	; 52
     542:	60 83       	st	Z, r22
        :
        : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
        : "r16", "r30", "r31"
    );

    AVR_LEAVE_CRITICAL_REGION( );
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	8f bf       	out	0x3f, r24	; 63
#endif
}
     548:	0f 90       	pop	r0
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	0f 91       	pop	r16
     550:	08 95       	ret

00000552 <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
    uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     552:	68 2b       	or	r22, r24
    CCPWrite( &CLK.PSCTRL, PSconfig );
     554:	81 e4       	ldi	r24, 0x41	; 65
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 94 02 	call	0x528	; 0x528 <CCPWrite>
     55c:	08 95       	ret

0000055e <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	18 2f       	mov	r17, r24
    uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     566:	c0 e4       	ldi	r28, 0x40	; 64
     568:	d0 e0       	ldi	r29, 0x00	; 0
     56a:	68 81       	ld	r22, Y
     56c:	68 7f       	andi	r22, 0xF8	; 248
     56e:	68 2b       	or	r22, r24
    CCPWrite( &CLK.CTRL, clkCtrl );
     570:	80 e4       	ldi	r24, 0x40	; 64
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 94 02 	call	0x528	; 0x528 <CCPWrite>
    clkCtrl = ( CLK.CTRL & clockSource );
     578:	88 81       	ld	r24, Y
    return clkCtrl;
}
     57a:	81 23       	and	r24, r17
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	1f 91       	pop	r17
     582:	08 95       	ret

00000584 <TC0_ConfigClockSource>:
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
    tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
     584:	fc 01       	movw	r30, r24
     586:	20 81       	ld	r18, Z
     588:	20 7f       	andi	r18, 0xF0	; 240
     58a:	62 2b       	or	r22, r18
     58c:	60 83       	st	Z, r22
     58e:	08 95       	ret

00000590 <TC0_ConfigWGM>:
 *  \param tc    Timer/Counter module instance.
 *  \param wgm   Waveform generation mode.
 */
void TC0_ConfigWGM( volatile TC0_t * tc, TC_WGMODE_t wgm )
{
    tc->CTRLB = ( tc->CTRLB & ~TC0_WGMODE_gm ) | wgm;
     590:	fc 01       	movw	r30, r24
     592:	21 81       	ldd	r18, Z+1	; 0x01
     594:	28 7f       	andi	r18, 0xF8	; 248
     596:	62 2b       	or	r22, r18
     598:	61 83       	std	Z+1, r22	; 0x01
     59a:	08 95       	ret

0000059c <TC0_EnableCCChannels>:
{
    /* Make sure only CCxEN bits are set in enableMask. */
    enableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );

    /* Enable channels. */
    tc->CTRLB |= enableMask;
     59c:	fc 01       	movw	r30, r24
     59e:	21 81       	ldd	r18, Z+1	; 0x01
 *  \param enableMask       Mask of channels to enable.
 */
void TC0_EnableCCChannels( volatile TC0_t * tc, uint8_t enableMask )
{
    /* Make sure only CCxEN bits are set in enableMask. */
    enableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );
     5a0:	60 7f       	andi	r22, 0xF0	; 240

    /* Enable channels. */
    tc->CTRLB |= enableMask;
     5a2:	62 2b       	or	r22, r18
     5a4:	61 83       	std	Z+1, r22	; 0x01
     5a6:	08 95       	ret

000005a8 <TC0_DisableCCChannels>:
{
    /* Make sure only CCxEN bits are set in disableMask. */
    disableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );

    /* Disable channels. */
    tc->CTRLB &= ~disableMask;
     5a8:	fc 01       	movw	r30, r24
     5aa:	21 81       	ldd	r18, Z+1	; 0x01
 *  \param disableMask      Mask of channels to disable.
 */
void TC0_DisableCCChannels( volatile TC0_t * tc, uint8_t disableMask )
{
    /* Make sure only CCxEN bits are set in disableMask. */
    disableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );
     5ac:	60 7f       	andi	r22, 0xF0	; 240

    /* Disable channels. */
    tc->CTRLB &= ~disableMask;
     5ae:	60 95       	com	r22
     5b0:	62 23       	and	r22, r18
     5b2:	61 83       	std	Z+1, r22	; 0x01
     5b4:	08 95       	ret

000005b6 <TC0_SetOverflowIntLevel>:
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
    tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     5b6:	fc 01       	movw	r30, r24
     5b8:	26 81       	ldd	r18, Z+6	; 0x06
     5ba:	2c 7f       	andi	r18, 0xFC	; 252
     5bc:	62 2b       	or	r22, r18
     5be:	66 83       	std	Z+6, r22	; 0x06
     5c0:	08 95       	ret

000005c2 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
     5c2:	fc 01       	movw	r30, r24
    uint8_t currentStatus = twi->interface->MASTER.STATUS;
     5c4:	a0 81       	ld	r26, Z
     5c6:	b1 81       	ldd	r27, Z+1	; 0x01
     5c8:	14 96       	adiw	r26, 0x04	; 4
     5ca:	8c 91       	ld	r24, X
     5cc:	14 97       	sbiw	r26, 0x04	; 4

    /* If bus error. */
    if (currentStatus & TWI_MASTER_BUSERR_bm)
     5ce:	82 ff       	sbrs	r24, 2
     5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
    {
        twi->result = TWIM_RESULT_BUS_ERROR;
     5d2:	94 e0       	ldi	r25, 0x04	; 4
     5d4:	92 8b       	std	Z+18, r25	; 0x12
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
    }
    /* If arbitration lost. */
    else
    {
        twi->result = TWIM_RESULT_ARBITRATION_LOST;
     5d8:	93 e0       	ldi	r25, 0x03	; 3
     5da:	92 8b       	std	Z+18, r25	; 0x12
    }

    /* Clear interrupt flag. */
    twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     5dc:	88 60       	ori	r24, 0x08	; 8
     5de:	14 96       	adiw	r26, 0x04	; 4
     5e0:	8c 93       	st	X, r24

    twi->status = TWIM_STATUS_READY;
     5e2:	11 8a       	std	Z+17, r1	; 0x11
     5e4:	08 95       	ret

000005e6 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	fc 01       	movw	r30, r24
    /* Local variables used in if tests to avoid compiler warning. */
    uint8_t bytesToWrite  = twi->bytesToWrite;
     5ec:	95 85       	ldd	r25, Z+13	; 0x0d
    uint8_t bytesToRead   = twi->bytesToRead;
     5ee:	26 85       	ldd	r18, Z+14	; 0x0e

    /* If NOT acknowledged (NACK) by slave cancel the transaction. */
    if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm)
     5f0:	a0 81       	ld	r26, Z
     5f2:	b1 81       	ldd	r27, Z+1	; 0x01
     5f4:	14 96       	adiw	r26, 0x04	; 4
     5f6:	8c 91       	ld	r24, X
     5f8:	14 97       	sbiw	r26, 0x04	; 4
     5fa:	84 ff       	sbrs	r24, 4
     5fc:	07 c0       	rjmp	.+14     	; 0x60c <TWI_MasterWriteHandler+0x26>
    {
        twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	13 96       	adiw	r26, 0x03	; 3
     602:	8c 93       	st	X, r24
        twi->result = TWIM_RESULT_NACK_RECEIVED;
     604:	85 e0       	ldi	r24, 0x05	; 5
     606:	82 8b       	std	Z+18, r24	; 0x12
        twi->status = TWIM_STATUS_READY;
     608:	11 8a       	std	Z+17, r1	; 0x11
     60a:	1c c0       	rjmp	.+56     	; 0x644 <TWI_MasterWriteHandler+0x5e>
    }

    /* If more bytes to write, send data. */
    else if (twi->bytesWritten < bytesToWrite)
     60c:	87 85       	ldd	r24, Z+15	; 0x0f
     60e:	89 17       	cp	r24, r25
     610:	58 f4       	brcc	.+22     	; 0x628 <TWI_MasterWriteHandler+0x42>
    {
        uint8_t data = twi->writeData[twi->bytesWritten];
     612:	87 85       	ldd	r24, Z+15	; 0x0f
     614:	ef 01       	movw	r28, r30
     616:	c8 0f       	add	r28, r24
     618:	d1 1d       	adc	r29, r1
     61a:	8b 81       	ldd	r24, Y+3	; 0x03
        twi->interface->MASTER.DATA = data;
     61c:	17 96       	adiw	r26, 0x07	; 7
     61e:	8c 93       	st	X, r24
        ++twi->bytesWritten;
     620:	87 85       	ldd	r24, Z+15	; 0x0f
     622:	8f 5f       	subi	r24, 0xFF	; 255
     624:	87 87       	std	Z+15, r24	; 0x0f
     626:	0e c0       	rjmp	.+28     	; 0x644 <TWI_MasterWriteHandler+0x5e>
    }

    /* If bytes to read, send repeated START condition + Address +
     * 'R/_W = 1'
     */
    else if (twi->bytesRead < bytesToRead)
     628:	80 89       	ldd	r24, Z+16	; 0x10
     62a:	82 17       	cp	r24, r18
     62c:	28 f4       	brcc	.+10     	; 0x638 <TWI_MasterWriteHandler+0x52>
    {
        uint8_t readAddress = twi->address | 0x01;
     62e:	82 81       	ldd	r24, Z+2	; 0x02
     630:	81 60       	ori	r24, 0x01	; 1
        twi->interface->MASTER.ADDR = readAddress;
     632:	16 96       	adiw	r26, 0x06	; 6
     634:	8c 93       	st	X, r24
     636:	06 c0       	rjmp	.+12     	; 0x644 <TWI_MasterWriteHandler+0x5e>
    }

    /* If transaction finished, send STOP condition and set RESULT OK. */
    else
    {
        twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     638:	83 e0       	ldi	r24, 0x03	; 3
     63a:	13 96       	adiw	r26, 0x03	; 3
     63c:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
    twi->result = result;
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	82 8b       	std	Z+18, r24	; 0x12
    twi->status = TWIM_STATUS_READY;
     642:	11 8a       	std	Z+17, r1	; 0x11
    else
    {
        twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
        TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
    }
}
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
     64a:	fc 01       	movw	r30, r24
    /* Fetch data if bytes to be read. */
    if (twi->bytesRead < TWIM_READ_BUFFER_SIZE)
     64c:	80 89       	ldd	r24, Z+16	; 0x10
     64e:	88 30       	cpi	r24, 0x08	; 8
     650:	70 f4       	brcc	.+28     	; 0x66e <TWI_MasterReadHandler+0x24>
    {
        uint8_t data = twi->interface->MASTER.DATA;
     652:	a0 81       	ld	r26, Z
     654:	b1 81       	ldd	r27, Z+1	; 0x01
     656:	17 96       	adiw	r26, 0x07	; 7
     658:	8c 91       	ld	r24, X
        twi->readData[twi->bytesRead] = data;
     65a:	90 89       	ldd	r25, Z+16	; 0x10
     65c:	df 01       	movw	r26, r30
     65e:	a9 0f       	add	r26, r25
     660:	b1 1d       	adc	r27, r1
     662:	15 96       	adiw	r26, 0x05	; 5
     664:	8c 93       	st	X, r24
        twi->bytesRead++;
     666:	80 89       	ldd	r24, Z+16	; 0x10
     668:	8f 5f       	subi	r24, 0xFF	; 255
     66a:	80 8b       	std	Z+16, r24	; 0x10
     66c:	08 c0       	rjmp	.+16     	; 0x67e <TWI_MasterReadHandler+0x34>
    }

    /* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
    else
    {
        twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     66e:	a0 81       	ld	r26, Z
     670:	b1 81       	ldd	r27, Z+1	; 0x01
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	13 96       	adiw	r26, 0x03	; 3
     676:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
    twi->result = result;
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	82 8b       	std	Z+18, r24	; 0x12
    twi->status = TWIM_STATUS_READY;
     67c:	11 8a       	std	Z+17, r1	; 0x11
        twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
        TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
    }

    /* Local variable used in if test to avoid compiler warning. */
    uint8_t bytesToRead = twi->bytesToRead;
     67e:	96 85       	ldd	r25, Z+14	; 0x0e

    /* If more bytes to read, issue ACK and start a byte read. */
    if (twi->bytesRead < bytesToRead)
     680:	80 89       	ldd	r24, Z+16	; 0x10
     682:	89 17       	cp	r24, r25
     684:	30 f4       	brcc	.+12     	; 0x692 <TWI_MasterReadHandler+0x48>
    {
        twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     686:	01 90       	ld	r0, Z+
     688:	f0 81       	ld	r31, Z
     68a:	e0 2d       	mov	r30, r0
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	83 83       	std	Z+3, r24	; 0x03
     690:	08 95       	ret
    }

    /* If transaction finished, issue NACK and STOP condition. */
    else
    {
        twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
     692:	a0 81       	ld	r26, Z
     694:	b1 81       	ldd	r27, Z+1	; 0x01
     696:	87 e0       	ldi	r24, 0x07	; 7
     698:	13 96       	adiw	r26, 0x03	; 3
     69a:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
    twi->result = result;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	82 8b       	std	Z+18, r24	; 0x12
    twi->status = TWIM_STATUS_READY;
     6a0:	11 8a       	std	Z+17, r1	; 0x11
     6a2:	08 95       	ret

000006a4 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
    uint8_t currentStatus = twi->interface->MASTER.STATUS;
     6a4:	dc 01       	movw	r26, r24
     6a6:	ed 91       	ld	r30, X+
     6a8:	fc 91       	ld	r31, X
     6aa:	24 81       	ldd	r18, Z+4	; 0x04
     6ac:	32 2f       	mov	r19, r18
     6ae:	3c 70       	andi	r19, 0x0C	; 12

    /* If arbitration lost or bus error. */
    if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     6b0:	19 f0       	breq	.+6      	; 0x6b8 <TWI_MasterInterruptHandler+0x14>
            (currentStatus & TWI_MASTER_BUSERR_bm))
    {
        TWI_MasterArbitrationLostBusErrorHandler(twi);
     6b2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <TWI_MasterArbitrationLostBusErrorHandler>
     6b6:	08 95       	ret
    }

    /* If master write interrupt. */
    else if (currentStatus & TWI_MASTER_WIF_bm)
     6b8:	26 ff       	sbrs	r18, 6
     6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <TWI_MasterInterruptHandler+0x1e>
    {
        TWI_MasterWriteHandler(twi);
     6bc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <TWI_MasterWriteHandler>
     6c0:	08 95       	ret
    }

    /* If master read interrupt. */
    else if (currentStatus & TWI_MASTER_RIF_bm)
     6c2:	22 23       	and	r18, r18
     6c4:	1c f4       	brge	.+6      	; 0x6cc <TWI_MasterInterruptHandler+0x28>
    {
        TWI_MasterReadHandler(twi);
     6c6:	0e 94 25 03 	call	0x64a	; 0x64a <TWI_MasterReadHandler>
     6ca:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
    twi->result = result;
     6cc:	26 e0       	ldi	r18, 0x06	; 6
     6ce:	fc 01       	movw	r30, r24
     6d0:	22 8b       	std	Z+18, r18	; 0x12
    twi->status = TWIM_STATUS_READY;
     6d2:	11 8a       	std	Z+17, r1	; 0x11
     6d4:	08 95       	ret

000006d6 <USART_InterruptDriver_Initialize>:
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
    usart_data->usart = usart;
     6d6:	fc 01       	movw	r30, r24
     6d8:	60 83       	st	Z, r22
     6da:	71 83       	std	Z+1, r23	; 0x01
    usart_data->dreIntLevel = dreIntLevel;
     6dc:	42 83       	std	Z+2, r20	; 0x02

    usart_data->buffer.RX_Tail = 0;
     6de:	ec 5b       	subi	r30, 0xBC	; 188
     6e0:	ff 4f       	sbci	r31, 0xFF	; 255
     6e2:	10 82       	st	Z, r1
    usart_data->buffer.RX_Head = 0;
     6e4:	31 97       	sbiw	r30, 0x01	; 1
     6e6:	10 82       	st	Z, r1
    usart_data->buffer.TX_Tail = 0;
     6e8:	33 96       	adiw	r30, 0x03	; 3
     6ea:	10 82       	st	Z, r1
    usart_data->buffer.TX_Head = 0;
     6ec:	31 97       	sbiw	r30, 0x01	; 1
     6ee:	10 82       	st	Z, r1
     6f0:	08 95       	ret

000006f2 <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
    /* Make copies to make sure that volatile access is specified. */
    uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     6f2:	fc 01       	movw	r30, r24
     6f4:	eb 5b       	subi	r30, 0xBB	; 187
     6f6:	ff 4f       	sbci	r31, 0xFF	; 255
     6f8:	20 81       	ld	r18, Z
    uint8_t tempTail = usart_data->buffer.TX_Tail;
     6fa:	31 96       	adiw	r30, 0x01	; 1
     6fc:	90 81       	ld	r25, Z
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
    /* Make copies to make sure that volatile access is specified. */
    uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     6fe:	2f 5f       	subi	r18, 0xFF	; 255
     700:	2f 71       	andi	r18, 0x1F	; 31
    uint8_t tempTail = usart_data->buffer.TX_Tail;

    /* There are data left in the buffer unless Head and Tail are equal. */
    return (tempHead != tempTail);
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	29 13       	cpse	r18, r25
     706:	01 c0       	rjmp	.+2      	; 0x70a <USART_TXBuffer_FreeSpace+0x18>
     708:	80 e0       	ldi	r24, 0x00	; 0
}
     70a:	08 95       	ret

0000070c <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	ec 01       	movw	r28, r24
     714:	16 2f       	mov	r17, r22
    uint8_t tempTX_Head;
    bool TXBuffer_FreeSpace;
    USART_Buffer_t * TXbufPtr;

    TXbufPtr = &usart_data->buffer;
    TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
     716:	0e 94 79 03 	call	0x6f2	; 0x6f2 <USART_TXBuffer_FreeSpace>


    if(TXBuffer_FreeSpace)
     71a:	88 23       	and	r24, r24
     71c:	99 f0       	breq	.+38     	; 0x744 <USART_TXBuffer_PutByte+0x38>
    {
        tempTX_Head = TXbufPtr->TX_Head;
     71e:	fe 01       	movw	r30, r28
     720:	eb 5b       	subi	r30, 0xBB	; 187
     722:	ff 4f       	sbci	r31, 0xFF	; 255
     724:	90 81       	ld	r25, Z
        TXbufPtr->TX[tempTX_Head]= data;
     726:	de 01       	movw	r26, r28
     728:	a9 0f       	add	r26, r25
     72a:	b1 1d       	adc	r27, r1
     72c:	93 96       	adiw	r26, 0x23	; 35
     72e:	1c 93       	st	X, r17
        /* Advance buffer head. */
        TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
     730:	9f 5f       	subi	r25, 0xFF	; 255
     732:	9f 71       	andi	r25, 0x1F	; 31
     734:	90 83       	st	Z, r25

        /* Enable DRE interrupt. */
        tempCTRLA = usart_data->usart->CTRLA;
     736:	e8 81       	ld	r30, Y
     738:	f9 81       	ldd	r31, Y+1	; 0x01
     73a:	93 81       	ldd	r25, Z+3	; 0x03
        tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
     73c:	9c 7f       	andi	r25, 0xFC	; 252
     73e:	2a 81       	ldd	r18, Y+2	; 0x02
     740:	92 2b       	or	r25, r18
        usart_data->usart->CTRLA = tempCTRLA;
     742:	93 83       	std	Z+3, r25	; 0x03
    }
    return TXBuffer_FreeSpace;
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	08 95       	ret

0000074c <USART_RXComplete>:
    USART_Buffer_t * bufPtr;
    bool ans;

    bufPtr = &usart_data->buffer;
    /* Advance buffer head. */
    uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     74c:	fc 01       	movw	r30, r24
     74e:	ed 5b       	subi	r30, 0xBD	; 189
     750:	ff 4f       	sbci	r31, 0xFF	; 255
     752:	20 81       	ld	r18, Z
     754:	2f 5f       	subi	r18, 0xFF	; 255
     756:	2f 71       	andi	r18, 0x1F	; 31

    /* Check for overflow. */
    uint8_t tempRX_Tail = bufPtr->RX_Tail;
     758:	31 96       	adiw	r30, 0x01	; 1
     75a:	30 81       	ld	r19, Z
    uint8_t data = usart_data->usart->DATA;
     75c:	dc 01       	movw	r26, r24
     75e:	ed 91       	ld	r30, X+
     760:	fc 91       	ld	r31, X
     762:	11 97       	sbiw	r26, 0x01	; 1
     764:	40 81       	ld	r20, Z

    if (tempRX_Head == tempRX_Tail)
     766:	23 17       	cp	r18, r19
     768:	59 f0       	breq	.+22     	; 0x780 <USART_RXComplete+0x34>
        ans = false;
    }
    else
    {
        ans = true;
        usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     76a:	fc 01       	movw	r30, r24
     76c:	ed 5b       	subi	r30, 0xBD	; 189
     76e:	ff 4f       	sbci	r31, 0xFF	; 255
     770:	30 81       	ld	r19, Z
     772:	a3 0f       	add	r26, r19
     774:	b1 1d       	adc	r27, r1
     776:	13 96       	adiw	r26, 0x03	; 3
     778:	4c 93       	st	X, r20
        usart_data->buffer.RX_Head = tempRX_Head;
     77a:	20 83       	st	Z, r18
    {
        ans = false;
    }
    else
    {
        ans = true;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	08 95       	ret
    uint8_t tempRX_Tail = bufPtr->RX_Tail;
    uint8_t data = usart_data->usart->DATA;

    if (tempRX_Head == tempRX_Tail)
    {
        ans = false;
     780:	80 e0       	ldi	r24, 0x00	; 0
        ans = true;
        usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
        usart_data->buffer.RX_Head = tempRX_Head;
    }
    return ans;
}
     782:	08 95       	ret

00000784 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
    USART_Buffer_t * bufPtr;
    bufPtr = &usart_data->buffer;

    /* Check if all data is transmitted. */
    uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
     788:	fc 01       	movw	r30, r24
     78a:	ea 5b       	subi	r30, 0xBA	; 186
     78c:	ff 4f       	sbci	r31, 0xFF	; 255
     78e:	20 81       	ld	r18, Z
    if (bufPtr->TX_Head == tempTX_Tail)
     790:	31 97       	sbiw	r30, 0x01	; 1
     792:	30 81       	ld	r19, Z
     794:	32 13       	cpse	r19, r18
     796:	07 c0       	rjmp	.+14     	; 0x7a6 <USART_DataRegEmpty+0x22>
    {
        /* Disable DRE interrupts. */
        uint8_t tempCTRLA = usart_data->usart->CTRLA;
     798:	dc 01       	movw	r26, r24
     79a:	ed 91       	ld	r30, X+
     79c:	fc 91       	ld	r31, X
     79e:	83 81       	ldd	r24, Z+3	; 0x03
        tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     7a0:	8c 7f       	andi	r24, 0xFC	; 252
        usart_data->usart->CTRLA = tempCTRLA;
     7a2:	83 83       	std	Z+3, r24	; 0x03
     7a4:	11 c0       	rjmp	.+34     	; 0x7c8 <USART_DataRegEmpty+0x44>
    }
    else
    {
        /* Start transmitting. */
        uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
     7a6:	fc 01       	movw	r30, r24
     7a8:	ea 5b       	subi	r30, 0xBA	; 186
     7aa:	ff 4f       	sbci	r31, 0xFF	; 255
     7ac:	20 81       	ld	r18, Z
     7ae:	dc 01       	movw	r26, r24
     7b0:	a2 0f       	add	r26, r18
     7b2:	b1 1d       	adc	r27, r1
     7b4:	93 96       	adiw	r26, 0x23	; 35
     7b6:	2c 91       	ld	r18, X
        usart_data->usart->DATA = data;
     7b8:	ec 01       	movw	r28, r24
     7ba:	a8 81       	ld	r26, Y
     7bc:	b9 81       	ldd	r27, Y+1	; 0x01
     7be:	2c 93       	st	X, r18

        /* Advance buffer tail. */
        bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
     7c0:	80 81       	ld	r24, Z
     7c2:	8f 5f       	subi	r24, 0xFF	; 255
     7c4:	8f 71       	andi	r24, 0x1F	; 31
     7c6:	80 83       	st	Z, r24
    }
}
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	08 95       	ret

000007ce <__vector_46>:
    gyro_zero[2] = ((twiMaster.readData[6]<<8)|twiMaster.readData[5]);
}

/*! TWIC Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
     7ce:	1f 92       	push	r1
     7d0:	0f 92       	push	r0
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	0f 92       	push	r0
     7d6:	11 24       	eor	r1, r1
     7d8:	2f 93       	push	r18
     7da:	3f 93       	push	r19
     7dc:	4f 93       	push	r20
     7de:	5f 93       	push	r21
     7e0:	6f 93       	push	r22
     7e2:	7f 93       	push	r23
     7e4:	8f 93       	push	r24
     7e6:	9f 93       	push	r25
     7e8:	af 93       	push	r26
     7ea:	bf 93       	push	r27
     7ec:	ef 93       	push	r30
     7ee:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twiMaster);
     7f0:	88 e8       	ldi	r24, 0x88	; 136
     7f2:	90 e2       	ldi	r25, 0x20	; 32
     7f4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <TWI_MasterInterruptHandler>
}
     7f8:	ff 91       	pop	r31
     7fa:	ef 91       	pop	r30
     7fc:	bf 91       	pop	r27
     7fe:	af 91       	pop	r26
     800:	9f 91       	pop	r25
     802:	8f 91       	pop	r24
     804:	7f 91       	pop	r23
     806:	6f 91       	pop	r22
     808:	5f 91       	pop	r21
     80a:	4f 91       	pop	r20
     80c:	3f 91       	pop	r19
     80e:	2f 91       	pop	r18
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	0f 90       	pop	r0
     816:	1f 90       	pop	r1
     818:	18 95       	reti

0000081a <motor_init>:

#include "motor.h"
#include <util/delay.h>

void motor_init(void)
{
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
    // Set motor pins as output and set them low
    PORT_SetPinsAsOutput(&MOTOR_PORT,MOTOR_PINMASK);
     81e:	e0 e6       	ldi	r30, 0x60	; 96
     820:	f6 e0       	ldi	r31, 0x06	; 6
     822:	8f e0       	ldi	r24, 0x0F	; 15
     824:	81 83       	std	Z+1, r24	; 0x01
    PORT_ClearPins(&MOTOR_PORT,MOTOR_PINMASK);
     826:	86 83       	std	Z+6, r24	; 0x06

    // Configure PORTD Timer 0 as Single Slope PWM source 32kHz
    TC_SetPeriod(&MOTOR_TIMER,1000);
     828:	c0 e0       	ldi	r28, 0x00	; 0
     82a:	d9 e0       	ldi	r29, 0x09	; 9
     82c:	88 ee       	ldi	r24, 0xE8	; 232
     82e:	93 e0       	ldi	r25, 0x03	; 3
     830:	8e a3       	std	Y+38, r24	; 0x26
     832:	9f a3       	std	Y+39, r25	; 0x27
    TC0_ConfigWGM(&MOTOR_TIMER,TC_WGMODE_SS_gc);
     834:	63 e0       	ldi	r22, 0x03	; 3
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	99 e0       	ldi	r25, 0x09	; 9
     83a:	0e 94 c8 02 	call	0x590	; 0x590 <TC0_ConfigWGM>
    TC0_DisableCCChannels(&MOTOR_TIMER,(TC0_CCAEN_bm|TC0_CCBEN_bm|TC0_CCCEN_bm|TC0_CCDEN_bm));
     83e:	60 ef       	ldi	r22, 0xF0	; 240
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	99 e0       	ldi	r25, 0x09	; 9
     844:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
    TC0_ConfigClockSource(&MOTOR_TIMER,TC_CLKSEL_DIV1_gc);
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	99 e0       	ldi	r25, 0x09	; 9
     84e:	0e 94 c2 02 	call	0x584	; 0x584 <TC0_ConfigClockSource>

    TC_SetCompareA (&MOTOR_TIMER,0);
     852:	18 ae       	std	Y+56, r1	; 0x38
     854:	19 ae       	std	Y+57, r1	; 0x39
    TC_SetCompareB (&MOTOR_TIMER,0);
     856:	1a ae       	std	Y+58, r1	; 0x3a
     858:	1b ae       	std	Y+59, r1	; 0x3b
    TC_SetCompareC (&MOTOR_TIMER,0);
     85a:	1c ae       	std	Y+60, r1	; 0x3c
     85c:	1d ae       	std	Y+61, r1	; 0x3d
    TC_SetCompareD (&MOTOR_TIMER,0);
     85e:	10 92 3e 09 	sts	0x093E, r1
     862:	10 92 3f 09 	sts	0x093F, r1
	
	PORTR.DIRSET = 3;
     866:	e0 ee       	ldi	r30, 0xE0	; 224
     868:	f7 e0       	ldi	r31, 0x07	; 7
     86a:	83 e0       	ldi	r24, 0x03	; 3
     86c:	81 83       	std	Z+1, r24	; 0x01
	PORTR.OUTCLR = 3;
     86e:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     870:	8f e3       	ldi	r24, 0x3F	; 63
     872:	9f e1       	ldi	r25, 0x1F	; 31
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	f1 f7       	brne	.-4      	; 0x874 <motor_init+0x5a>
     878:	00 c0       	rjmp	.+0      	; 0x87a <motor_init+0x60>
     87a:	00 00       	nop
	_delay_ms(1);
	PORTR.OUTSET = 3;
     87c:	83 e0       	ldi	r24, 0x03	; 3
     87e:	85 83       	std	Z+5, r24	; 0x05
}
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <motor_set>:
        PORT_SetPins(&MOTOR_PORT,(1<<BIN1)|(1<<BIN2));
    }
}

void motor_set(int16_t left, int16_t right)
{
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	8c 01       	movw	r16, r24
     890:	eb 01       	movw	r28, r22
    if(right > 0)
     892:	1c 16       	cp	r1, r28
     894:	1d 06       	cpc	r1, r29
     896:	c4 f4       	brge	.+48     	; 0x8c8 <motor_set+0x42>
    {
        // PWM to AIN1, AIN2 high
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCCEN_bm);
     898:	60 e4       	ldi	r22, 0x40	; 64
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	99 e0       	ldi	r25, 0x09	; 9
     89e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        TC0_EnableCCChannels(&MOTOR_TIMER,TC0_CCDEN_bm);
     8a2:	60 e8       	ldi	r22, 0x80	; 128
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	99 e0       	ldi	r25, 0x09	; 9
     8a8:	0e 94 ce 02 	call	0x59c	; 0x59c <TC0_EnableCCChannels>

        PORT_SetOutputBit(&MOTOR_PORT,AIN2);
     8ac:	e0 e6       	ldi	r30, 0x60	; 96
     8ae:	f6 e0       	ldi	r31, 0x06	; 6
     8b0:	84 81       	ldd	r24, Z+4	; 0x04
     8b2:	84 60       	ori	r24, 0x04	; 4
     8b4:	84 83       	std	Z+4, r24	; 0x04
        TC_SetCompareD (&MOTOR_TIMER,1001-right);
     8b6:	89 ee       	ldi	r24, 0xE9	; 233
     8b8:	93 e0       	ldi	r25, 0x03	; 3
     8ba:	8c 1b       	sub	r24, r28
     8bc:	9d 0b       	sbc	r25, r29
     8be:	80 93 3e 09 	sts	0x093E, r24
     8c2:	90 93 3f 09 	sts	0x093F, r25
     8c6:	21 c0       	rjmp	.+66     	; 0x90a <motor_set+0x84>
    }
    else if (right < 0)
     8c8:	dd 23       	and	r29, r29
     8ca:	b4 f4       	brge	.+44     	; 0x8f8 <motor_set+0x72>
    {
        // PWM to AIN2, AIN1 high
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCDEN_bm);
     8cc:	60 e8       	ldi	r22, 0x80	; 128
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	99 e0       	ldi	r25, 0x09	; 9
     8d2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        TC0_EnableCCChannels(&MOTOR_TIMER,TC0_CCCEN_bm);
     8d6:	60 e4       	ldi	r22, 0x40	; 64
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	99 e0       	ldi	r25, 0x09	; 9
     8dc:	0e 94 ce 02 	call	0x59c	; 0x59c <TC0_EnableCCChannels>

        PORT_SetOutputBit(&MOTOR_PORT,AIN1);
     8e0:	e0 e6       	ldi	r30, 0x60	; 96
     8e2:	f6 e0       	ldi	r31, 0x06	; 6
     8e4:	84 81       	ldd	r24, Z+4	; 0x04
     8e6:	88 60       	ori	r24, 0x08	; 8
     8e8:	84 83       	std	Z+4, r24	; 0x04
        TC_SetCompareC (&MOTOR_TIMER,1001+right);
     8ea:	c7 51       	subi	r28, 0x17	; 23
     8ec:	dc 4f       	sbci	r29, 0xFC	; 252
     8ee:	e0 e0       	ldi	r30, 0x00	; 0
     8f0:	f9 e0       	ldi	r31, 0x09	; 9
     8f2:	c4 af       	std	Z+60, r28	; 0x3c
     8f4:	d5 af       	std	Z+61, r29	; 0x3d
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <motor_set+0x84>
    }
    else
    {
        // Pins LOW (coast)
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCCEN_bm|TC0_CCDEN_bm);
     8f8:	60 ec       	ldi	r22, 0xC0	; 192
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	99 e0       	ldi	r25, 0x09	; 9
     8fe:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        PORT_SetPins(&MOTOR_PORT,(1<<AIN1)|(1<<AIN2));
     902:	8c e0       	ldi	r24, 0x0C	; 12
     904:	e0 e6       	ldi	r30, 0x60	; 96
     906:	f6 e0       	ldi	r31, 0x06	; 6
     908:	85 83       	std	Z+5, r24	; 0x05
    }

    if(left > 0)
     90a:	10 16       	cp	r1, r16
     90c:	11 06       	cpc	r1, r17
     90e:	c4 f4       	brge	.+48     	; 0x940 <motor_set+0xba>
    {
        // PWM to BIN1, BIN2 low
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCBEN_bm);
     910:	60 e2       	ldi	r22, 0x20	; 32
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	99 e0       	ldi	r25, 0x09	; 9
     916:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        TC0_EnableCCChannels(&MOTOR_TIMER,TC0_CCAEN_bm);
     91a:	60 e1       	ldi	r22, 0x10	; 16
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	99 e0       	ldi	r25, 0x09	; 9
     920:	0e 94 ce 02 	call	0x59c	; 0x59c <TC0_EnableCCChannels>

        PORT_SetOutputBit(&MOTOR_PORT,BIN2);
     924:	e0 e6       	ldi	r30, 0x60	; 96
     926:	f6 e0       	ldi	r31, 0x06	; 6
     928:	84 81       	ldd	r24, Z+4	; 0x04
     92a:	82 60       	ori	r24, 0x02	; 2
     92c:	84 83       	std	Z+4, r24	; 0x04
        TC_SetCompareA (&MOTOR_TIMER,1001-left);
     92e:	89 ee       	ldi	r24, 0xE9	; 233
     930:	93 e0       	ldi	r25, 0x03	; 3
     932:	80 1b       	sub	r24, r16
     934:	91 0b       	sbc	r25, r17
     936:	e0 e0       	ldi	r30, 0x00	; 0
     938:	f9 e0       	ldi	r31, 0x09	; 9
     93a:	80 af       	std	Z+56, r24	; 0x38
     93c:	91 af       	std	Z+57, r25	; 0x39
     93e:	21 c0       	rjmp	.+66     	; 0x982 <motor_set+0xfc>
    }
    else if (left < 0)
     940:	11 23       	and	r17, r17
     942:	b4 f4       	brge	.+44     	; 0x970 <motor_set+0xea>
    {
        // PWM to BIN2, BIN1 low
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCAEN_bm);
     944:	60 e1       	ldi	r22, 0x10	; 16
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	99 e0       	ldi	r25, 0x09	; 9
     94a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        TC0_EnableCCChannels(&MOTOR_TIMER,TC0_CCBEN_bm);
     94e:	60 e2       	ldi	r22, 0x20	; 32
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	99 e0       	ldi	r25, 0x09	; 9
     954:	0e 94 ce 02 	call	0x59c	; 0x59c <TC0_EnableCCChannels>

        PORT_SetOutputBit(&MOTOR_PORT,BIN1);
     958:	e0 e6       	ldi	r30, 0x60	; 96
     95a:	f6 e0       	ldi	r31, 0x06	; 6
     95c:	84 81       	ldd	r24, Z+4	; 0x04
     95e:	81 60       	ori	r24, 0x01	; 1
     960:	84 83       	std	Z+4, r24	; 0x04
        TC_SetCompareB (&MOTOR_TIMER,1001+left);
     962:	07 51       	subi	r16, 0x17	; 23
     964:	1c 4f       	sbci	r17, 0xFC	; 252
     966:	e0 e0       	ldi	r30, 0x00	; 0
     968:	f9 e0       	ldi	r31, 0x09	; 9
     96a:	02 af       	std	Z+58, r16	; 0x3a
     96c:	13 af       	std	Z+59, r17	; 0x3b
     96e:	09 c0       	rjmp	.+18     	; 0x982 <motor_set+0xfc>
    }
    else
    {
        // Pins LOW (coast)
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCAEN_bm|TC0_CCBEN_bm);
     970:	60 e3       	ldi	r22, 0x30	; 48
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	99 e0       	ldi	r25, 0x09	; 9
     976:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        PORT_SetPins(&MOTOR_PORT,(1<<BIN1)|(1<<BIN2));
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	e0 e6       	ldi	r30, 0x60	; 96
     97e:	f6 e0       	ldi	r31, 0x06	; 6
     980:	85 83       	std	Z+5, r24	; 0x05
    }
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	08 95       	ret

0000098c <motors>:
    int diag_diff = get_left_diag() - get_right_diag();
    motors(400 + diag_diff, 400 - diag_diff);
}

void motors(int16_t l_speed, int16_t r_speed)
{
     98c:	89 3e       	cpi	r24, 0xE9	; 233
     98e:	23 e0       	ldi	r18, 0x03	; 3
     990:	92 07       	cpc	r25, r18
     992:	14 f0       	brlt	.+4      	; 0x998 <motors+0xc>
     994:	88 ee       	ldi	r24, 0xE8	; 232
     996:	93 e0       	ldi	r25, 0x03	; 3
     998:	88 31       	cpi	r24, 0x18	; 24
     99a:	4c ef       	ldi	r20, 0xFC	; 252
     99c:	94 07       	cpc	r25, r20
     99e:	14 f4       	brge	.+4      	; 0x9a4 <motors+0x18>
     9a0:	88 e1       	ldi	r24, 0x18	; 24
     9a2:	9c ef       	ldi	r25, 0xFC	; 252
     9a4:	26 2f       	mov	r18, r22
     9a6:	37 2f       	mov	r19, r23
     9a8:	29 3e       	cpi	r18, 0xE9	; 233
     9aa:	43 e0       	ldi	r20, 0x03	; 3
     9ac:	34 07       	cpc	r19, r20
     9ae:	14 f0       	brlt	.+4      	; 0x9b4 <motors+0x28>
     9b0:	28 ee       	ldi	r18, 0xE8	; 232
     9b2:	33 e0       	ldi	r19, 0x03	; 3
     9b4:	b9 01       	movw	r22, r18
     9b6:	68 31       	cpi	r22, 0x18	; 24
     9b8:	2c ef       	ldi	r18, 0xFC	; 252
     9ba:	72 07       	cpc	r23, r18
     9bc:	14 f4       	brge	.+4      	; 0x9c2 <motors+0x36>
     9be:	68 e1       	ldi	r22, 0x18	; 24
     9c0:	7c ef       	ldi	r23, 0xFC	; 252
    else if (r_speed > 1000)
    {
        r_speed = 1000;
    }
    // correct the slight curving to right
    if (l_speed != 0 && r_speed != 0)
     9c2:	00 97       	sbiw	r24, 0x00	; 0
     9c4:	39 f0       	breq	.+14     	; 0x9d4 <motors+0x48>
     9c6:	61 15       	cp	r22, r1
     9c8:	71 05       	cpc	r23, r1
     9ca:	21 f0       	breq	.+8      	; 0x9d4 <motors+0x48>
    {
        int16_t left = l_speed - 12;
        motor_set(left, r_speed);
     9cc:	0c 97       	sbiw	r24, 0x0c	; 12
     9ce:	0e 94 43 04 	call	0x886	; 0x886 <motor_set>
    {
        r_speed = 1000;
    }
    // correct the slight curving to right
    if (l_speed != 0 && r_speed != 0)
    {
     9d2:	08 95       	ret
        int16_t left = l_speed - 12;
        motor_set(left, r_speed);
    }
    else
    {
        motor_set(l_speed, r_speed);
     9d4:	0e 94 43 04 	call	0x886	; 0x886 <motor_set>
     9d8:	08 95       	ret

000009da <stop>:
    _delay_ms(675);
}

void stop()
{
    motor_set(0, 0);
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 43 04 	call	0x886	; 0x886 <motor_set>
     9e6:	08 95       	ret

000009e8 <delay_ms>:
    radio_puts(buff);
}

void delay_ms(uint16_t count)
{
    while (count--)
     9e8:	00 97       	sbiw	r24, 0x00	; 0
     9ea:	49 f0       	breq	.+18     	; 0x9fe <delay_ms+0x16>
     9ec:	ef e3       	ldi	r30, 0x3F	; 63
     9ee:	ff e1       	ldi	r31, 0x1F	; 31
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <delay_ms+0x8>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <delay_ms+0xe>
     9f6:	00 00       	nop
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	00 97       	sbiw	r24, 0x00	; 0
     9fc:	b9 f7       	brne	.-18     	; 0x9ec <delay_ms+0x4>
     9fe:	08 95       	ret

00000a00 <get_front_left>:
    }
}

uint16_t get_front_left()
{
    return adc_read(FRONT_LEFT_S);
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	0e 94 49 01 	call	0x292	; 0x292 <adc_read>
}
     a06:	08 95       	ret

00000a08 <get_front_right>:

uint16_t get_front_right()
{
    return adc_read(FRONT_RIGHT_S) + 4;
     a08:	83 e0       	ldi	r24, 0x03	; 3
     a0a:	0e 94 49 01 	call	0x292	; 0x292 <adc_read>
}
     a0e:	04 96       	adiw	r24, 0x04	; 4
     a10:	08 95       	ret

00000a12 <calibrate_front>:
{
    return get_front_left() > 180 && get_front_right() > 180;
}

void calibrate_front()
{
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
    motors(0, 0);
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 c6 04 	call	0x98c	; 0x98c <motors>
     a26:	8f e3       	ldi	r24, 0x3F	; 63
     a28:	9c e9       	ldi	r25, 0x9C	; 156
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <calibrate_front+0x18>
     a2e:	00 c0       	rjmp	.+0      	; 0xa30 <calibrate_front+0x1e>
     a30:	00 00       	nop
     a32:	c2 e3       	ldi	r28, 0x32	; 50
     a34:	d0 e0       	ldi	r29, 0x00	; 0
    _delay_ms(5);
    int count = 0;
    while(count < 50)
    {
        count += 1;
        uint16_t fl = get_front_left();
     a36:	0e 94 00 05 	call	0xa00	; 0xa00 <get_front_left>
     a3a:	8c 01       	movw	r16, r24
        uint16_t fr = get_front_right();
     a3c:	0e 94 04 05 	call	0xa08	; 0xa08 <get_front_right>
        int fd = fl - fr;
     a40:	98 01       	movw	r18, r16
     a42:	28 1b       	sub	r18, r24
     a44:	39 0b       	sbc	r19, r25
        int time = abs(fd);
     a46:	a9 01       	movw	r20, r18
     a48:	22 f4       	brpl	.+8      	; 0xa52 <calibrate_front+0x40>
     a4a:	44 27       	eor	r20, r20
     a4c:	55 27       	eor	r21, r21
     a4e:	42 1b       	sub	r20, r18
     a50:	53 0b       	sbc	r21, r19
     a52:	04 2f       	mov	r16, r20
     a54:	15 2f       	mov	r17, r21
        int speed = 400;
        if (fd > 5)
     a56:	26 30       	cpi	r18, 0x06	; 6
     a58:	31 05       	cpc	r19, r1
     a5a:	3c f0       	brlt	.+14     	; 0xa6a <calibrate_front+0x58>
        {
            motors(-speed, speed);
     a5c:	60 e9       	ldi	r22, 0x90	; 144
     a5e:	71 e0       	ldi	r23, 0x01	; 1
     a60:	80 e7       	ldi	r24, 0x70	; 112
     a62:	9e ef       	ldi	r25, 0xFE	; 254
     a64:	0e 94 c6 04 	call	0x98c	; 0x98c <motors>
     a68:	09 c0       	rjmp	.+18     	; 0xa7c <calibrate_front+0x6a>
        }
        else if (fd < -5)
     a6a:	2b 3f       	cpi	r18, 0xFB	; 251
     a6c:	3f 4f       	sbci	r19, 0xFF	; 255
     a6e:	34 f4       	brge	.+12     	; 0xa7c <calibrate_front+0x6a>
        {
            motors(speed, -speed);
     a70:	60 e7       	ldi	r22, 0x70	; 112
     a72:	7e ef       	ldi	r23, 0xFE	; 254
     a74:	80 e9       	ldi	r24, 0x90	; 144
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	0e 94 c6 04 	call	0x98c	; 0x98c <motors>
        }
        delay_ms(time);
     a7c:	80 2f       	mov	r24, r16
     a7e:	91 2f       	mov	r25, r17
     a80:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <delay_ms>
     a84:	21 97       	sbiw	r28, 0x01	; 1
void calibrate_front()
{
    motors(0, 0);
    _delay_ms(5);
    int count = 0;
    while(count < 50)
     a86:	20 97       	sbiw	r28, 0x00	; 0
     a88:	b1 f6       	brne	.-84     	; 0xa36 <calibrate_front+0x24>
        {
            motors(speed, -speed);
        }
        delay_ms(time);
    }
    motors(0, 0);
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 c6 04 	call	0x98c	; 0x98c <motors>
}
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	08 95       	ret

00000aa0 <go>:

void go()
{
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
    PORT_SetOutputValue(&LED_PORT,((colour & 7) << 1)|(1 & PORTB.OUT));
}

inline int sw1_read()
{
    return (((~PORT_GetPortValue(&SW_PORT) & SW1) >> 4));
     aa4:	e0 e6       	ldi	r30, 0x60	; 96
     aa6:	f6 e0       	ldi	r31, 0x06	; 6
     aa8:	80 85       	ldd	r24, Z+8	; 0x08
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	80 95       	com	r24
     aae:	90 95       	com	r25
    while(!sw1_read())
     ab0:	84 fd       	sbrc	r24, 4
     ab2:	13 c0       	rjmp	.+38     	; 0xada <go+0x3a>
     ab4:	c0 e6       	ldi	r28, 0x60	; 96
     ab6:	d6 e0       	ldi	r29, 0x06	; 6
    {
        calibrate_front();
     ab8:	0e 94 09 05 	call	0xa12	; 0xa12 <calibrate_front>
     abc:	2f ef       	ldi	r18, 0xFF	; 255
     abe:	87 ea       	ldi	r24, 0xA7	; 167
     ac0:	91 e6       	ldi	r25, 0x61	; 97
     ac2:	21 50       	subi	r18, 0x01	; 1
     ac4:	80 40       	sbci	r24, 0x00	; 0
     ac6:	90 40       	sbci	r25, 0x00	; 0
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <go+0x22>
     aca:	00 c0       	rjmp	.+0      	; 0xacc <go+0x2c>
     acc:	00 00       	nop
     ace:	88 85       	ldd	r24, Y+8	; 0x08
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	80 95       	com	r24
     ad4:	90 95       	com	r25
    motors(0, 0);
}

void go()
{
    while(!sw1_read())
     ad6:	84 ff       	sbrs	r24, 4
     ad8:	ef cf       	rjmp	.-34     	; 0xab8 <go+0x18>
}

// Set value for RGB LED
inline void rgb_set(RGB_colour colour)
{
    PORT_SetOutputValue(&LED_PORT,((colour & 7) << 1)|(1 & PORTB.OUT));
     ada:	e0 e2       	ldi	r30, 0x20	; 32
     adc:	f6 e0       	ldi	r31, 0x06	; 6
     ade:	84 81       	ldd	r24, Z+4	; 0x04
     ae0:	81 70       	andi	r24, 0x01	; 1
     ae2:	88 60       	ori	r24, 0x08	; 8
     ae4:	84 83       	std	Z+4, r24	; 0x04
        //straight();
        //_delay_ms(5);
        //}
    }
    rgb_set(BLUE);
    stop();
     ae6:	0e 94 ed 04 	call	0x9da	; 0x9da <stop>
     aea:	2f ef       	ldi	r18, 0xFF	; 255
     aec:	8b e4       	ldi	r24, 0x4B	; 75
     aee:	9d e1       	ldi	r25, 0x1D	; 29
     af0:	21 50       	subi	r18, 0x01	; 1
     af2:	80 40       	sbci	r24, 0x00	; 0
     af4:	90 40       	sbci	r25, 0x00	; 0
     af6:	e1 f7       	brne	.-8      	; 0xaf0 <go+0x50>
     af8:	00 c0       	rjmp	.+0      	; 0xafa <go+0x5a>
     afa:	00 00       	nop
     afc:	e0 e2       	ldi	r30, 0x20	; 32
     afe:	f6 e0       	ldi	r31, 0x06	; 6
     b00:	84 81       	ldd	r24, Z+4	; 0x04
     b02:	81 70       	andi	r24, 0x01	; 1
     b04:	84 60       	ori	r24, 0x04	; 4
     b06:	84 83       	std	Z+4, r24	; 0x04
    _delay_ms(300);
    rgb_set(GREEN);
}
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	08 95       	ret

00000b0e <get_left_diag>:
    return adc_read(FRONT_RIGHT_S) + 4;
}

uint16_t get_left_diag()
{
    return adc_read(LEFT_DIAG_S);
     b0e:	84 e0       	ldi	r24, 0x04	; 4
     b10:	0e 94 49 01 	call	0x292	; 0x292 <adc_read>
}
     b14:	08 95       	ret

00000b16 <get_right_diag>:

uint16_t get_right_diag()
{
    return adc_read(RIGHT_DIAG_S) + 3;
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	0e 94 49 01 	call	0x292	; 0x292 <adc_read>
}
     b1c:	03 96       	adiw	r24, 0x03	; 3
     b1e:	08 95       	ret

00000b20 <get_left>:

uint16_t get_left()
{
    return adc_read(LEFT_S) + 2;
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	0e 94 49 01 	call	0x292	; 0x292 <adc_read>
}
     b26:	02 96       	adiw	r24, 0x02	; 2
     b28:	08 95       	ret

00000b2a <get_right>:

uint16_t get_right()
{
    return adc_read(RIGHT_S);
     b2a:	85 e0       	ldi	r24, 0x05	; 5
     b2c:	0e 94 49 01 	call	0x292	; 0x292 <adc_read>
}
     b30:	08 95       	ret

00000b32 <send_debug_msg>:
{
    motor_set(0, 0);
}

void send_debug_msg(char * buff)
{
     b32:	8f 92       	push	r8
     b34:	9f 92       	push	r9
     b36:	af 92       	push	r10
     b38:	bf 92       	push	r11
     b3a:	cf 92       	push	r12
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	88 2e       	mov	r8, r24
     b4c:	99 2e       	mov	r9, r25
    uint16_t fl = get_front_left();
     b4e:	0e 94 00 05 	call	0xa00	; 0xa00 <get_front_left>
     b52:	ec 01       	movw	r28, r24
    uint16_t fr = get_front_right();
     b54:	0e 94 04 05 	call	0xa08	; 0xa08 <get_front_right>
     b58:	8c 01       	movw	r16, r24
    int fd = fl - fr;
    uint16_t l = get_left();
     b5a:	0e 94 90 05 	call	0xb20	; 0xb20 <get_left>
     b5e:	6c 01       	movw	r12, r24
    uint16_t r = get_right();
     b60:	0e 94 95 05 	call	0xb2a	; 0xb2a <get_right>
     b64:	5c 01       	movw	r10, r24
    int sd = l - r;
    uint16_t dl = get_left_diag();
     b66:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_left_diag>
     b6a:	7c 01       	movw	r14, r24
    uint16_t dr = get_right_diag();
     b6c:	0e 94 8b 05 	call	0xb16	; 0xb16 <get_right_diag>
     b70:	9c 01       	movw	r18, r24
    uint16_t fl = get_front_left();
    uint16_t fr = get_front_right();
    int fd = fl - fr;
    uint16_t l = get_left();
    uint16_t r = get_right();
    int sd = l - r;
     b72:	c6 01       	movw	r24, r12
     b74:	8a 19       	sub	r24, r10
     b76:	9b 09       	sbc	r25, r11
    uint16_t dl = get_left_diag();
    uint16_t dr = get_right_diag();
    int dd = dl - dr;
    sprintf(
     b78:	9f 93       	push	r25
     b7a:	8f 93       	push	r24
     b7c:	bf 92       	push	r11
     b7e:	af 92       	push	r10
     b80:	df 92       	push	r13
     b82:	cf 92       	push	r12
    uint16_t l = get_left();
    uint16_t r = get_right();
    int sd = l - r;
    uint16_t dl = get_left_diag();
    uint16_t dr = get_right_diag();
    int dd = dl - dr;
     b84:	c7 01       	movw	r24, r14
     b86:	82 1b       	sub	r24, r18
     b88:	93 0b       	sbc	r25, r19
    sprintf(
     b8a:	9f 93       	push	r25
     b8c:	8f 93       	push	r24
     b8e:	3f 93       	push	r19
     b90:	2f 93       	push	r18
     b92:	ff 92       	push	r15
     b94:	ef 92       	push	r14

void send_debug_msg(char * buff)
{
    uint16_t fl = get_front_left();
    uint16_t fr = get_front_right();
    int fd = fl - fr;
     b96:	9e 01       	movw	r18, r28
     b98:	20 1b       	sub	r18, r16
     b9a:	31 0b       	sbc	r19, r17
    uint16_t r = get_right();
    int sd = l - r;
    uint16_t dl = get_left_diag();
    uint16_t dr = get_right_diag();
    int dd = dl - dr;
    sprintf(
     b9c:	3f 93       	push	r19
     b9e:	2f 93       	push	r18
     ba0:	1f 93       	push	r17
     ba2:	0f 93       	push	r16
     ba4:	df 93       	push	r29
     ba6:	cf 93       	push	r28
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e2       	ldi	r19, 0x20	; 32
     bac:	3f 93       	push	r19
     bae:	2f 93       	push	r18
     bb0:	9f 92       	push	r9
     bb2:	8f 92       	push	r8
     bb4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <sprintf>
        buff, "%3u,%3u,%4d, %3u,%3u,%4d, %3u,%3u,%4d \n\r",
        fl, fr, fd, dl, dr, dd, l, r, sd);
    radio_puts(buff);
     bb8:	88 2d       	mov	r24, r8
     bba:	99 2d       	mov	r25, r9
     bbc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <radio_puts>
     bc0:	8d b7       	in	r24, 0x3d	; 61
     bc2:	9e b7       	in	r25, 0x3e	; 62
     bc4:	46 96       	adiw	r24, 0x16	; 22
     bc6:	8d bf       	out	0x3d, r24	; 61
     bc8:	9e bf       	out	0x3e, r25	; 62
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	ff 90       	pop	r15
     bd4:	ef 90       	pop	r14
     bd6:	df 90       	pop	r13
     bd8:	cf 90       	pop	r12
     bda:	bf 90       	pop	r11
     bdc:	af 90       	pop	r10
     bde:	9f 90       	pop	r9
     be0:	8f 90       	pop	r8
     be2:	08 95       	ret

00000be4 <main>:
#define LEFT 2
#define RANDOM 0


int main(void)
{
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	c4 56       	subi	r28, 0x64	; 100
     bee:	d1 09       	sbc	r29, r1
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	de bf       	out	0x3e, r29	; 62
{
    /*  Enable internal 32 MHz ring oscillator and wait until it's
    	 *  stable. Divide clock by two with the prescaler C and set the
    	 *  32 MHz ring oscillator as the main clock source.
    	 */
    CLKSYS_Enable( OSC_RC32MEN_bm );
     bf4:	e0 e5       	ldi	r30, 0x50	; 80
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	82 60       	ori	r24, 0x02	; 2
     bfc:	80 83       	st	Z, r24
    CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	0e 94 a9 02 	call	0x552	; 0x552 <CLKSYS_Prescalers_Config>
    do {}
    while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
     c06:	e0 e5       	ldi	r30, 0x50	; 80
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	81 81       	ldd	r24, Z+1	; 0x01
     c0c:	81 ff       	sbrs	r24, 1
     c0e:	fd cf       	rjmp	.-6      	; 0xc0a <main+0x26>
    CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	0e 94 af 02 	call	0x55e	; 0x55e <CLKSYS_Main_ClockSource_Select>
extern volatile uint32_t systick;

// Initialize board LEDs, switches and systick timer
inline void board_init()
{
    PORT_SetPinsAsOutput(&PORTB,0x0E);	// Set PORTB LED pins as output
     c16:	8e e0       	ldi	r24, 0x0E	; 14
     c18:	e0 e2       	ldi	r30, 0x20	; 32
     c1a:	f6 e0       	ldi	r31, 0x06	; 6
     c1c:	81 83       	std	Z+1, r24	; 0x01
    PORT_SetPinsAsInput(&PORTD,0x30);	// Set PORTD Button pins as input
     c1e:	80 e3       	ldi	r24, 0x30	; 48
     c20:	e0 e6       	ldi	r30, 0x60	; 96
     c22:	f6 e0       	ldi	r31, 0x06	; 6
     c24:	82 83       	std	Z+2, r24	; 0x02

    // Configure Systick timer 1kHz freq
    TC_SetPeriod(&SYSTICK_TIMER,32000);
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	9d e7       	ldi	r25, 0x7D	; 125
     c2a:	e0 e0       	ldi	r30, 0x00	; 0
     c2c:	fa e0       	ldi	r31, 0x0A	; 10
     c2e:	86 a3       	std	Z+38, r24	; 0x26
     c30:	97 a3       	std	Z+39, r25	; 0x27
    TC0_ConfigWGM(&SYSTICK_TIMER,TC_WGMODE_NORMAL_gc);
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	9a e0       	ldi	r25, 0x0A	; 10
     c38:	0e 94 c8 02 	call	0x590	; 0x590 <TC0_ConfigWGM>
    TC0_SetOverflowIntLevel(&SYSTICK_TIMER,TC_OVFINTLVL_MED_gc);
     c3c:	62 e0       	ldi	r22, 0x02	; 2
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	9a e0       	ldi	r25, 0x0A	; 10
     c42:	0e 94 db 02 	call	0x5b6	; 0x5b6 <TC0_SetOverflowIntLevel>
    TC0_ConfigClockSource(&SYSTICK_TIMER,TC_CLKSEL_DIV1_gc);
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	9a e0       	ldi	r25, 0x0A	; 10
     c4c:	0e 94 c2 02 	call	0x584	; 0x584 <TC0_ConfigClockSource>

    // Enable PMIC interrupt levels and interrupts globally
    PMIC.CTRL |= PMIC_LOLVLEX_bm|PMIC_MEDLVLEX_bm|PMIC_HILVLEX_bm;
     c50:	e0 ea       	ldi	r30, 0xA0	; 160
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	82 81       	ldd	r24, Z+2	; 0x02
     c56:	87 60       	ori	r24, 0x07	; 7
     c58:	82 83       	std	Z+2, r24	; 0x02
    sei();
     c5a:	78 94       	sei
    clock_init();        // Seadista systeemi kell 32MHz peale
    board_init();        // Seadista LED ja nupud
    adc_init();            // Seadista ADC kanal 0
     c5c:	0e 94 1d 01 	call	0x23a	; 0x23a <adc_init>
    radio_init(57600);    // Seadista raadiomooduli UART
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	71 ee       	ldi	r23, 0xE1	; 225
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 81 01 	call	0x302	; 0x302 <radio_init>
    motor_init();        // Seadista mootorikontroller
     c6c:	0e 94 0d 04 	call	0x81a	; 0x81a <motor_init>
}

// Set value for RGB LED
inline void rgb_set(RGB_colour colour)
{
    PORT_SetOutputValue(&LED_PORT,((colour & 7) << 1)|(1 & PORTB.OUT));
     c70:	e0 e2       	ldi	r30, 0x20	; 32
     c72:	f6 e0       	ldi	r31, 0x06	; 6
     c74:	84 81       	ldd	r24, Z+4	; 0x04
     c76:	81 70       	andi	r24, 0x01	; 1
     c78:	88 60       	ori	r24, 0x08	; 8
     c7a:	84 83       	std	Z+4, r24	; 0x04
    return (((~PORT_GetPortValue(&SW_PORT) & SW1) >> 4));
}

inline int sw2_read()
{
    return (((~PORT_GetPortValue(&SW_PORT) & SW2) >> 5));
     c7c:	00 e6       	ldi	r16, 0x60	; 96
     c7e:	16 e0       	ldi	r17, 0x06	; 6
}

// Set value for RGB LED
inline void rgb_set(RGB_colour colour)
{
    PORT_SetOutputValue(&LED_PORT,((colour & 7) << 1)|(1 & PORTB.OUT));
     c80:	0f 2e       	mov	r0, r31
     c82:	f0 e2       	ldi	r31, 0x20	; 32
     c84:	ef 2e       	mov	r14, r31
     c86:	f6 e0       	ldi	r31, 0x06	; 6
     c88:	ff 2e       	mov	r15, r31
     c8a:	f0 2d       	mov	r31, r0
    return (((~PORT_GetPortValue(&SW_PORT) & SW1) >> 4));
}

inline int sw2_read()
{
    return (((~PORT_GetPortValue(&SW_PORT) & SW2) >> 5));
     c8c:	f8 01       	movw	r30, r16
     c8e:	80 85       	ldd	r24, Z+8	; 0x08
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	80 95       	com	r24
     c94:	90 95       	com	r25
    char buff[100];
    rgb_set(BLUE);
    while(1)
    {
        if(sw2_read())
     c96:	85 ff       	sbrs	r24, 5
     c98:	10 c0       	rjmp	.+32     	; 0xcba <main+0xd6>
}

// Set value for RGB LED
inline void rgb_set(RGB_colour colour)
{
    PORT_SetOutputValue(&LED_PORT,((colour & 7) << 1)|(1 & PORTB.OUT));
     c9a:	f7 01       	movw	r30, r14
     c9c:	84 81       	ldd	r24, Z+4	; 0x04
     c9e:	81 70       	andi	r24, 0x01	; 1
     ca0:	82 60       	ori	r24, 0x02	; 2
     ca2:	84 83       	std	Z+4, r24	; 0x04
     ca4:	ff ef       	ldi	r31, 0xFF	; 255
     ca6:	27 ea       	ldi	r18, 0xA7	; 167
     ca8:	81 e6       	ldi	r24, 0x61	; 97
     caa:	f1 50       	subi	r31, 0x01	; 1
     cac:	20 40       	sbci	r18, 0x00	; 0
     cae:	80 40       	sbci	r24, 0x00	; 0
     cb0:	e1 f7       	brne	.-8      	; 0xcaa <main+0xc6>
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <main+0xd0>
     cb4:	00 00       	nop
        {
            rgb_set(RED);
            _delay_ms(1000);
            go();
     cb6:	0e 94 50 05 	call	0xaa0	; 0xaa0 <go>
     cba:	9f ef       	ldi	r25, 0xFF	; 255
     cbc:	e3 ed       	ldi	r30, 0xD3	; 211
     cbe:	f0 e3       	ldi	r31, 0x30	; 48
     cc0:	91 50       	subi	r25, 0x01	; 1
     cc2:	e0 40       	sbci	r30, 0x00	; 0
     cc4:	f0 40       	sbci	r31, 0x00	; 0
     cc6:	e1 f7       	brne	.-8      	; 0xcc0 <main+0xdc>
     cc8:	00 c0       	rjmp	.+0      	; 0xcca <main+0xe6>
     cca:	00 00       	nop
        }
        _delay_ms(500);
        send_debug_msg(buff);
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	0e 94 99 05 	call	0xb32	; 0xb32 <send_debug_msg>
    }
     cd4:	db cf       	rjmp	.-74     	; 0xc8c <main+0xa8>

00000cd6 <__udivmodsi4>:
     cd6:	a1 e2       	ldi	r26, 0x21	; 33
     cd8:	1a 2e       	mov	r1, r26
     cda:	aa 1b       	sub	r26, r26
     cdc:	bb 1b       	sub	r27, r27
     cde:	fd 01       	movw	r30, r26
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__udivmodsi4_ep>

00000ce2 <__udivmodsi4_loop>:
     ce2:	aa 1f       	adc	r26, r26
     ce4:	bb 1f       	adc	r27, r27
     ce6:	ee 1f       	adc	r30, r30
     ce8:	ff 1f       	adc	r31, r31
     cea:	a2 17       	cp	r26, r18
     cec:	b3 07       	cpc	r27, r19
     cee:	e4 07       	cpc	r30, r20
     cf0:	f5 07       	cpc	r31, r21
     cf2:	20 f0       	brcs	.+8      	; 0xcfc <__udivmodsi4_ep>
     cf4:	a2 1b       	sub	r26, r18
     cf6:	b3 0b       	sbc	r27, r19
     cf8:	e4 0b       	sbc	r30, r20
     cfa:	f5 0b       	sbc	r31, r21

00000cfc <__udivmodsi4_ep>:
     cfc:	66 1f       	adc	r22, r22
     cfe:	77 1f       	adc	r23, r23
     d00:	88 1f       	adc	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	1a 94       	dec	r1
     d06:	69 f7       	brne	.-38     	; 0xce2 <__udivmodsi4_loop>
     d08:	60 95       	com	r22
     d0a:	70 95       	com	r23
     d0c:	80 95       	com	r24
     d0e:	90 95       	com	r25
     d10:	9b 01       	movw	r18, r22
     d12:	ac 01       	movw	r20, r24
     d14:	bd 01       	movw	r22, r26
     d16:	cf 01       	movw	r24, r30
     d18:	08 95       	ret

00000d1a <sprintf>:
     d1a:	ae e0       	ldi	r26, 0x0E	; 14
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e3 e9       	ldi	r30, 0x93	; 147
     d20:	f6 e0       	ldi	r31, 0x06	; 6
     d22:	0c 94 35 09 	jmp	0x126a	; 0x126a <__prologue_saves__+0x1c>
     d26:	0d 89       	ldd	r16, Y+21	; 0x15
     d28:	1e 89       	ldd	r17, Y+22	; 0x16
     d2a:	86 e0       	ldi	r24, 0x06	; 6
     d2c:	8c 83       	std	Y+4, r24	; 0x04
     d2e:	09 83       	std	Y+1, r16	; 0x01
     d30:	1a 83       	std	Y+2, r17	; 0x02
     d32:	8f ef       	ldi	r24, 0xFF	; 255
     d34:	9f e7       	ldi	r25, 0x7F	; 127
     d36:	8d 83       	std	Y+5, r24	; 0x05
     d38:	9e 83       	std	Y+6, r25	; 0x06
     d3a:	ae 01       	movw	r20, r28
     d3c:	47 5e       	subi	r20, 0xE7	; 231
     d3e:	5f 4f       	sbci	r21, 0xFF	; 255
     d40:	6f 89       	ldd	r22, Y+23	; 0x17
     d42:	78 8d       	ldd	r23, Y+24	; 0x18
     d44:	ce 01       	movw	r24, r28
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	0e 94 af 06 	call	0xd5e	; 0xd5e <vfprintf>
     d4c:	ef 81       	ldd	r30, Y+7	; 0x07
     d4e:	f8 85       	ldd	r31, Y+8	; 0x08
     d50:	e0 0f       	add	r30, r16
     d52:	f1 1f       	adc	r31, r17
     d54:	10 82       	st	Z, r1
     d56:	2e 96       	adiw	r28, 0x0e	; 14
     d58:	e4 e0       	ldi	r30, 0x04	; 4
     d5a:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__epilogue_restores__+0x1c>

00000d5e <vfprintf>:
     d5e:	ac e0       	ldi	r26, 0x0C	; 12
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e5 eb       	ldi	r30, 0xB5	; 181
     d64:	f6 e0       	ldi	r31, 0x06	; 6
     d66:	0c 94 27 09 	jmp	0x124e	; 0x124e <__prologue_saves__>
     d6a:	7c 01       	movw	r14, r24
     d6c:	6b 01       	movw	r12, r22
     d6e:	8a 01       	movw	r16, r20
     d70:	fc 01       	movw	r30, r24
     d72:	16 82       	std	Z+6, r1	; 0x06
     d74:	17 82       	std	Z+7, r1	; 0x07
     d76:	83 81       	ldd	r24, Z+3	; 0x03
     d78:	81 ff       	sbrs	r24, 1
     d7a:	bd c1       	rjmp	.+890    	; 0x10f6 <vfprintf+0x398>
     d7c:	ce 01       	movw	r24, r28
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	4c 01       	movw	r8, r24
     d82:	f7 01       	movw	r30, r14
     d84:	93 81       	ldd	r25, Z+3	; 0x03
     d86:	f6 01       	movw	r30, r12
     d88:	93 fd       	sbrc	r25, 3
     d8a:	85 91       	lpm	r24, Z+
     d8c:	93 ff       	sbrs	r25, 3
     d8e:	81 91       	ld	r24, Z+
     d90:	6f 01       	movw	r12, r30
     d92:	88 23       	and	r24, r24
     d94:	09 f4       	brne	.+2      	; 0xd98 <vfprintf+0x3a>
     d96:	ab c1       	rjmp	.+854    	; 0x10ee <vfprintf+0x390>
     d98:	85 32       	cpi	r24, 0x25	; 37
     d9a:	39 f4       	brne	.+14     	; 0xdaa <vfprintf+0x4c>
     d9c:	93 fd       	sbrc	r25, 3
     d9e:	85 91       	lpm	r24, Z+
     da0:	93 ff       	sbrs	r25, 3
     da2:	81 91       	ld	r24, Z+
     da4:	6f 01       	movw	r12, r30
     da6:	85 32       	cpi	r24, 0x25	; 37
     da8:	29 f4       	brne	.+10     	; 0xdb4 <vfprintf+0x56>
     daa:	b7 01       	movw	r22, r14
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 97 08 	call	0x112e	; 0x112e <fputc>
     db2:	e7 cf       	rjmp	.-50     	; 0xd82 <vfprintf+0x24>
     db4:	51 2c       	mov	r5, r1
     db6:	31 2c       	mov	r3, r1
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	20 32       	cpi	r18, 0x20	; 32
     dbc:	a0 f4       	brcc	.+40     	; 0xde6 <vfprintf+0x88>
     dbe:	8b 32       	cpi	r24, 0x2B	; 43
     dc0:	69 f0       	breq	.+26     	; 0xddc <vfprintf+0x7e>
     dc2:	30 f4       	brcc	.+12     	; 0xdd0 <vfprintf+0x72>
     dc4:	80 32       	cpi	r24, 0x20	; 32
     dc6:	59 f0       	breq	.+22     	; 0xdde <vfprintf+0x80>
     dc8:	83 32       	cpi	r24, 0x23	; 35
     dca:	69 f4       	brne	.+26     	; 0xde6 <vfprintf+0x88>
     dcc:	20 61       	ori	r18, 0x10	; 16
     dce:	2c c0       	rjmp	.+88     	; 0xe28 <vfprintf+0xca>
     dd0:	8d 32       	cpi	r24, 0x2D	; 45
     dd2:	39 f0       	breq	.+14     	; 0xde2 <vfprintf+0x84>
     dd4:	80 33       	cpi	r24, 0x30	; 48
     dd6:	39 f4       	brne	.+14     	; 0xde6 <vfprintf+0x88>
     dd8:	21 60       	ori	r18, 0x01	; 1
     dda:	26 c0       	rjmp	.+76     	; 0xe28 <vfprintf+0xca>
     ddc:	22 60       	ori	r18, 0x02	; 2
     dde:	24 60       	ori	r18, 0x04	; 4
     de0:	23 c0       	rjmp	.+70     	; 0xe28 <vfprintf+0xca>
     de2:	28 60       	ori	r18, 0x08	; 8
     de4:	21 c0       	rjmp	.+66     	; 0xe28 <vfprintf+0xca>
     de6:	27 fd       	sbrc	r18, 7
     de8:	27 c0       	rjmp	.+78     	; 0xe38 <vfprintf+0xda>
     dea:	30 ed       	ldi	r19, 0xD0	; 208
     dec:	38 0f       	add	r19, r24
     dee:	3a 30       	cpi	r19, 0x0A	; 10
     df0:	78 f4       	brcc	.+30     	; 0xe10 <vfprintf+0xb2>
     df2:	26 ff       	sbrs	r18, 6
     df4:	06 c0       	rjmp	.+12     	; 0xe02 <vfprintf+0xa4>
     df6:	fa e0       	ldi	r31, 0x0A	; 10
     df8:	5f 9e       	mul	r5, r31
     dfa:	30 0d       	add	r19, r0
     dfc:	11 24       	eor	r1, r1
     dfe:	53 2e       	mov	r5, r19
     e00:	13 c0       	rjmp	.+38     	; 0xe28 <vfprintf+0xca>
     e02:	8a e0       	ldi	r24, 0x0A	; 10
     e04:	38 9e       	mul	r3, r24
     e06:	30 0d       	add	r19, r0
     e08:	11 24       	eor	r1, r1
     e0a:	33 2e       	mov	r3, r19
     e0c:	20 62       	ori	r18, 0x20	; 32
     e0e:	0c c0       	rjmp	.+24     	; 0xe28 <vfprintf+0xca>
     e10:	8e 32       	cpi	r24, 0x2E	; 46
     e12:	21 f4       	brne	.+8      	; 0xe1c <vfprintf+0xbe>
     e14:	26 fd       	sbrc	r18, 6
     e16:	6b c1       	rjmp	.+726    	; 0x10ee <vfprintf+0x390>
     e18:	20 64       	ori	r18, 0x40	; 64
     e1a:	06 c0       	rjmp	.+12     	; 0xe28 <vfprintf+0xca>
     e1c:	8c 36       	cpi	r24, 0x6C	; 108
     e1e:	11 f4       	brne	.+4      	; 0xe24 <vfprintf+0xc6>
     e20:	20 68       	ori	r18, 0x80	; 128
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <vfprintf+0xca>
     e24:	88 36       	cpi	r24, 0x68	; 104
     e26:	41 f4       	brne	.+16     	; 0xe38 <vfprintf+0xda>
     e28:	f6 01       	movw	r30, r12
     e2a:	93 fd       	sbrc	r25, 3
     e2c:	85 91       	lpm	r24, Z+
     e2e:	93 ff       	sbrs	r25, 3
     e30:	81 91       	ld	r24, Z+
     e32:	6f 01       	movw	r12, r30
     e34:	81 11       	cpse	r24, r1
     e36:	c1 cf       	rjmp	.-126    	; 0xdba <vfprintf+0x5c>
     e38:	98 2f       	mov	r25, r24
     e3a:	9f 7d       	andi	r25, 0xDF	; 223
     e3c:	95 54       	subi	r25, 0x45	; 69
     e3e:	93 30       	cpi	r25, 0x03	; 3
     e40:	28 f4       	brcc	.+10     	; 0xe4c <vfprintf+0xee>
     e42:	0c 5f       	subi	r16, 0xFC	; 252
     e44:	1f 4f       	sbci	r17, 0xFF	; 255
     e46:	ff e3       	ldi	r31, 0x3F	; 63
     e48:	f9 83       	std	Y+1, r31	; 0x01
     e4a:	0d c0       	rjmp	.+26     	; 0xe66 <vfprintf+0x108>
     e4c:	83 36       	cpi	r24, 0x63	; 99
     e4e:	31 f0       	breq	.+12     	; 0xe5c <vfprintf+0xfe>
     e50:	83 37       	cpi	r24, 0x73	; 115
     e52:	71 f0       	breq	.+28     	; 0xe70 <vfprintf+0x112>
     e54:	83 35       	cpi	r24, 0x53	; 83
     e56:	09 f0       	breq	.+2      	; 0xe5a <vfprintf+0xfc>
     e58:	5b c0       	rjmp	.+182    	; 0xf10 <vfprintf+0x1b2>
     e5a:	22 c0       	rjmp	.+68     	; 0xea0 <vfprintf+0x142>
     e5c:	f8 01       	movw	r30, r16
     e5e:	80 81       	ld	r24, Z
     e60:	89 83       	std	Y+1, r24	; 0x01
     e62:	0e 5f       	subi	r16, 0xFE	; 254
     e64:	1f 4f       	sbci	r17, 0xFF	; 255
     e66:	44 24       	eor	r4, r4
     e68:	43 94       	inc	r4
     e6a:	51 2c       	mov	r5, r1
     e6c:	54 01       	movw	r10, r8
     e6e:	15 c0       	rjmp	.+42     	; 0xe9a <vfprintf+0x13c>
     e70:	38 01       	movw	r6, r16
     e72:	f2 e0       	ldi	r31, 0x02	; 2
     e74:	6f 0e       	add	r6, r31
     e76:	71 1c       	adc	r7, r1
     e78:	f8 01       	movw	r30, r16
     e7a:	a0 80       	ld	r10, Z
     e7c:	b1 80       	ldd	r11, Z+1	; 0x01
     e7e:	26 ff       	sbrs	r18, 6
     e80:	03 c0       	rjmp	.+6      	; 0xe88 <vfprintf+0x12a>
     e82:	65 2d       	mov	r22, r5
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <vfprintf+0x12e>
     e88:	6f ef       	ldi	r22, 0xFF	; 255
     e8a:	7f ef       	ldi	r23, 0xFF	; 255
     e8c:	c5 01       	movw	r24, r10
     e8e:	2c 87       	std	Y+12, r18	; 0x0c
     e90:	0e 94 8c 08 	call	0x1118	; 0x1118 <strnlen>
     e94:	2c 01       	movw	r4, r24
     e96:	83 01       	movw	r16, r6
     e98:	2c 85       	ldd	r18, Y+12	; 0x0c
     e9a:	2f 77       	andi	r18, 0x7F	; 127
     e9c:	22 2e       	mov	r2, r18
     e9e:	17 c0       	rjmp	.+46     	; 0xece <vfprintf+0x170>
     ea0:	38 01       	movw	r6, r16
     ea2:	f2 e0       	ldi	r31, 0x02	; 2
     ea4:	6f 0e       	add	r6, r31
     ea6:	71 1c       	adc	r7, r1
     ea8:	f8 01       	movw	r30, r16
     eaa:	a0 80       	ld	r10, Z
     eac:	b1 80       	ldd	r11, Z+1	; 0x01
     eae:	26 ff       	sbrs	r18, 6
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <vfprintf+0x15a>
     eb2:	65 2d       	mov	r22, r5
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <vfprintf+0x15e>
     eb8:	6f ef       	ldi	r22, 0xFF	; 255
     eba:	7f ef       	ldi	r23, 0xFF	; 255
     ebc:	c5 01       	movw	r24, r10
     ebe:	2c 87       	std	Y+12, r18	; 0x0c
     ec0:	0e 94 81 08 	call	0x1102	; 0x1102 <strnlen_P>
     ec4:	2c 01       	movw	r4, r24
     ec6:	2c 85       	ldd	r18, Y+12	; 0x0c
     ec8:	20 68       	ori	r18, 0x80	; 128
     eca:	22 2e       	mov	r2, r18
     ecc:	83 01       	movw	r16, r6
     ece:	23 fc       	sbrc	r2, 3
     ed0:	1b c0       	rjmp	.+54     	; 0xf08 <vfprintf+0x1aa>
     ed2:	83 2d       	mov	r24, r3
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	48 16       	cp	r4, r24
     ed8:	59 06       	cpc	r5, r25
     eda:	b0 f4       	brcc	.+44     	; 0xf08 <vfprintf+0x1aa>
     edc:	b7 01       	movw	r22, r14
     ede:	80 e2       	ldi	r24, 0x20	; 32
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 97 08 	call	0x112e	; 0x112e <fputc>
     ee6:	3a 94       	dec	r3
     ee8:	f4 cf       	rjmp	.-24     	; 0xed2 <vfprintf+0x174>
     eea:	f5 01       	movw	r30, r10
     eec:	27 fc       	sbrc	r2, 7
     eee:	85 91       	lpm	r24, Z+
     ef0:	27 fe       	sbrs	r2, 7
     ef2:	81 91       	ld	r24, Z+
     ef4:	5f 01       	movw	r10, r30
     ef6:	b7 01       	movw	r22, r14
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 97 08 	call	0x112e	; 0x112e <fputc>
     efe:	31 10       	cpse	r3, r1
     f00:	3a 94       	dec	r3
     f02:	f1 e0       	ldi	r31, 0x01	; 1
     f04:	4f 1a       	sub	r4, r31
     f06:	51 08       	sbc	r5, r1
     f08:	41 14       	cp	r4, r1
     f0a:	51 04       	cpc	r5, r1
     f0c:	71 f7       	brne	.-36     	; 0xeea <vfprintf+0x18c>
     f0e:	e5 c0       	rjmp	.+458    	; 0x10da <vfprintf+0x37c>
     f10:	84 36       	cpi	r24, 0x64	; 100
     f12:	11 f0       	breq	.+4      	; 0xf18 <vfprintf+0x1ba>
     f14:	89 36       	cpi	r24, 0x69	; 105
     f16:	39 f5       	brne	.+78     	; 0xf66 <vfprintf+0x208>
     f18:	f8 01       	movw	r30, r16
     f1a:	27 ff       	sbrs	r18, 7
     f1c:	07 c0       	rjmp	.+14     	; 0xf2c <vfprintf+0x1ce>
     f1e:	60 81       	ld	r22, Z
     f20:	71 81       	ldd	r23, Z+1	; 0x01
     f22:	82 81       	ldd	r24, Z+2	; 0x02
     f24:	93 81       	ldd	r25, Z+3	; 0x03
     f26:	0c 5f       	subi	r16, 0xFC	; 252
     f28:	1f 4f       	sbci	r17, 0xFF	; 255
     f2a:	08 c0       	rjmp	.+16     	; 0xf3c <vfprintf+0x1de>
     f2c:	60 81       	ld	r22, Z
     f2e:	71 81       	ldd	r23, Z+1	; 0x01
     f30:	88 27       	eor	r24, r24
     f32:	77 fd       	sbrc	r23, 7
     f34:	80 95       	com	r24
     f36:	98 2f       	mov	r25, r24
     f38:	0e 5f       	subi	r16, 0xFE	; 254
     f3a:	1f 4f       	sbci	r17, 0xFF	; 255
     f3c:	2f 76       	andi	r18, 0x6F	; 111
     f3e:	b2 2e       	mov	r11, r18
     f40:	97 ff       	sbrs	r25, 7
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <vfprintf+0x1f8>
     f44:	90 95       	com	r25
     f46:	80 95       	com	r24
     f48:	70 95       	com	r23
     f4a:	61 95       	neg	r22
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	8f 4f       	sbci	r24, 0xFF	; 255
     f50:	9f 4f       	sbci	r25, 0xFF	; 255
     f52:	20 68       	ori	r18, 0x80	; 128
     f54:	b2 2e       	mov	r11, r18
     f56:	2a e0       	ldi	r18, 0x0A	; 10
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	a4 01       	movw	r20, r8
     f5c:	0e 94 c9 08 	call	0x1192	; 0x1192 <__ultoa_invert>
     f60:	a8 2e       	mov	r10, r24
     f62:	a8 18       	sub	r10, r8
     f64:	44 c0       	rjmp	.+136    	; 0xfee <vfprintf+0x290>
     f66:	85 37       	cpi	r24, 0x75	; 117
     f68:	29 f4       	brne	.+10     	; 0xf74 <vfprintf+0x216>
     f6a:	2f 7e       	andi	r18, 0xEF	; 239
     f6c:	b2 2e       	mov	r11, r18
     f6e:	2a e0       	ldi	r18, 0x0A	; 10
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	25 c0       	rjmp	.+74     	; 0xfbe <vfprintf+0x260>
     f74:	f2 2f       	mov	r31, r18
     f76:	f9 7f       	andi	r31, 0xF9	; 249
     f78:	bf 2e       	mov	r11, r31
     f7a:	8f 36       	cpi	r24, 0x6F	; 111
     f7c:	c1 f0       	breq	.+48     	; 0xfae <vfprintf+0x250>
     f7e:	18 f4       	brcc	.+6      	; 0xf86 <vfprintf+0x228>
     f80:	88 35       	cpi	r24, 0x58	; 88
     f82:	79 f0       	breq	.+30     	; 0xfa2 <vfprintf+0x244>
     f84:	b4 c0       	rjmp	.+360    	; 0x10ee <vfprintf+0x390>
     f86:	80 37       	cpi	r24, 0x70	; 112
     f88:	19 f0       	breq	.+6      	; 0xf90 <vfprintf+0x232>
     f8a:	88 37       	cpi	r24, 0x78	; 120
     f8c:	21 f0       	breq	.+8      	; 0xf96 <vfprintf+0x238>
     f8e:	af c0       	rjmp	.+350    	; 0x10ee <vfprintf+0x390>
     f90:	2f 2f       	mov	r18, r31
     f92:	20 61       	ori	r18, 0x10	; 16
     f94:	b2 2e       	mov	r11, r18
     f96:	b4 fe       	sbrs	r11, 4
     f98:	0d c0       	rjmp	.+26     	; 0xfb4 <vfprintf+0x256>
     f9a:	8b 2d       	mov	r24, r11
     f9c:	84 60       	ori	r24, 0x04	; 4
     f9e:	b8 2e       	mov	r11, r24
     fa0:	09 c0       	rjmp	.+18     	; 0xfb4 <vfprintf+0x256>
     fa2:	24 ff       	sbrs	r18, 4
     fa4:	0a c0       	rjmp	.+20     	; 0xfba <vfprintf+0x25c>
     fa6:	9f 2f       	mov	r25, r31
     fa8:	96 60       	ori	r25, 0x06	; 6
     faa:	b9 2e       	mov	r11, r25
     fac:	06 c0       	rjmp	.+12     	; 0xfba <vfprintf+0x25c>
     fae:	28 e0       	ldi	r18, 0x08	; 8
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	05 c0       	rjmp	.+10     	; 0xfbe <vfprintf+0x260>
     fb4:	20 e1       	ldi	r18, 0x10	; 16
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <vfprintf+0x260>
     fba:	20 e1       	ldi	r18, 0x10	; 16
     fbc:	32 e0       	ldi	r19, 0x02	; 2
     fbe:	f8 01       	movw	r30, r16
     fc0:	b7 fe       	sbrs	r11, 7
     fc2:	07 c0       	rjmp	.+14     	; 0xfd2 <vfprintf+0x274>
     fc4:	60 81       	ld	r22, Z
     fc6:	71 81       	ldd	r23, Z+1	; 0x01
     fc8:	82 81       	ldd	r24, Z+2	; 0x02
     fca:	93 81       	ldd	r25, Z+3	; 0x03
     fcc:	0c 5f       	subi	r16, 0xFC	; 252
     fce:	1f 4f       	sbci	r17, 0xFF	; 255
     fd0:	06 c0       	rjmp	.+12     	; 0xfde <vfprintf+0x280>
     fd2:	60 81       	ld	r22, Z
     fd4:	71 81       	ldd	r23, Z+1	; 0x01
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 5f       	subi	r16, 0xFE	; 254
     fdc:	1f 4f       	sbci	r17, 0xFF	; 255
     fde:	a4 01       	movw	r20, r8
     fe0:	0e 94 c9 08 	call	0x1192	; 0x1192 <__ultoa_invert>
     fe4:	a8 2e       	mov	r10, r24
     fe6:	a8 18       	sub	r10, r8
     fe8:	fb 2d       	mov	r31, r11
     fea:	ff 77       	andi	r31, 0x7F	; 127
     fec:	bf 2e       	mov	r11, r31
     fee:	b6 fe       	sbrs	r11, 6
     ff0:	0b c0       	rjmp	.+22     	; 0x1008 <vfprintf+0x2aa>
     ff2:	2b 2d       	mov	r18, r11
     ff4:	2e 7f       	andi	r18, 0xFE	; 254
     ff6:	a5 14       	cp	r10, r5
     ff8:	50 f4       	brcc	.+20     	; 0x100e <vfprintf+0x2b0>
     ffa:	b4 fe       	sbrs	r11, 4
     ffc:	0a c0       	rjmp	.+20     	; 0x1012 <vfprintf+0x2b4>
     ffe:	b2 fc       	sbrc	r11, 2
    1000:	08 c0       	rjmp	.+16     	; 0x1012 <vfprintf+0x2b4>
    1002:	2b 2d       	mov	r18, r11
    1004:	2e 7e       	andi	r18, 0xEE	; 238
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <vfprintf+0x2b4>
    1008:	7a 2c       	mov	r7, r10
    100a:	2b 2d       	mov	r18, r11
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <vfprintf+0x2b6>
    100e:	7a 2c       	mov	r7, r10
    1010:	01 c0       	rjmp	.+2      	; 0x1014 <vfprintf+0x2b6>
    1012:	75 2c       	mov	r7, r5
    1014:	24 ff       	sbrs	r18, 4
    1016:	0d c0       	rjmp	.+26     	; 0x1032 <vfprintf+0x2d4>
    1018:	fe 01       	movw	r30, r28
    101a:	ea 0d       	add	r30, r10
    101c:	f1 1d       	adc	r31, r1
    101e:	80 81       	ld	r24, Z
    1020:	80 33       	cpi	r24, 0x30	; 48
    1022:	11 f4       	brne	.+4      	; 0x1028 <vfprintf+0x2ca>
    1024:	29 7e       	andi	r18, 0xE9	; 233
    1026:	09 c0       	rjmp	.+18     	; 0x103a <vfprintf+0x2dc>
    1028:	22 ff       	sbrs	r18, 2
    102a:	06 c0       	rjmp	.+12     	; 0x1038 <vfprintf+0x2da>
    102c:	73 94       	inc	r7
    102e:	73 94       	inc	r7
    1030:	04 c0       	rjmp	.+8      	; 0x103a <vfprintf+0x2dc>
    1032:	82 2f       	mov	r24, r18
    1034:	86 78       	andi	r24, 0x86	; 134
    1036:	09 f0       	breq	.+2      	; 0x103a <vfprintf+0x2dc>
    1038:	73 94       	inc	r7
    103a:	23 fd       	sbrc	r18, 3
    103c:	13 c0       	rjmp	.+38     	; 0x1064 <vfprintf+0x306>
    103e:	20 ff       	sbrs	r18, 0
    1040:	06 c0       	rjmp	.+12     	; 0x104e <vfprintf+0x2f0>
    1042:	5a 2c       	mov	r5, r10
    1044:	73 14       	cp	r7, r3
    1046:	18 f4       	brcc	.+6      	; 0x104e <vfprintf+0x2f0>
    1048:	53 0c       	add	r5, r3
    104a:	57 18       	sub	r5, r7
    104c:	73 2c       	mov	r7, r3
    104e:	73 14       	cp	r7, r3
    1050:	68 f4       	brcc	.+26     	; 0x106c <vfprintf+0x30e>
    1052:	b7 01       	movw	r22, r14
    1054:	80 e2       	ldi	r24, 0x20	; 32
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	2c 87       	std	Y+12, r18	; 0x0c
    105a:	0e 94 97 08 	call	0x112e	; 0x112e <fputc>
    105e:	73 94       	inc	r7
    1060:	2c 85       	ldd	r18, Y+12	; 0x0c
    1062:	f5 cf       	rjmp	.-22     	; 0x104e <vfprintf+0x2f0>
    1064:	73 14       	cp	r7, r3
    1066:	10 f4       	brcc	.+4      	; 0x106c <vfprintf+0x30e>
    1068:	37 18       	sub	r3, r7
    106a:	01 c0       	rjmp	.+2      	; 0x106e <vfprintf+0x310>
    106c:	31 2c       	mov	r3, r1
    106e:	24 ff       	sbrs	r18, 4
    1070:	12 c0       	rjmp	.+36     	; 0x1096 <vfprintf+0x338>
    1072:	b7 01       	movw	r22, r14
    1074:	80 e3       	ldi	r24, 0x30	; 48
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	2c 87       	std	Y+12, r18	; 0x0c
    107a:	0e 94 97 08 	call	0x112e	; 0x112e <fputc>
    107e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1080:	22 ff       	sbrs	r18, 2
    1082:	17 c0       	rjmp	.+46     	; 0x10b2 <vfprintf+0x354>
    1084:	21 ff       	sbrs	r18, 1
    1086:	03 c0       	rjmp	.+6      	; 0x108e <vfprintf+0x330>
    1088:	88 e5       	ldi	r24, 0x58	; 88
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <vfprintf+0x334>
    108e:	88 e7       	ldi	r24, 0x78	; 120
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	b7 01       	movw	r22, r14
    1094:	0c c0       	rjmp	.+24     	; 0x10ae <vfprintf+0x350>
    1096:	82 2f       	mov	r24, r18
    1098:	86 78       	andi	r24, 0x86	; 134
    109a:	59 f0       	breq	.+22     	; 0x10b2 <vfprintf+0x354>
    109c:	21 fd       	sbrc	r18, 1
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <vfprintf+0x346>
    10a0:	80 e2       	ldi	r24, 0x20	; 32
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <vfprintf+0x348>
    10a4:	8b e2       	ldi	r24, 0x2B	; 43
    10a6:	27 fd       	sbrc	r18, 7
    10a8:	8d e2       	ldi	r24, 0x2D	; 45
    10aa:	b7 01       	movw	r22, r14
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 97 08 	call	0x112e	; 0x112e <fputc>
    10b2:	a5 14       	cp	r10, r5
    10b4:	38 f4       	brcc	.+14     	; 0x10c4 <vfprintf+0x366>
    10b6:	b7 01       	movw	r22, r14
    10b8:	80 e3       	ldi	r24, 0x30	; 48
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 97 08 	call	0x112e	; 0x112e <fputc>
    10c0:	5a 94       	dec	r5
    10c2:	f7 cf       	rjmp	.-18     	; 0x10b2 <vfprintf+0x354>
    10c4:	aa 94       	dec	r10
    10c6:	f4 01       	movw	r30, r8
    10c8:	ea 0d       	add	r30, r10
    10ca:	f1 1d       	adc	r31, r1
    10cc:	80 81       	ld	r24, Z
    10ce:	b7 01       	movw	r22, r14
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	0e 94 97 08 	call	0x112e	; 0x112e <fputc>
    10d6:	a1 10       	cpse	r10, r1
    10d8:	f5 cf       	rjmp	.-22     	; 0x10c4 <vfprintf+0x366>
    10da:	33 20       	and	r3, r3
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <vfprintf+0x382>
    10de:	51 ce       	rjmp	.-862    	; 0xd82 <vfprintf+0x24>
    10e0:	b7 01       	movw	r22, r14
    10e2:	80 e2       	ldi	r24, 0x20	; 32
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 97 08 	call	0x112e	; 0x112e <fputc>
    10ea:	3a 94       	dec	r3
    10ec:	f6 cf       	rjmp	.-20     	; 0x10da <vfprintf+0x37c>
    10ee:	f7 01       	movw	r30, r14
    10f0:	86 81       	ldd	r24, Z+6	; 0x06
    10f2:	97 81       	ldd	r25, Z+7	; 0x07
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <vfprintf+0x39c>
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	9f ef       	ldi	r25, 0xFF	; 255
    10fa:	2c 96       	adiw	r28, 0x0c	; 12
    10fc:	e2 e1       	ldi	r30, 0x12	; 18
    10fe:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__epilogue_restores__>

00001102 <strnlen_P>:
    1102:	fc 01       	movw	r30, r24
    1104:	05 90       	lpm	r0, Z+
    1106:	61 50       	subi	r22, 0x01	; 1
    1108:	70 40       	sbci	r23, 0x00	; 0
    110a:	01 10       	cpse	r0, r1
    110c:	d8 f7       	brcc	.-10     	; 0x1104 <strnlen_P+0x2>
    110e:	80 95       	com	r24
    1110:	90 95       	com	r25
    1112:	8e 0f       	add	r24, r30
    1114:	9f 1f       	adc	r25, r31
    1116:	08 95       	ret

00001118 <strnlen>:
    1118:	fc 01       	movw	r30, r24
    111a:	61 50       	subi	r22, 0x01	; 1
    111c:	70 40       	sbci	r23, 0x00	; 0
    111e:	01 90       	ld	r0, Z+
    1120:	01 10       	cpse	r0, r1
    1122:	d8 f7       	brcc	.-10     	; 0x111a <strnlen+0x2>
    1124:	80 95       	com	r24
    1126:	90 95       	com	r25
    1128:	8e 0f       	add	r24, r30
    112a:	9f 1f       	adc	r25, r31
    112c:	08 95       	ret

0000112e <fputc>:
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	18 2f       	mov	r17, r24
    1138:	09 2f       	mov	r16, r25
    113a:	eb 01       	movw	r28, r22
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	81 fd       	sbrc	r24, 1
    1140:	03 c0       	rjmp	.+6      	; 0x1148 <fputc+0x1a>
    1142:	8f ef       	ldi	r24, 0xFF	; 255
    1144:	9f ef       	ldi	r25, 0xFF	; 255
    1146:	20 c0       	rjmp	.+64     	; 0x1188 <fputc+0x5a>
    1148:	82 ff       	sbrs	r24, 2
    114a:	10 c0       	rjmp	.+32     	; 0x116c <fputc+0x3e>
    114c:	4e 81       	ldd	r20, Y+6	; 0x06
    114e:	5f 81       	ldd	r21, Y+7	; 0x07
    1150:	2c 81       	ldd	r18, Y+4	; 0x04
    1152:	3d 81       	ldd	r19, Y+5	; 0x05
    1154:	42 17       	cp	r20, r18
    1156:	53 07       	cpc	r21, r19
    1158:	7c f4       	brge	.+30     	; 0x1178 <fputc+0x4a>
    115a:	e8 81       	ld	r30, Y
    115c:	f9 81       	ldd	r31, Y+1	; 0x01
    115e:	9f 01       	movw	r18, r30
    1160:	2f 5f       	subi	r18, 0xFF	; 255
    1162:	3f 4f       	sbci	r19, 0xFF	; 255
    1164:	28 83       	st	Y, r18
    1166:	39 83       	std	Y+1, r19	; 0x01
    1168:	10 83       	st	Z, r17
    116a:	06 c0       	rjmp	.+12     	; 0x1178 <fputc+0x4a>
    116c:	e8 85       	ldd	r30, Y+8	; 0x08
    116e:	f9 85       	ldd	r31, Y+9	; 0x09
    1170:	81 2f       	mov	r24, r17
    1172:	09 95       	icall
    1174:	89 2b       	or	r24, r25
    1176:	29 f7       	brne	.-54     	; 0x1142 <fputc+0x14>
    1178:	2e 81       	ldd	r18, Y+6	; 0x06
    117a:	3f 81       	ldd	r19, Y+7	; 0x07
    117c:	2f 5f       	subi	r18, 0xFF	; 255
    117e:	3f 4f       	sbci	r19, 0xFF	; 255
    1180:	2e 83       	std	Y+6, r18	; 0x06
    1182:	3f 83       	std	Y+7, r19	; 0x07
    1184:	81 2f       	mov	r24, r17
    1186:	90 2f       	mov	r25, r16
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	08 95       	ret

00001192 <__ultoa_invert>:
    1192:	fa 01       	movw	r30, r20
    1194:	aa 27       	eor	r26, r26
    1196:	28 30       	cpi	r18, 0x08	; 8
    1198:	51 f1       	breq	.+84     	; 0x11ee <__ultoa_invert+0x5c>
    119a:	20 31       	cpi	r18, 0x10	; 16
    119c:	81 f1       	breq	.+96     	; 0x11fe <__ultoa_invert+0x6c>
    119e:	e8 94       	clt
    11a0:	6f 93       	push	r22
    11a2:	6e 7f       	andi	r22, 0xFE	; 254
    11a4:	6e 5f       	subi	r22, 0xFE	; 254
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	8f 4f       	sbci	r24, 0xFF	; 255
    11aa:	9f 4f       	sbci	r25, 0xFF	; 255
    11ac:	af 4f       	sbci	r26, 0xFF	; 255
    11ae:	b1 e0       	ldi	r27, 0x01	; 1
    11b0:	3e d0       	rcall	.+124    	; 0x122e <__ultoa_invert+0x9c>
    11b2:	b4 e0       	ldi	r27, 0x04	; 4
    11b4:	3c d0       	rcall	.+120    	; 0x122e <__ultoa_invert+0x9c>
    11b6:	67 0f       	add	r22, r23
    11b8:	78 1f       	adc	r23, r24
    11ba:	89 1f       	adc	r24, r25
    11bc:	9a 1f       	adc	r25, r26
    11be:	a1 1d       	adc	r26, r1
    11c0:	68 0f       	add	r22, r24
    11c2:	79 1f       	adc	r23, r25
    11c4:	8a 1f       	adc	r24, r26
    11c6:	91 1d       	adc	r25, r1
    11c8:	a1 1d       	adc	r26, r1
    11ca:	6a 0f       	add	r22, r26
    11cc:	71 1d       	adc	r23, r1
    11ce:	81 1d       	adc	r24, r1
    11d0:	91 1d       	adc	r25, r1
    11d2:	a1 1d       	adc	r26, r1
    11d4:	20 d0       	rcall	.+64     	; 0x1216 <__ultoa_invert+0x84>
    11d6:	09 f4       	brne	.+2      	; 0x11da <__ultoa_invert+0x48>
    11d8:	68 94       	set
    11da:	3f 91       	pop	r19
    11dc:	2a e0       	ldi	r18, 0x0A	; 10
    11de:	26 9f       	mul	r18, r22
    11e0:	11 24       	eor	r1, r1
    11e2:	30 19       	sub	r19, r0
    11e4:	30 5d       	subi	r19, 0xD0	; 208
    11e6:	31 93       	st	Z+, r19
    11e8:	de f6       	brtc	.-74     	; 0x11a0 <__ultoa_invert+0xe>
    11ea:	cf 01       	movw	r24, r30
    11ec:	08 95       	ret
    11ee:	46 2f       	mov	r20, r22
    11f0:	47 70       	andi	r20, 0x07	; 7
    11f2:	40 5d       	subi	r20, 0xD0	; 208
    11f4:	41 93       	st	Z+, r20
    11f6:	b3 e0       	ldi	r27, 0x03	; 3
    11f8:	0f d0       	rcall	.+30     	; 0x1218 <__ultoa_invert+0x86>
    11fa:	c9 f7       	brne	.-14     	; 0x11ee <__ultoa_invert+0x5c>
    11fc:	f6 cf       	rjmp	.-20     	; 0x11ea <__ultoa_invert+0x58>
    11fe:	46 2f       	mov	r20, r22
    1200:	4f 70       	andi	r20, 0x0F	; 15
    1202:	40 5d       	subi	r20, 0xD0	; 208
    1204:	4a 33       	cpi	r20, 0x3A	; 58
    1206:	18 f0       	brcs	.+6      	; 0x120e <__ultoa_invert+0x7c>
    1208:	49 5d       	subi	r20, 0xD9	; 217
    120a:	31 fd       	sbrc	r19, 1
    120c:	40 52       	subi	r20, 0x20	; 32
    120e:	41 93       	st	Z+, r20
    1210:	02 d0       	rcall	.+4      	; 0x1216 <__ultoa_invert+0x84>
    1212:	a9 f7       	brne	.-22     	; 0x11fe <__ultoa_invert+0x6c>
    1214:	ea cf       	rjmp	.-44     	; 0x11ea <__ultoa_invert+0x58>
    1216:	b4 e0       	ldi	r27, 0x04	; 4
    1218:	a6 95       	lsr	r26
    121a:	97 95       	ror	r25
    121c:	87 95       	ror	r24
    121e:	77 95       	ror	r23
    1220:	67 95       	ror	r22
    1222:	ba 95       	dec	r27
    1224:	c9 f7       	brne	.-14     	; 0x1218 <__ultoa_invert+0x86>
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	61 05       	cpc	r22, r1
    122a:	71 05       	cpc	r23, r1
    122c:	08 95       	ret
    122e:	9b 01       	movw	r18, r22
    1230:	ac 01       	movw	r20, r24
    1232:	0a 2e       	mov	r0, r26
    1234:	06 94       	lsr	r0
    1236:	57 95       	ror	r21
    1238:	47 95       	ror	r20
    123a:	37 95       	ror	r19
    123c:	27 95       	ror	r18
    123e:	ba 95       	dec	r27
    1240:	c9 f7       	brne	.-14     	; 0x1234 <__ultoa_invert+0xa2>
    1242:	62 0f       	add	r22, r18
    1244:	73 1f       	adc	r23, r19
    1246:	84 1f       	adc	r24, r20
    1248:	95 1f       	adc	r25, r21
    124a:	a0 1d       	adc	r26, r0
    124c:	08 95       	ret

0000124e <__prologue_saves__>:
    124e:	2f 92       	push	r2
    1250:	3f 92       	push	r3
    1252:	4f 92       	push	r4
    1254:	5f 92       	push	r5
    1256:	6f 92       	push	r6
    1258:	7f 92       	push	r7
    125a:	8f 92       	push	r8
    125c:	9f 92       	push	r9
    125e:	af 92       	push	r10
    1260:	bf 92       	push	r11
    1262:	cf 92       	push	r12
    1264:	df 92       	push	r13
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	ca 1b       	sub	r28, r26
    1278:	db 0b       	sbc	r29, r27
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	09 94       	ijmp

00001280 <__epilogue_restores__>:
    1280:	2a 88       	ldd	r2, Y+18	; 0x12
    1282:	39 88       	ldd	r3, Y+17	; 0x11
    1284:	48 88       	ldd	r4, Y+16	; 0x10
    1286:	5f 84       	ldd	r5, Y+15	; 0x0f
    1288:	6e 84       	ldd	r6, Y+14	; 0x0e
    128a:	7d 84       	ldd	r7, Y+13	; 0x0d
    128c:	8c 84       	ldd	r8, Y+12	; 0x0c
    128e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1290:	aa 84       	ldd	r10, Y+10	; 0x0a
    1292:	b9 84       	ldd	r11, Y+9	; 0x09
    1294:	c8 84       	ldd	r12, Y+8	; 0x08
    1296:	df 80       	ldd	r13, Y+7	; 0x07
    1298:	ee 80       	ldd	r14, Y+6	; 0x06
    129a:	fd 80       	ldd	r15, Y+5	; 0x05
    129c:	0c 81       	ldd	r16, Y+4	; 0x04
    129e:	1b 81       	ldd	r17, Y+3	; 0x03
    12a0:	aa 81       	ldd	r26, Y+2	; 0x02
    12a2:	b9 81       	ldd	r27, Y+1	; 0x01
    12a4:	ce 0f       	add	r28, r30
    12a6:	d1 1d       	adc	r29, r1
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	ed 01       	movw	r28, r26
    12ae:	08 95       	ret

000012b0 <_exit>:
    12b0:	f8 94       	cli

000012b2 <__stop_program>:
    12b2:	ff cf       	rjmp	.-2      	; 0x12b2 <__stop_program>
