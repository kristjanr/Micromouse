
PisiXBee51.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00802000  000013ec  00001480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000079  00802028  00802028  000014a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000408  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007a4b  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015a7  00000000  00000000  00009357  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016f2  00000000  00000000  0000a8fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a6c  00000000  00000000  0000bff0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000381a  00000000  00000000  0000ca5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000024fa  00000000  00000000  00010276  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003b8  00000000  00000000  00012770  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      14:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      18:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      1c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      20:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      24:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      28:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      38:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      40:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      44:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      4c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      50:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      54:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      58:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      5c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      64:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      68:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      6c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      70:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      74:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      78:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      7c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      80:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      84:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      88:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      8c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      90:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      94:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      98:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      9c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b8:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__vector_46>
      bc:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_47>
      c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e8:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__vector_58>
      ec:	0c 94 09 02 	jmp	0x412	; 0x412 <__vector_59>
      f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      fc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     100:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     104:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     108:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     10c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     110:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     114:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     118:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     11c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     120:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     124:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     128:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     12c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     130:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     134:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     138:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     13c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     140:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     144:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     148:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     14c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     150:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     154:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     158:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     15c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     160:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     164:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     168:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     16c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     170:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     174:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     178:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     17c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     180:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     184:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     188:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     18c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     190:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     194:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     198:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     19c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e2       	ldi	r29, 0x2F	; 47
     206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	ec ee       	ldi	r30, 0xEC	; 236
     210:	f3 e1       	ldi	r31, 0x13	; 19
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	a8 32       	cpi	r26, 0x28	; 40
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	20 e2       	ldi	r18, 0x20	; 32
     220:	a8 e2       	ldi	r26, 0x28	; 40
     222:	b0 e2       	ldi	r27, 0x20	; 32
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a1 3a       	cpi	r26, 0xA1	; 161
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 65 06 	call	0xcca	; 0xcca <main>
     232:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <_exit>

00000236 <__bad_interrupt>:
     236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023a <adc_init>:
static int8_t offset;

void adc_init(void)
{
    /* Move stored calibration values to ADC A */
    ADC_CalibrationValues_Load(&ADCA);
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	92 e0       	ldi	r25, 0x02	; 2
     23e:	0e 94 77 02 	call	0x4ee	; 0x4ee <ADC_CalibrationValues_Load>

    /* Set up ADC A to have signed conversion mode and 12 bit resolution. */
    ADC_ConvMode_and_Resolution_Config(&ADCA, true, ADC_RESOLUTION_12BIT_gc);
     242:	e0 e0       	ldi	r30, 0x00	; 0
     244:	f2 e0       	ldi	r31, 0x02	; 2
     246:	81 81       	ldd	r24, Z+1	; 0x01
     248:	89 7e       	andi	r24, 0xE9	; 233
     24a:	80 61       	ori	r24, 0x10	; 16
     24c:	81 83       	std	Z+1, r24	; 0x01

    // The ADC has different voltage reference options, controlled by the REFSEL bits in the
    // REFCTRL register. Here the internal reference is selected
    // IntVCC = Vcc / 1.6 = 2,0625 V
    ADC_Reference_Config(&ADCA, ADC_REFSEL_INTVCC_gc);
     24e:	82 81       	ldd	r24, Z+2	; 0x02
     250:	8f 78       	andi	r24, 0x8F	; 143
     252:	80 61       	ori	r24, 0x10	; 16
     254:	82 83       	std	Z+2, r24	; 0x02

    // The clock into the ADC decide the maximum sample rate and the conversion time, and
    // this is controlled by the PRESCALER bits in the PRESCALER register. Here, the
    // Peripheral Clock is divided by 64 ( gives 500 KSPS with 32Mhz clock )
    ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV64_gc);
     256:	84 81       	ldd	r24, Z+4	; 0x04
     258:	88 7f       	andi	r24, 0xF8	; 248
     25a:	84 60       	ori	r24, 0x04	; 4
     25c:	84 83       	std	Z+4, r24	; 0x04

    // The used Virtual Channel (CH0) must be set in the correct mode
    // In this task we will use single ended input, so this mode is selected

    /* Setup channel 0 to have single ended input. */
    ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     25e:	a0 e2       	ldi	r26, 0x20	; 32
     260:	b2 e0       	ldi	r27, 0x02	; 2
     262:	8c 91       	ld	r24, X
     264:	80 7e       	andi	r24, 0xE0	; 224
     266:	81 60       	ori	r24, 0x01	; 1
     268:	8c 93       	st	X, r24
                                     ADC_CH_INPUTMODE_SINGLEENDED_gc,
                                     ADC_CH_GAIN_1X_gc);

    // Setting up the which pins to convert.
    // Note that the negative pin is internally connected to ground
    ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN8_gc, ADC_CH_MUXNEG_PIN0_gc);
     26a:	80 e4       	ldi	r24, 0x40	; 64
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	8c 93       	st	X, r24


    // Before the ADC can be used it must be enabled
    ADC_Enable(&ADCA);
     270:	80 81       	ld	r24, Z
     272:	81 60       	ori	r24, 0x01	; 1
     274:	80 83       	st	Z, r24


    // Wait until the ADC is ready
    ADC_Wait_8MHz(&ADCA);
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	92 e0       	ldi	r25, 0x02	; 2
     27a:	0e 94 39 02 	call	0x472	; 0x472 <ADC_Wait_8MHz>

    /* Get offset value for ADCA.  */
    offset = ADC_Offset_Get_Signed(&ADCA, &(ADCA.CH0), true);
     27e:	41 e0       	ldi	r20, 0x01	; 1
     280:	60 e2       	ldi	r22, 0x20	; 32
     282:	72 e0       	ldi	r23, 0x02	; 2
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	92 e0       	ldi	r25, 0x02	; 2
     288:	0e 94 44 02 	call	0x488	; 0x488 <ADC_Offset_Get_Signed>
     28c:	80 93 28 20 	sts	0x2028, r24
     290:	08 95       	ret

00000292 <adc_read>:
}

uint16_t adc_read(uint8_t channel)
{
    ADC_Ch_InputMux_Config(&ADCA.CH0, (channel << 3), ADC_CH_MUXNEG_PIN0_gc);
     292:	88 0f       	add	r24, r24
     294:	88 0f       	add	r24, r24
     296:	88 0f       	add	r24, r24
     298:	e0 e2       	ldi	r30, 0x20	; 32
     29a:	f2 e0       	ldi	r31, 0x02	; 2
     29c:	81 83       	std	Z+1, r24	; 0x01

    // Start a single conversion
    ADC_Ch_Conversion_Start(&ADCA.CH0);
     29e:	80 81       	ld	r24, Z
     2a0:	80 68       	ori	r24, 0x80	; 128
     2a2:	80 83       	st	Z, r24

    while(!ADC_Ch_Conversion_Complete(&ADCA.CH0));
     2a4:	83 81       	ldd	r24, Z+3	; 0x03
     2a6:	80 ff       	sbrs	r24, 0
     2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <adc_read+0x12>

    return ADC_ResultCh_GetWord_Signed(&ADCA.CH0, offset);
     2aa:	60 91 28 20 	lds	r22, 0x2028
     2ae:	80 e2       	ldi	r24, 0x20	; 32
     2b0:	92 e0       	ldi	r25, 0x02	; 2
     2b2:	0e 94 2f 02 	call	0x45e	; 0x45e <ADC_ResultCh_GetWord_Signed>
}
     2b6:	08 95       	ret

000002b8 <__vector_47>:

volatile uint32_t systick = 0;

// Systick interrupt service
ISR(SYSTICK_TIMER_INTERRUPT)
{
     2b8:	1f 92       	push	r1
     2ba:	0f 92       	push	r0
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	0f 92       	push	r0
     2c0:	11 24       	eor	r1, r1
     2c2:	8f 93       	push	r24
     2c4:	9f 93       	push	r25
     2c6:	af 93       	push	r26
     2c8:	bf 93       	push	r27
    systick++;
     2ca:	80 91 29 20 	lds	r24, 0x2029
     2ce:	90 91 2a 20 	lds	r25, 0x202A
     2d2:	a0 91 2b 20 	lds	r26, 0x202B
     2d6:	b0 91 2c 20 	lds	r27, 0x202C
     2da:	01 96       	adiw	r24, 0x01	; 1
     2dc:	a1 1d       	adc	r26, r1
     2de:	b1 1d       	adc	r27, r1
     2e0:	80 93 29 20 	sts	0x2029, r24
     2e4:	90 93 2a 20 	sts	0x202A, r25
     2e8:	a0 93 2b 20 	sts	0x202B, r26
     2ec:	b0 93 2c 20 	sts	0x202C, r27
}
     2f0:	bf 91       	pop	r27
     2f2:	af 91       	pop	r26
     2f4:	9f 91       	pop	r25
     2f6:	8f 91       	pop	r24
     2f8:	0f 90       	pop	r0
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <radio_init>:

// USART data struct used in task
USART_data_t USART_data;

void radio_init(uint32_t baud)
{
     302:	cf 92       	push	r12
     304:	df 92       	push	r13
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	6b 01       	movw	r12, r22
     310:	7c 01       	movw	r14, r24
    // (TX) as output
    COMPORT.DIRSET   = (1<<TXD);
     312:	e0 e8       	ldi	r30, 0x80	; 128
     314:	f6 e0       	ldi	r31, 0x06	; 6
     316:	88 e0       	ldi	r24, 0x08	; 8
     318:	81 83       	std	Z+1, r24	; 0x01
    // (RX) as input
    COMPORT.DIRCLR   = (1<<RXD);
     31a:	84 e0       	ldi	r24, 0x04	; 4
     31c:	82 83       	std	Z+2, r24	; 0x02

    // Use USARTE0 and initialize buffers
    USART_InterruptDriver_Initialize(&USART_data, &RADIO_USART, USART_DREINTLVL_LO_gc);
     31e:	41 e0       	ldi	r20, 0x01	; 1
     320:	60 ea       	ldi	r22, 0xA0	; 160
     322:	7a e0       	ldi	r23, 0x0A	; 10
     324:	8f e2       	ldi	r24, 0x2F	; 47
     326:	90 e2       	ldi	r25, 0x20	; 32
     328:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <USART_InterruptDriver_Initialize>

    // USARTE0, 8 Data bits, No Parity, 1 Stop bit
    USART_Format_Set(USART_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     32c:	c0 91 2f 20 	lds	r28, 0x202F
     330:	d0 91 30 20 	lds	r29, 0x2030
     334:	83 e0       	ldi	r24, 0x03	; 3
     336:	8d 83       	std	Y+5, r24	; 0x05

    // Enable RXC interrupt
    USART_RxdInterruptLevel_Set(USART_data.usart, USART_RXCINTLVL_LO_gc);
     338:	8b 81       	ldd	r24, Y+3	; 0x03
     33a:	8f 7c       	andi	r24, 0xCF	; 207
     33c:	80 61       	ori	r24, 0x10	; 16
     33e:	8b 83       	std	Y+3, r24	; 0x03

    // Set Baudrate
    USART_Baudrate_Set(&RADIO_USART, (((F_CPU)/(16*baud))) , 0);
     340:	cc 0c       	add	r12, r12
     342:	dd 1c       	adc	r13, r13
     344:	ee 1c       	adc	r14, r14
     346:	ff 1c       	adc	r15, r15
     348:	cc 0c       	add	r12, r12
     34a:	dd 1c       	adc	r13, r13
     34c:	ee 1c       	adc	r14, r14
     34e:	ff 1c       	adc	r15, r15
     350:	a7 01       	movw	r20, r14
     352:	96 01       	movw	r18, r12
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	44 1f       	adc	r20, r20
     35a:	55 1f       	adc	r21, r21
     35c:	22 0f       	add	r18, r18
     35e:	33 1f       	adc	r19, r19
     360:	44 1f       	adc	r20, r20
     362:	55 1f       	adc	r21, r21
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	78 e4       	ldi	r23, 0x48	; 72
     368:	88 ee       	ldi	r24, 0xE8	; 232
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	0e 94 07 07 	call	0xe0e	; 0xe0e <__udivmodsi4>
     370:	e0 ea       	ldi	r30, 0xA0	; 160
     372:	fa e0       	ldi	r31, 0x0A	; 10
     374:	26 83       	std	Z+6, r18	; 0x06
     376:	bb 27       	eor	r27, r27
     378:	a5 2f       	mov	r26, r21
     37a:	94 2f       	mov	r25, r20
     37c:	83 2f       	mov	r24, r19
     37e:	87 83       	std	Z+7, r24	; 0x07
    //USART_Baudrate_Set(&RADIO_USART, 32 , 0);
    /* Enable both RX and TX. */
    USART_Rx_Enable(USART_data.usart);
     380:	8c 81       	ldd	r24, Y+4	; 0x04
     382:	80 61       	ori	r24, 0x10	; 16
     384:	8c 83       	std	Y+4, r24	; 0x04
    USART_Tx_Enable(USART_data.usart);
     386:	8c 81       	ldd	r24, Y+4	; 0x04
     388:	88 60       	ori	r24, 0x08	; 8
     38a:	8c 83       	std	Y+4, r24	; 0x04

    // Enable PMIC interrupt level low
    PMIC.CTRL |= PMIC_LOLVLEX_bm;
     38c:	e0 ea       	ldi	r30, 0xA0	; 160
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	82 81       	ldd	r24, Z+2	; 0x02
     392:	81 60       	ori	r24, 0x01	; 1
     394:	82 83       	std	Z+2, r24	; 0x02

    // Enable global interrupts
    sei();
     396:	78 94       	sei

}
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	df 90       	pop	r13
     3a2:	cf 90       	pop	r12
     3a4:	08 95       	ret

000003a6 <radio_puts>:
        }
    }
}

void radio_puts(char* stringPtr)
{
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ec 01       	movw	r28, r24
    while (*stringPtr)
     3ac:	06 c0       	rjmp	.+12     	; 0x3ba <radio_puts+0x14>
    {
        if(USART_TXBuffer_PutByte(&USART_data, *stringPtr))
     3ae:	8f e2       	ldi	r24, 0x2F	; 47
     3b0:	90 e2       	ldi	r25, 0x20	; 32
     3b2:	0e 94 86 03 	call	0x70c	; 0x70c <USART_TXBuffer_PutByte>
     3b6:	81 11       	cpse	r24, r1
        {
            stringPtr++;
     3b8:	21 96       	adiw	r28, 0x01	; 1
    }
}

void radio_puts(char* stringPtr)
{
    while (*stringPtr)
     3ba:	68 81       	ld	r22, Y
     3bc:	61 11       	cpse	r22, r1
     3be:	f7 cf       	rjmp	.-18     	; 0x3ae <radio_puts+0x8>
        if(USART_TXBuffer_PutByte(&USART_data, *stringPtr))
        {
            stringPtr++;
        }
    }
}
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <__vector_58>:
//  Receive complete interrupt service routine.
//  Calls the common receive complete handler with pointer to the correct USART
//  as argument.

ISR( RADIO_USART_RXC_vect ) // Note that this vector name is a define mapped to the correct interrupt vector
{
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	2f 93       	push	r18
     3d2:	3f 93       	push	r19
     3d4:	4f 93       	push	r20
     3d6:	5f 93       	push	r21
     3d8:	6f 93       	push	r22
     3da:	7f 93       	push	r23
     3dc:	8f 93       	push	r24
     3de:	9f 93       	push	r25
     3e0:	af 93       	push	r26
     3e2:	bf 93       	push	r27
     3e4:	ef 93       	push	r30
     3e6:	ff 93       	push	r31
    // See "board.h"
    USART_RXComplete( &USART_data );
     3e8:	8f e2       	ldi	r24, 0x2F	; 47
     3ea:	90 e2       	ldi	r25, 0x20	; 32
     3ec:	0e 94 a6 03 	call	0x74c	; 0x74c <USART_RXComplete>
}
     3f0:	ff 91       	pop	r31
     3f2:	ef 91       	pop	r30
     3f4:	bf 91       	pop	r27
     3f6:	af 91       	pop	r26
     3f8:	9f 91       	pop	r25
     3fa:	8f 91       	pop	r24
     3fc:	7f 91       	pop	r23
     3fe:	6f 91       	pop	r22
     400:	5f 91       	pop	r21
     402:	4f 91       	pop	r20
     404:	3f 91       	pop	r19
     406:	2f 91       	pop	r18
     408:	0f 90       	pop	r0
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	0f 90       	pop	r0
     40e:	1f 90       	pop	r1
     410:	18 95       	reti

00000412 <__vector_59>:
//  Data register empty  interrupt service routine.
//  Calls the common data register empty complete handler with pointer to the
//  correct USART as argument.

ISR( RADIO_USART_DRE_vect ) // Note that this vector name is a define mapped to the correct interrupt vector
{
     412:	1f 92       	push	r1
     414:	0f 92       	push	r0
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	0f 92       	push	r0
     41a:	11 24       	eor	r1, r1
     41c:	2f 93       	push	r18
     41e:	3f 93       	push	r19
     420:	4f 93       	push	r20
     422:	5f 93       	push	r21
     424:	6f 93       	push	r22
     426:	7f 93       	push	r23
     428:	8f 93       	push	r24
     42a:	9f 93       	push	r25
     42c:	af 93       	push	r26
     42e:	bf 93       	push	r27
     430:	ef 93       	push	r30
     432:	ff 93       	push	r31
    // See "board.h"
    USART_DataRegEmpty( &USART_data );
     434:	8f e2       	ldi	r24, 0x2F	; 47
     436:	90 e2       	ldi	r25, 0x20	; 32
     438:	0e 94 c2 03 	call	0x784	; 0x784 <USART_DataRegEmpty>
     43c:	ff 91       	pop	r31
     43e:	ef 91       	pop	r30
     440:	bf 91       	pop	r27
     442:	af 91       	pop	r26
     444:	9f 91       	pop	r25
     446:	8f 91       	pop	r24
     448:	7f 91       	pop	r23
     44a:	6f 91       	pop	r22
     44c:	5f 91       	pop	r21
     44e:	4f 91       	pop	r20
     450:	3f 91       	pop	r19
     452:	2f 91       	pop	r18
     454:	0f 90       	pop	r0
     456:	0f be       	out	0x3f, r0	; 63
     458:	0f 90       	pop	r0
     45a:	1f 90       	pop	r1
     45c:	18 95       	reti

0000045e <ADC_ResultCh_GetWord_Signed>:
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
    int16_t answer;

    /* Clear interrupt flag.*/
    adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     45e:	21 e0       	ldi	r18, 0x01	; 1
     460:	fc 01       	movw	r30, r24
     462:	23 83       	std	Z+3, r18	; 0x03

    /* Return result register contents*/
    answer = adc_ch->RES - signedOffset;
     464:	84 81       	ldd	r24, Z+4	; 0x04
     466:	95 81       	ldd	r25, Z+5	; 0x05

    return answer;
}
     468:	86 1b       	sub	r24, r22
     46a:	91 09       	sbc	r25, r1
     46c:	67 fd       	sbrc	r22, 7
     46e:	93 95       	inc	r25
     470:	08 95       	ret

00000472 <ADC_Wait_8MHz>:
 *        than 8 MHz use the ADC_wait_32MHz function.
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_8MHz(ADC_t * adc)
{
     472:	fc 01       	movw	r30, r24
    /* Store old prescaler value. */
    uint8_t prescaler_val = adc->PRESCALER;
     474:	84 81       	ldd	r24, Z+4	; 0x04

    /* Set prescaler value to minimum value. */
    adc->PRESCALER = ADC_PRESCALER_DIV4_gc;
     476:	14 82       	std	Z+4, r1	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     478:	af ef       	ldi	r26, 0xFF	; 255
     47a:	b1 e0       	ldi	r27, 0x01	; 1
     47c:	11 97       	sbiw	r26, 0x01	; 1
     47e:	f1 f7       	brne	.-4      	; 0x47c <ADC_Wait_8MHz+0xa>
     480:	00 c0       	rjmp	.+0      	; 0x482 <ADC_Wait_8MHz+0x10>
     482:	00 00       	nop

    /* Wait 4*COMMON_MODE_CYCLES for common mode to settle. */
    _delay_us(4*COMMON_MODE_CYCLES);

    /* Set prescaler to old value*/
    adc->PRESCALER = prescaler_val;
     484:	84 83       	std	Z+4, r24	; 0x04
     486:	08 95       	ret

00000488 <ADC_Offset_Get_Signed>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
     488:	fb 01       	movw	r30, r22
    if (oversampling)
     48a:	44 23       	and	r20, r20
     48c:	e1 f0       	breq	.+56     	; 0x4c6 <ADC_Offset_Get_Signed+0x3e>
     48e:	84 e0       	ldi	r24, 0x04	; 4
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
    int16_t answer;

    /* Clear interrupt flag.*/
    adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     496:	61 e0       	ldi	r22, 0x01	; 1
    {
        int16_t offset=0;
        for (int i=0; i<4; i++)
        {
            /* Do one conversion to find offset. */
            ADC_Ch_Conversion_Start(ch);
     498:	40 81       	ld	r20, Z
     49a:	40 68       	ori	r20, 0x80	; 128
     49c:	40 83       	st	Z, r20

            do
            {
            }
            while (!ADC_Ch_Conversion_Complete(ch));
     49e:	43 81       	ldd	r20, Z+3	; 0x03
     4a0:	40 ff       	sbrs	r20, 0
     4a2:	fd cf       	rjmp	.-6      	; 0x49e <ADC_Offset_Get_Signed+0x16>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
    int16_t answer;

    /* Clear interrupt flag.*/
    adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     4a4:	63 83       	std	Z+3, r22	; 0x03

    /* Return result register contents*/
    answer = adc_ch->RES - signedOffset;
     4a6:	44 81       	ldd	r20, Z+4	; 0x04
     4a8:	55 81       	ldd	r21, Z+5	; 0x05

            do
            {
            }
            while (!ADC_Ch_Conversion_Complete(ch));
            offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
     4aa:	24 0f       	add	r18, r20
     4ac:	35 1f       	adc	r19, r21
     4ae:	01 97       	sbiw	r24, 0x01	; 1
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
        int16_t offset=0;
        for (int i=0; i<4; i++)
     4b0:	00 97       	sbiw	r24, 0x00	; 0
     4b2:	91 f7       	brne	.-28     	; 0x498 <ADC_Offset_Get_Signed+0x10>
            {
            }
            while (!ADC_Ch_Conversion_Complete(ch));
            offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
        }
        return ((int8_t)(offset/4));
     4b4:	c9 01       	movw	r24, r18
     4b6:	99 23       	and	r25, r25
     4b8:	0c f4       	brge	.+2      	; 0x4bc <ADC_Offset_Get_Signed+0x34>
     4ba:	03 96       	adiw	r24, 0x03	; 3
     4bc:	95 95       	asr	r25
     4be:	87 95       	ror	r24
     4c0:	95 95       	asr	r25
     4c2:	87 95       	ror	r24
     4c4:	08 95       	ret
    else
    {
        int8_t offset=0;

        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
     4c6:	80 81       	ld	r24, Z
     4c8:	80 68       	ori	r24, 0x80	; 128
     4ca:	80 83       	st	Z, r24

        do
        {
        }
        while (!ADC_Ch_Conversion_Complete(ch));
     4cc:	83 81       	ldd	r24, Z+3	; 0x03
     4ce:	80 ff       	sbrs	r24, 0
     4d0:	fd cf       	rjmp	.-6      	; 0x4cc <ADC_Offset_Get_Signed+0x44>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
    int16_t answer;

    /* Clear interrupt flag.*/
    adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	83 83       	std	Z+3, r24	; 0x03

    /* Return result register contents*/
    answer = adc_ch->RES - signedOffset;
     4d6:	84 81       	ldd	r24, Z+4	; 0x04
     4d8:	95 81       	ldd	r25, Z+5	; 0x05
        while (!ADC_Ch_Conversion_Complete(ch));
        offset = (uint8_t)ADC_ResultCh_GetWord_Signed(ch, 0x00);

        return offset;
    }
}
     4da:	08 95       	ret

000004dc <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
    uint8_t result;

    /* Load the NVM Command register to read the calibration row. */
    NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	90 93 ca 01 	sts	0x01CA, r25
    result = pgm_read_byte(index);
     4e2:	e8 2f       	mov	r30, r24
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	84 91       	lpm	r24, Z

    /* Clean up NVM Command register. */
    NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     4e8:	10 92 ca 01 	sts	0x01CA, r1

    return result;
}
     4ec:	08 95       	ret

000004ee <ADC_CalibrationValues_Load>:
 *  register. The calibration data reduces the non-linearity error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	ec 01       	movw	r28, r24
    if (&ADCA == adc)
     4f4:	c1 15       	cp	r28, r1
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	d8 07       	cpc	r29, r24
     4fa:	59 f4       	brne	.+22     	; 0x512 <ADC_CalibrationValues_Load+0x24>
    {
        /* Get ADCACAL0 from production signature . */
        adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
     4fc:	80 e2       	ldi	r24, 0x20	; 32
     4fe:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SP_ReadCalibrationByte>
     502:	c0 e0       	ldi	r28, 0x00	; 0
     504:	d2 e0       	ldi	r29, 0x02	; 2
     506:	8c 87       	std	Y+12, r24	; 0x0c
        adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
     508:	81 e2       	ldi	r24, 0x21	; 33
     50a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SP_ReadCalibrationByte>
     50e:	8d 87       	std	Y+13, r24	; 0x0d
     510:	08 c0       	rjmp	.+16     	; 0x522 <ADC_CalibrationValues_Load+0x34>
    }
    else
    {
        /* Get ADCBCAL0 from production signature  */
        adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
     512:	84 e2       	ldi	r24, 0x24	; 36
     514:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SP_ReadCalibrationByte>
     518:	8c 87       	std	Y+12, r24	; 0x0c
        adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
     51a:	85 e2       	ldi	r24, 0x25	; 37
     51c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SP_ReadCalibrationByte>
     520:	8d 87       	std	Y+13, r24	; 0x0d
    }
}
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     528:	0f 93       	push	r16
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	1f 92       	push	r1
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62

    // Restore global interrupt setting from scratch register.
    asm("out  0x3F, R1");

#elif defined __GNUC__
    AVR_ENTER_CRITICAL_REGION( );
     534:	2f b7       	in	r18, 0x3f	; 63
     536:	29 83       	std	Y+1, r18	; 0x01
     538:	f8 94       	cli
    volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
    RAMPZ = 0;
     53a:	1b be       	out	0x3b, r1	; 59
#endif
    asm volatile(
     53c:	fc 01       	movw	r30, r24
     53e:	08 ed       	ldi	r16, 0xD8	; 216
     540:	04 bf       	out	0x34, r16	; 52
     542:	60 83       	st	Z, r22
        :
        : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
        : "r16", "r30", "r31"
    );

    AVR_LEAVE_CRITICAL_REGION( );
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	8f bf       	out	0x3f, r24	; 63
#endif
}
     548:	0f 90       	pop	r0
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	0f 91       	pop	r16
     550:	08 95       	ret

00000552 <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
    uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     552:	68 2b       	or	r22, r24
    CCPWrite( &CLK.PSCTRL, PSconfig );
     554:	81 e4       	ldi	r24, 0x41	; 65
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 94 02 	call	0x528	; 0x528 <CCPWrite>
     55c:	08 95       	ret

0000055e <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	18 2f       	mov	r17, r24
    uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     566:	c0 e4       	ldi	r28, 0x40	; 64
     568:	d0 e0       	ldi	r29, 0x00	; 0
     56a:	68 81       	ld	r22, Y
     56c:	68 7f       	andi	r22, 0xF8	; 248
     56e:	68 2b       	or	r22, r24
    CCPWrite( &CLK.CTRL, clkCtrl );
     570:	80 e4       	ldi	r24, 0x40	; 64
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 94 02 	call	0x528	; 0x528 <CCPWrite>
    clkCtrl = ( CLK.CTRL & clockSource );
     578:	88 81       	ld	r24, Y
    return clkCtrl;
}
     57a:	81 23       	and	r24, r17
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	1f 91       	pop	r17
     582:	08 95       	ret

00000584 <TC0_ConfigClockSource>:
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
    tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
     584:	fc 01       	movw	r30, r24
     586:	20 81       	ld	r18, Z
     588:	20 7f       	andi	r18, 0xF0	; 240
     58a:	62 2b       	or	r22, r18
     58c:	60 83       	st	Z, r22
     58e:	08 95       	ret

00000590 <TC0_ConfigWGM>:
 *  \param tc    Timer/Counter module instance.
 *  \param wgm   Waveform generation mode.
 */
void TC0_ConfigWGM( volatile TC0_t * tc, TC_WGMODE_t wgm )
{
    tc->CTRLB = ( tc->CTRLB & ~TC0_WGMODE_gm ) | wgm;
     590:	fc 01       	movw	r30, r24
     592:	21 81       	ldd	r18, Z+1	; 0x01
     594:	28 7f       	andi	r18, 0xF8	; 248
     596:	62 2b       	or	r22, r18
     598:	61 83       	std	Z+1, r22	; 0x01
     59a:	08 95       	ret

0000059c <TC0_EnableCCChannels>:
{
    /* Make sure only CCxEN bits are set in enableMask. */
    enableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );

    /* Enable channels. */
    tc->CTRLB |= enableMask;
     59c:	fc 01       	movw	r30, r24
     59e:	21 81       	ldd	r18, Z+1	; 0x01
 *  \param enableMask       Mask of channels to enable.
 */
void TC0_EnableCCChannels( volatile TC0_t * tc, uint8_t enableMask )
{
    /* Make sure only CCxEN bits are set in enableMask. */
    enableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );
     5a0:	60 7f       	andi	r22, 0xF0	; 240

    /* Enable channels. */
    tc->CTRLB |= enableMask;
     5a2:	62 2b       	or	r22, r18
     5a4:	61 83       	std	Z+1, r22	; 0x01
     5a6:	08 95       	ret

000005a8 <TC0_DisableCCChannels>:
{
    /* Make sure only CCxEN bits are set in disableMask. */
    disableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );

    /* Disable channels. */
    tc->CTRLB &= ~disableMask;
     5a8:	fc 01       	movw	r30, r24
     5aa:	21 81       	ldd	r18, Z+1	; 0x01
 *  \param disableMask      Mask of channels to disable.
 */
void TC0_DisableCCChannels( volatile TC0_t * tc, uint8_t disableMask )
{
    /* Make sure only CCxEN bits are set in disableMask. */
    disableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );
     5ac:	60 7f       	andi	r22, 0xF0	; 240

    /* Disable channels. */
    tc->CTRLB &= ~disableMask;
     5ae:	60 95       	com	r22
     5b0:	62 23       	and	r22, r18
     5b2:	61 83       	std	Z+1, r22	; 0x01
     5b4:	08 95       	ret

000005b6 <TC0_SetOverflowIntLevel>:
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
    tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     5b6:	fc 01       	movw	r30, r24
     5b8:	26 81       	ldd	r18, Z+6	; 0x06
     5ba:	2c 7f       	andi	r18, 0xFC	; 252
     5bc:	62 2b       	or	r22, r18
     5be:	66 83       	std	Z+6, r22	; 0x06
     5c0:	08 95       	ret

000005c2 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
     5c2:	fc 01       	movw	r30, r24
    uint8_t currentStatus = twi->interface->MASTER.STATUS;
     5c4:	a0 81       	ld	r26, Z
     5c6:	b1 81       	ldd	r27, Z+1	; 0x01
     5c8:	14 96       	adiw	r26, 0x04	; 4
     5ca:	8c 91       	ld	r24, X
     5cc:	14 97       	sbiw	r26, 0x04	; 4

    /* If bus error. */
    if (currentStatus & TWI_MASTER_BUSERR_bm)
     5ce:	82 ff       	sbrs	r24, 2
     5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
    {
        twi->result = TWIM_RESULT_BUS_ERROR;
     5d2:	94 e0       	ldi	r25, 0x04	; 4
     5d4:	92 8b       	std	Z+18, r25	; 0x12
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
    }
    /* If arbitration lost. */
    else
    {
        twi->result = TWIM_RESULT_ARBITRATION_LOST;
     5d8:	93 e0       	ldi	r25, 0x03	; 3
     5da:	92 8b       	std	Z+18, r25	; 0x12
    }

    /* Clear interrupt flag. */
    twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     5dc:	88 60       	ori	r24, 0x08	; 8
     5de:	14 96       	adiw	r26, 0x04	; 4
     5e0:	8c 93       	st	X, r24

    twi->status = TWIM_STATUS_READY;
     5e2:	11 8a       	std	Z+17, r1	; 0x11
     5e4:	08 95       	ret

000005e6 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	fc 01       	movw	r30, r24
    /* Local variables used in if tests to avoid compiler warning. */
    uint8_t bytesToWrite  = twi->bytesToWrite;
     5ec:	95 85       	ldd	r25, Z+13	; 0x0d
    uint8_t bytesToRead   = twi->bytesToRead;
     5ee:	26 85       	ldd	r18, Z+14	; 0x0e

    /* If NOT acknowledged (NACK) by slave cancel the transaction. */
    if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm)
     5f0:	a0 81       	ld	r26, Z
     5f2:	b1 81       	ldd	r27, Z+1	; 0x01
     5f4:	14 96       	adiw	r26, 0x04	; 4
     5f6:	8c 91       	ld	r24, X
     5f8:	14 97       	sbiw	r26, 0x04	; 4
     5fa:	84 ff       	sbrs	r24, 4
     5fc:	07 c0       	rjmp	.+14     	; 0x60c <TWI_MasterWriteHandler+0x26>
    {
        twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	13 96       	adiw	r26, 0x03	; 3
     602:	8c 93       	st	X, r24
        twi->result = TWIM_RESULT_NACK_RECEIVED;
     604:	85 e0       	ldi	r24, 0x05	; 5
     606:	82 8b       	std	Z+18, r24	; 0x12
        twi->status = TWIM_STATUS_READY;
     608:	11 8a       	std	Z+17, r1	; 0x11
     60a:	1c c0       	rjmp	.+56     	; 0x644 <TWI_MasterWriteHandler+0x5e>
    }

    /* If more bytes to write, send data. */
    else if (twi->bytesWritten < bytesToWrite)
     60c:	87 85       	ldd	r24, Z+15	; 0x0f
     60e:	89 17       	cp	r24, r25
     610:	58 f4       	brcc	.+22     	; 0x628 <TWI_MasterWriteHandler+0x42>
    {
        uint8_t data = twi->writeData[twi->bytesWritten];
     612:	87 85       	ldd	r24, Z+15	; 0x0f
     614:	ef 01       	movw	r28, r30
     616:	c8 0f       	add	r28, r24
     618:	d1 1d       	adc	r29, r1
     61a:	8b 81       	ldd	r24, Y+3	; 0x03
        twi->interface->MASTER.DATA = data;
     61c:	17 96       	adiw	r26, 0x07	; 7
     61e:	8c 93       	st	X, r24
        ++twi->bytesWritten;
     620:	87 85       	ldd	r24, Z+15	; 0x0f
     622:	8f 5f       	subi	r24, 0xFF	; 255
     624:	87 87       	std	Z+15, r24	; 0x0f
     626:	0e c0       	rjmp	.+28     	; 0x644 <TWI_MasterWriteHandler+0x5e>
    }

    /* If bytes to read, send repeated START condition + Address +
     * 'R/_W = 1'
     */
    else if (twi->bytesRead < bytesToRead)
     628:	80 89       	ldd	r24, Z+16	; 0x10
     62a:	82 17       	cp	r24, r18
     62c:	28 f4       	brcc	.+10     	; 0x638 <TWI_MasterWriteHandler+0x52>
    {
        uint8_t readAddress = twi->address | 0x01;
     62e:	82 81       	ldd	r24, Z+2	; 0x02
     630:	81 60       	ori	r24, 0x01	; 1
        twi->interface->MASTER.ADDR = readAddress;
     632:	16 96       	adiw	r26, 0x06	; 6
     634:	8c 93       	st	X, r24
     636:	06 c0       	rjmp	.+12     	; 0x644 <TWI_MasterWriteHandler+0x5e>
    }

    /* If transaction finished, send STOP condition and set RESULT OK. */
    else
    {
        twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     638:	83 e0       	ldi	r24, 0x03	; 3
     63a:	13 96       	adiw	r26, 0x03	; 3
     63c:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
    twi->result = result;
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	82 8b       	std	Z+18, r24	; 0x12
    twi->status = TWIM_STATUS_READY;
     642:	11 8a       	std	Z+17, r1	; 0x11
    else
    {
        twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
        TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
    }
}
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
     64a:	fc 01       	movw	r30, r24
    /* Fetch data if bytes to be read. */
    if (twi->bytesRead < TWIM_READ_BUFFER_SIZE)
     64c:	80 89       	ldd	r24, Z+16	; 0x10
     64e:	88 30       	cpi	r24, 0x08	; 8
     650:	70 f4       	brcc	.+28     	; 0x66e <TWI_MasterReadHandler+0x24>
    {
        uint8_t data = twi->interface->MASTER.DATA;
     652:	a0 81       	ld	r26, Z
     654:	b1 81       	ldd	r27, Z+1	; 0x01
     656:	17 96       	adiw	r26, 0x07	; 7
     658:	8c 91       	ld	r24, X
        twi->readData[twi->bytesRead] = data;
     65a:	90 89       	ldd	r25, Z+16	; 0x10
     65c:	df 01       	movw	r26, r30
     65e:	a9 0f       	add	r26, r25
     660:	b1 1d       	adc	r27, r1
     662:	15 96       	adiw	r26, 0x05	; 5
     664:	8c 93       	st	X, r24
        twi->bytesRead++;
     666:	80 89       	ldd	r24, Z+16	; 0x10
     668:	8f 5f       	subi	r24, 0xFF	; 255
     66a:	80 8b       	std	Z+16, r24	; 0x10
     66c:	08 c0       	rjmp	.+16     	; 0x67e <TWI_MasterReadHandler+0x34>
    }

    /* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
    else
    {
        twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     66e:	a0 81       	ld	r26, Z
     670:	b1 81       	ldd	r27, Z+1	; 0x01
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	13 96       	adiw	r26, 0x03	; 3
     676:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
    twi->result = result;
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	82 8b       	std	Z+18, r24	; 0x12
    twi->status = TWIM_STATUS_READY;
     67c:	11 8a       	std	Z+17, r1	; 0x11
        twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
        TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
    }

    /* Local variable used in if test to avoid compiler warning. */
    uint8_t bytesToRead = twi->bytesToRead;
     67e:	96 85       	ldd	r25, Z+14	; 0x0e

    /* If more bytes to read, issue ACK and start a byte read. */
    if (twi->bytesRead < bytesToRead)
     680:	80 89       	ldd	r24, Z+16	; 0x10
     682:	89 17       	cp	r24, r25
     684:	30 f4       	brcc	.+12     	; 0x692 <TWI_MasterReadHandler+0x48>
    {
        twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     686:	01 90       	ld	r0, Z+
     688:	f0 81       	ld	r31, Z
     68a:	e0 2d       	mov	r30, r0
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	83 83       	std	Z+3, r24	; 0x03
     690:	08 95       	ret
    }

    /* If transaction finished, issue NACK and STOP condition. */
    else
    {
        twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
     692:	a0 81       	ld	r26, Z
     694:	b1 81       	ldd	r27, Z+1	; 0x01
     696:	87 e0       	ldi	r24, 0x07	; 7
     698:	13 96       	adiw	r26, 0x03	; 3
     69a:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
    twi->result = result;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	82 8b       	std	Z+18, r24	; 0x12
    twi->status = TWIM_STATUS_READY;
     6a0:	11 8a       	std	Z+17, r1	; 0x11
     6a2:	08 95       	ret

000006a4 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
    uint8_t currentStatus = twi->interface->MASTER.STATUS;
     6a4:	dc 01       	movw	r26, r24
     6a6:	ed 91       	ld	r30, X+
     6a8:	fc 91       	ld	r31, X
     6aa:	24 81       	ldd	r18, Z+4	; 0x04
     6ac:	32 2f       	mov	r19, r18
     6ae:	3c 70       	andi	r19, 0x0C	; 12

    /* If arbitration lost or bus error. */
    if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     6b0:	19 f0       	breq	.+6      	; 0x6b8 <TWI_MasterInterruptHandler+0x14>
            (currentStatus & TWI_MASTER_BUSERR_bm))
    {
        TWI_MasterArbitrationLostBusErrorHandler(twi);
     6b2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <TWI_MasterArbitrationLostBusErrorHandler>
     6b6:	08 95       	ret
    }

    /* If master write interrupt. */
    else if (currentStatus & TWI_MASTER_WIF_bm)
     6b8:	26 ff       	sbrs	r18, 6
     6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <TWI_MasterInterruptHandler+0x1e>
    {
        TWI_MasterWriteHandler(twi);
     6bc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <TWI_MasterWriteHandler>
     6c0:	08 95       	ret
    }

    /* If master read interrupt. */
    else if (currentStatus & TWI_MASTER_RIF_bm)
     6c2:	22 23       	and	r18, r18
     6c4:	1c f4       	brge	.+6      	; 0x6cc <TWI_MasterInterruptHandler+0x28>
    {
        TWI_MasterReadHandler(twi);
     6c6:	0e 94 25 03 	call	0x64a	; 0x64a <TWI_MasterReadHandler>
     6ca:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
    twi->result = result;
     6cc:	26 e0       	ldi	r18, 0x06	; 6
     6ce:	fc 01       	movw	r30, r24
     6d0:	22 8b       	std	Z+18, r18	; 0x12
    twi->status = TWIM_STATUS_READY;
     6d2:	11 8a       	std	Z+17, r1	; 0x11
     6d4:	08 95       	ret

000006d6 <USART_InterruptDriver_Initialize>:
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
    usart_data->usart = usart;
     6d6:	fc 01       	movw	r30, r24
     6d8:	60 83       	st	Z, r22
     6da:	71 83       	std	Z+1, r23	; 0x01
    usart_data->dreIntLevel = dreIntLevel;
     6dc:	42 83       	std	Z+2, r20	; 0x02

    usart_data->buffer.RX_Tail = 0;
     6de:	ec 5b       	subi	r30, 0xBC	; 188
     6e0:	ff 4f       	sbci	r31, 0xFF	; 255
     6e2:	10 82       	st	Z, r1
    usart_data->buffer.RX_Head = 0;
     6e4:	31 97       	sbiw	r30, 0x01	; 1
     6e6:	10 82       	st	Z, r1
    usart_data->buffer.TX_Tail = 0;
     6e8:	33 96       	adiw	r30, 0x03	; 3
     6ea:	10 82       	st	Z, r1
    usart_data->buffer.TX_Head = 0;
     6ec:	31 97       	sbiw	r30, 0x01	; 1
     6ee:	10 82       	st	Z, r1
     6f0:	08 95       	ret

000006f2 <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
    /* Make copies to make sure that volatile access is specified. */
    uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     6f2:	fc 01       	movw	r30, r24
     6f4:	eb 5b       	subi	r30, 0xBB	; 187
     6f6:	ff 4f       	sbci	r31, 0xFF	; 255
     6f8:	20 81       	ld	r18, Z
    uint8_t tempTail = usart_data->buffer.TX_Tail;
     6fa:	31 96       	adiw	r30, 0x01	; 1
     6fc:	90 81       	ld	r25, Z
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
    /* Make copies to make sure that volatile access is specified. */
    uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     6fe:	2f 5f       	subi	r18, 0xFF	; 255
     700:	2f 71       	andi	r18, 0x1F	; 31
    uint8_t tempTail = usart_data->buffer.TX_Tail;

    /* There are data left in the buffer unless Head and Tail are equal. */
    return (tempHead != tempTail);
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	29 13       	cpse	r18, r25
     706:	01 c0       	rjmp	.+2      	; 0x70a <USART_TXBuffer_FreeSpace+0x18>
     708:	80 e0       	ldi	r24, 0x00	; 0
}
     70a:	08 95       	ret

0000070c <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	ec 01       	movw	r28, r24
     714:	16 2f       	mov	r17, r22
    uint8_t tempTX_Head;
    bool TXBuffer_FreeSpace;
    USART_Buffer_t * TXbufPtr;

    TXbufPtr = &usart_data->buffer;
    TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
     716:	0e 94 79 03 	call	0x6f2	; 0x6f2 <USART_TXBuffer_FreeSpace>


    if(TXBuffer_FreeSpace)
     71a:	88 23       	and	r24, r24
     71c:	99 f0       	breq	.+38     	; 0x744 <USART_TXBuffer_PutByte+0x38>
    {
        tempTX_Head = TXbufPtr->TX_Head;
     71e:	fe 01       	movw	r30, r28
     720:	eb 5b       	subi	r30, 0xBB	; 187
     722:	ff 4f       	sbci	r31, 0xFF	; 255
     724:	90 81       	ld	r25, Z
        TXbufPtr->TX[tempTX_Head]= data;
     726:	de 01       	movw	r26, r28
     728:	a9 0f       	add	r26, r25
     72a:	b1 1d       	adc	r27, r1
     72c:	93 96       	adiw	r26, 0x23	; 35
     72e:	1c 93       	st	X, r17
        /* Advance buffer head. */
        TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
     730:	9f 5f       	subi	r25, 0xFF	; 255
     732:	9f 71       	andi	r25, 0x1F	; 31
     734:	90 83       	st	Z, r25

        /* Enable DRE interrupt. */
        tempCTRLA = usart_data->usart->CTRLA;
     736:	e8 81       	ld	r30, Y
     738:	f9 81       	ldd	r31, Y+1	; 0x01
     73a:	93 81       	ldd	r25, Z+3	; 0x03
        tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
     73c:	9c 7f       	andi	r25, 0xFC	; 252
     73e:	2a 81       	ldd	r18, Y+2	; 0x02
     740:	92 2b       	or	r25, r18
        usart_data->usart->CTRLA = tempCTRLA;
     742:	93 83       	std	Z+3, r25	; 0x03
    }
    return TXBuffer_FreeSpace;
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	08 95       	ret

0000074c <USART_RXComplete>:
    USART_Buffer_t * bufPtr;
    bool ans;

    bufPtr = &usart_data->buffer;
    /* Advance buffer head. */
    uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     74c:	fc 01       	movw	r30, r24
     74e:	ed 5b       	subi	r30, 0xBD	; 189
     750:	ff 4f       	sbci	r31, 0xFF	; 255
     752:	20 81       	ld	r18, Z
     754:	2f 5f       	subi	r18, 0xFF	; 255
     756:	2f 71       	andi	r18, 0x1F	; 31

    /* Check for overflow. */
    uint8_t tempRX_Tail = bufPtr->RX_Tail;
     758:	31 96       	adiw	r30, 0x01	; 1
     75a:	30 81       	ld	r19, Z
    uint8_t data = usart_data->usart->DATA;
     75c:	dc 01       	movw	r26, r24
     75e:	ed 91       	ld	r30, X+
     760:	fc 91       	ld	r31, X
     762:	11 97       	sbiw	r26, 0x01	; 1
     764:	40 81       	ld	r20, Z

    if (tempRX_Head == tempRX_Tail)
     766:	23 17       	cp	r18, r19
     768:	59 f0       	breq	.+22     	; 0x780 <USART_RXComplete+0x34>
        ans = false;
    }
    else
    {
        ans = true;
        usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     76a:	fc 01       	movw	r30, r24
     76c:	ed 5b       	subi	r30, 0xBD	; 189
     76e:	ff 4f       	sbci	r31, 0xFF	; 255
     770:	30 81       	ld	r19, Z
     772:	a3 0f       	add	r26, r19
     774:	b1 1d       	adc	r27, r1
     776:	13 96       	adiw	r26, 0x03	; 3
     778:	4c 93       	st	X, r20
        usart_data->buffer.RX_Head = tempRX_Head;
     77a:	20 83       	st	Z, r18
    {
        ans = false;
    }
    else
    {
        ans = true;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	08 95       	ret
    uint8_t tempRX_Tail = bufPtr->RX_Tail;
    uint8_t data = usart_data->usart->DATA;

    if (tempRX_Head == tempRX_Tail)
    {
        ans = false;
     780:	80 e0       	ldi	r24, 0x00	; 0
        ans = true;
        usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
        usart_data->buffer.RX_Head = tempRX_Head;
    }
    return ans;
}
     782:	08 95       	ret

00000784 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
    USART_Buffer_t * bufPtr;
    bufPtr = &usart_data->buffer;

    /* Check if all data is transmitted. */
    uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
     788:	fc 01       	movw	r30, r24
     78a:	ea 5b       	subi	r30, 0xBA	; 186
     78c:	ff 4f       	sbci	r31, 0xFF	; 255
     78e:	20 81       	ld	r18, Z
    if (bufPtr->TX_Head == tempTX_Tail)
     790:	31 97       	sbiw	r30, 0x01	; 1
     792:	30 81       	ld	r19, Z
     794:	32 13       	cpse	r19, r18
     796:	07 c0       	rjmp	.+14     	; 0x7a6 <USART_DataRegEmpty+0x22>
    {
        /* Disable DRE interrupts. */
        uint8_t tempCTRLA = usart_data->usart->CTRLA;
     798:	dc 01       	movw	r26, r24
     79a:	ed 91       	ld	r30, X+
     79c:	fc 91       	ld	r31, X
     79e:	83 81       	ldd	r24, Z+3	; 0x03
        tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     7a0:	8c 7f       	andi	r24, 0xFC	; 252
        usart_data->usart->CTRLA = tempCTRLA;
     7a2:	83 83       	std	Z+3, r24	; 0x03
     7a4:	11 c0       	rjmp	.+34     	; 0x7c8 <USART_DataRegEmpty+0x44>
    }
    else
    {
        /* Start transmitting. */
        uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
     7a6:	fc 01       	movw	r30, r24
     7a8:	ea 5b       	subi	r30, 0xBA	; 186
     7aa:	ff 4f       	sbci	r31, 0xFF	; 255
     7ac:	20 81       	ld	r18, Z
     7ae:	dc 01       	movw	r26, r24
     7b0:	a2 0f       	add	r26, r18
     7b2:	b1 1d       	adc	r27, r1
     7b4:	93 96       	adiw	r26, 0x23	; 35
     7b6:	2c 91       	ld	r18, X
        usart_data->usart->DATA = data;
     7b8:	ec 01       	movw	r28, r24
     7ba:	a8 81       	ld	r26, Y
     7bc:	b9 81       	ldd	r27, Y+1	; 0x01
     7be:	2c 93       	st	X, r18

        /* Advance buffer tail. */
        bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
     7c0:	80 81       	ld	r24, Z
     7c2:	8f 5f       	subi	r24, 0xFF	; 255
     7c4:	8f 71       	andi	r24, 0x1F	; 31
     7c6:	80 83       	st	Z, r24
    }
}
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	08 95       	ret

000007ce <__vector_46>:
    gyro_zero[2] = ((twiMaster.readData[6]<<8)|twiMaster.readData[5]);
}

/*! TWIC Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
     7ce:	1f 92       	push	r1
     7d0:	0f 92       	push	r0
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	0f 92       	push	r0
     7d6:	11 24       	eor	r1, r1
     7d8:	2f 93       	push	r18
     7da:	3f 93       	push	r19
     7dc:	4f 93       	push	r20
     7de:	5f 93       	push	r21
     7e0:	6f 93       	push	r22
     7e2:	7f 93       	push	r23
     7e4:	8f 93       	push	r24
     7e6:	9f 93       	push	r25
     7e8:	af 93       	push	r26
     7ea:	bf 93       	push	r27
     7ec:	ef 93       	push	r30
     7ee:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twiMaster);
     7f0:	88 e8       	ldi	r24, 0x88	; 136
     7f2:	90 e2       	ldi	r25, 0x20	; 32
     7f4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <TWI_MasterInterruptHandler>
}
     7f8:	ff 91       	pop	r31
     7fa:	ef 91       	pop	r30
     7fc:	bf 91       	pop	r27
     7fe:	af 91       	pop	r26
     800:	9f 91       	pop	r25
     802:	8f 91       	pop	r24
     804:	7f 91       	pop	r23
     806:	6f 91       	pop	r22
     808:	5f 91       	pop	r21
     80a:	4f 91       	pop	r20
     80c:	3f 91       	pop	r19
     80e:	2f 91       	pop	r18
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	0f 90       	pop	r0
     816:	1f 90       	pop	r1
     818:	18 95       	reti

0000081a <motor_init>:

#include "motor.h"
#include <util/delay.h>

void motor_init(void)
{
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
    // Set motor pins as output and set them low
    PORT_SetPinsAsOutput(&MOTOR_PORT,MOTOR_PINMASK);
     81e:	e0 e6       	ldi	r30, 0x60	; 96
     820:	f6 e0       	ldi	r31, 0x06	; 6
     822:	8f e0       	ldi	r24, 0x0F	; 15
     824:	81 83       	std	Z+1, r24	; 0x01
    PORT_ClearPins(&MOTOR_PORT,MOTOR_PINMASK);
     826:	86 83       	std	Z+6, r24	; 0x06

    // Configure PORTD Timer 0 as Single Slope PWM source 32kHz
    TC_SetPeriod(&MOTOR_TIMER,1000);
     828:	c0 e0       	ldi	r28, 0x00	; 0
     82a:	d9 e0       	ldi	r29, 0x09	; 9
     82c:	88 ee       	ldi	r24, 0xE8	; 232
     82e:	93 e0       	ldi	r25, 0x03	; 3
     830:	8e a3       	std	Y+38, r24	; 0x26
     832:	9f a3       	std	Y+39, r25	; 0x27
    TC0_ConfigWGM(&MOTOR_TIMER,TC_WGMODE_SS_gc);
     834:	63 e0       	ldi	r22, 0x03	; 3
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	99 e0       	ldi	r25, 0x09	; 9
     83a:	0e 94 c8 02 	call	0x590	; 0x590 <TC0_ConfigWGM>
    TC0_DisableCCChannels(&MOTOR_TIMER,(TC0_CCAEN_bm|TC0_CCBEN_bm|TC0_CCCEN_bm|TC0_CCDEN_bm));
     83e:	60 ef       	ldi	r22, 0xF0	; 240
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	99 e0       	ldi	r25, 0x09	; 9
     844:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
    TC0_ConfigClockSource(&MOTOR_TIMER,TC_CLKSEL_DIV1_gc);
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	99 e0       	ldi	r25, 0x09	; 9
     84e:	0e 94 c2 02 	call	0x584	; 0x584 <TC0_ConfigClockSource>

    TC_SetCompareA (&MOTOR_TIMER,0);
     852:	18 ae       	std	Y+56, r1	; 0x38
     854:	19 ae       	std	Y+57, r1	; 0x39
    TC_SetCompareB (&MOTOR_TIMER,0);
     856:	1a ae       	std	Y+58, r1	; 0x3a
     858:	1b ae       	std	Y+59, r1	; 0x3b
    TC_SetCompareC (&MOTOR_TIMER,0);
     85a:	1c ae       	std	Y+60, r1	; 0x3c
     85c:	1d ae       	std	Y+61, r1	; 0x3d
    TC_SetCompareD (&MOTOR_TIMER,0);
     85e:	10 92 3e 09 	sts	0x093E, r1
     862:	10 92 3f 09 	sts	0x093F, r1
	
	PORTR.DIRSET = 3;
     866:	e0 ee       	ldi	r30, 0xE0	; 224
     868:	f7 e0       	ldi	r31, 0x07	; 7
     86a:	83 e0       	ldi	r24, 0x03	; 3
     86c:	81 83       	std	Z+1, r24	; 0x01
	PORTR.OUTCLR = 3;
     86e:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     870:	8f e3       	ldi	r24, 0x3F	; 63
     872:	9f e1       	ldi	r25, 0x1F	; 31
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	f1 f7       	brne	.-4      	; 0x874 <motor_init+0x5a>
     878:	00 c0       	rjmp	.+0      	; 0x87a <motor_init+0x60>
     87a:	00 00       	nop
	_delay_ms(1);
	PORTR.OUTSET = 3;
     87c:	83 e0       	ldi	r24, 0x03	; 3
     87e:	85 83       	std	Z+5, r24	; 0x05
}
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <motor_right_set>:

    PORTC.PIN4CTRL |= PORT_INVEN_bm;
}

void motor_right_set(int16_t right)
{
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	ec 01       	movw	r28, r24
    if(right > 0)
     88c:	18 16       	cp	r1, r24
     88e:	19 06       	cpc	r1, r25
     890:	c4 f4       	brge	.+48     	; 0x8c2 <motor_right_set+0x3c>
    {
        // PWM to AIN1, AIN2 high
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCCEN_bm);
     892:	60 e4       	ldi	r22, 0x40	; 64
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	99 e0       	ldi	r25, 0x09	; 9
     898:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        TC0_EnableCCChannels(&MOTOR_TIMER,TC0_CCDEN_bm);
     89c:	60 e8       	ldi	r22, 0x80	; 128
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	99 e0       	ldi	r25, 0x09	; 9
     8a2:	0e 94 ce 02 	call	0x59c	; 0x59c <TC0_EnableCCChannels>

        PORT_SetOutputBit(&MOTOR_PORT,AIN2);
     8a6:	e0 e6       	ldi	r30, 0x60	; 96
     8a8:	f6 e0       	ldi	r31, 0x06	; 6
     8aa:	84 81       	ldd	r24, Z+4	; 0x04
     8ac:	84 60       	ori	r24, 0x04	; 4
     8ae:	84 83       	std	Z+4, r24	; 0x04
        TC_SetCompareD (&MOTOR_TIMER,1001-right);
     8b0:	89 ee       	ldi	r24, 0xE9	; 233
     8b2:	93 e0       	ldi	r25, 0x03	; 3
     8b4:	8c 1b       	sub	r24, r28
     8b6:	9d 0b       	sbc	r25, r29
     8b8:	80 93 3e 09 	sts	0x093E, r24
     8bc:	90 93 3f 09 	sts	0x093F, r25
     8c0:	21 c0       	rjmp	.+66     	; 0x904 <motor_right_set+0x7e>
    }
    else if (right < 0)
     8c2:	99 23       	and	r25, r25
     8c4:	b4 f4       	brge	.+44     	; 0x8f2 <motor_right_set+0x6c>
    {
        // PWM to AIN2, AIN1 high
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCDEN_bm);
     8c6:	60 e8       	ldi	r22, 0x80	; 128
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	99 e0       	ldi	r25, 0x09	; 9
     8cc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        TC0_EnableCCChannels(&MOTOR_TIMER,TC0_CCCEN_bm);
     8d0:	60 e4       	ldi	r22, 0x40	; 64
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	99 e0       	ldi	r25, 0x09	; 9
     8d6:	0e 94 ce 02 	call	0x59c	; 0x59c <TC0_EnableCCChannels>

        PORT_SetOutputBit(&MOTOR_PORT,AIN1);
     8da:	e0 e6       	ldi	r30, 0x60	; 96
     8dc:	f6 e0       	ldi	r31, 0x06	; 6
     8de:	84 81       	ldd	r24, Z+4	; 0x04
     8e0:	88 60       	ori	r24, 0x08	; 8
     8e2:	84 83       	std	Z+4, r24	; 0x04
        TC_SetCompareC (&MOTOR_TIMER,1001+right);
     8e4:	c7 51       	subi	r28, 0x17	; 23
     8e6:	dc 4f       	sbci	r29, 0xFC	; 252
     8e8:	e0 e0       	ldi	r30, 0x00	; 0
     8ea:	f9 e0       	ldi	r31, 0x09	; 9
     8ec:	c4 af       	std	Z+60, r28	; 0x3c
     8ee:	d5 af       	std	Z+61, r29	; 0x3d
     8f0:	09 c0       	rjmp	.+18     	; 0x904 <motor_right_set+0x7e>
    }
    else
    {
        // Pins LOW (coast)
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCCEN_bm|TC0_CCDEN_bm);
     8f2:	60 ec       	ldi	r22, 0xC0	; 192
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	99 e0       	ldi	r25, 0x09	; 9
     8f8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        PORT_SetPins(&MOTOR_PORT,(1<<AIN1)|(1<<AIN2));
     8fc:	8c e0       	ldi	r24, 0x0C	; 12
     8fe:	e0 e6       	ldi	r30, 0x60	; 96
     900:	f6 e0       	ldi	r31, 0x06	; 6
     902:	85 83       	std	Z+5, r24	; 0x05
    }
}
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <motor_left_set>:

void motor_left_set(int16_t left)
{
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	ec 01       	movw	r28, r24
    if(left > 0)
     910:	18 16       	cp	r1, r24
     912:	19 06       	cpc	r1, r25
     914:	c4 f4       	brge	.+48     	; 0x946 <motor_left_set+0x3c>
    {
        // PWM to BIN1, BIN2 low
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCBEN_bm);
     916:	60 e2       	ldi	r22, 0x20	; 32
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	99 e0       	ldi	r25, 0x09	; 9
     91c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        TC0_EnableCCChannels(&MOTOR_TIMER,TC0_CCAEN_bm);
     920:	60 e1       	ldi	r22, 0x10	; 16
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	99 e0       	ldi	r25, 0x09	; 9
     926:	0e 94 ce 02 	call	0x59c	; 0x59c <TC0_EnableCCChannels>

        PORT_SetOutputBit(&MOTOR_PORT,BIN2);
     92a:	e0 e6       	ldi	r30, 0x60	; 96
     92c:	f6 e0       	ldi	r31, 0x06	; 6
     92e:	84 81       	ldd	r24, Z+4	; 0x04
     930:	82 60       	ori	r24, 0x02	; 2
     932:	84 83       	std	Z+4, r24	; 0x04
        TC_SetCompareA (&MOTOR_TIMER,1001-left);
     934:	89 ee       	ldi	r24, 0xE9	; 233
     936:	93 e0       	ldi	r25, 0x03	; 3
     938:	8c 1b       	sub	r24, r28
     93a:	9d 0b       	sbc	r25, r29
     93c:	e0 e0       	ldi	r30, 0x00	; 0
     93e:	f9 e0       	ldi	r31, 0x09	; 9
     940:	80 af       	std	Z+56, r24	; 0x38
     942:	91 af       	std	Z+57, r25	; 0x39
     944:	21 c0       	rjmp	.+66     	; 0x988 <motor_left_set+0x7e>
    }
    else if (left < 0)
     946:	99 23       	and	r25, r25
     948:	b4 f4       	brge	.+44     	; 0x976 <motor_left_set+0x6c>
    {
        // PWM to BIN2, BIN1 low
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCAEN_bm);
     94a:	60 e1       	ldi	r22, 0x10	; 16
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	99 e0       	ldi	r25, 0x09	; 9
     950:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        TC0_EnableCCChannels(&MOTOR_TIMER,TC0_CCBEN_bm);
     954:	60 e2       	ldi	r22, 0x20	; 32
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	99 e0       	ldi	r25, 0x09	; 9
     95a:	0e 94 ce 02 	call	0x59c	; 0x59c <TC0_EnableCCChannels>

        PORT_SetOutputBit(&MOTOR_PORT,BIN1);
     95e:	e0 e6       	ldi	r30, 0x60	; 96
     960:	f6 e0       	ldi	r31, 0x06	; 6
     962:	84 81       	ldd	r24, Z+4	; 0x04
     964:	81 60       	ori	r24, 0x01	; 1
     966:	84 83       	std	Z+4, r24	; 0x04
        TC_SetCompareB (&MOTOR_TIMER,1001+left);
     968:	c7 51       	subi	r28, 0x17	; 23
     96a:	dc 4f       	sbci	r29, 0xFC	; 252
     96c:	e0 e0       	ldi	r30, 0x00	; 0
     96e:	f9 e0       	ldi	r31, 0x09	; 9
     970:	c2 af       	std	Z+58, r28	; 0x3a
     972:	d3 af       	std	Z+59, r29	; 0x3b
     974:	09 c0       	rjmp	.+18     	; 0x988 <motor_left_set+0x7e>
    }
    else
    {
        // Pins LOW (coast)
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCAEN_bm|TC0_CCBEN_bm);
     976:	60 e3       	ldi	r22, 0x30	; 48
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	99 e0       	ldi	r25, 0x09	; 9
     97c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        PORT_SetPins(&MOTOR_PORT,(1<<BIN1)|(1<<BIN2));
     980:	83 e0       	ldi	r24, 0x03	; 3
     982:	e0 e6       	ldi	r30, 0x60	; 96
     984:	f6 e0       	ldi	r31, 0x06	; 6
     986:	85 83       	std	Z+5, r24	; 0x05
    }
}
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	08 95       	ret

0000098e <motor_set>:

void motor_set(int16_t left, int16_t right)
{
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	8c 01       	movw	r16, r24
     998:	eb 01       	movw	r28, r22
    if(right > 0)
     99a:	1c 16       	cp	r1, r28
     99c:	1d 06       	cpc	r1, r29
     99e:	c4 f4       	brge	.+48     	; 0x9d0 <motor_set+0x42>
    {
        // PWM to AIN1, AIN2 high
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCCEN_bm);
     9a0:	60 e4       	ldi	r22, 0x40	; 64
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	99 e0       	ldi	r25, 0x09	; 9
     9a6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        TC0_EnableCCChannels(&MOTOR_TIMER,TC0_CCDEN_bm);
     9aa:	60 e8       	ldi	r22, 0x80	; 128
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	99 e0       	ldi	r25, 0x09	; 9
     9b0:	0e 94 ce 02 	call	0x59c	; 0x59c <TC0_EnableCCChannels>

        PORT_SetOutputBit(&MOTOR_PORT,AIN2);
     9b4:	e0 e6       	ldi	r30, 0x60	; 96
     9b6:	f6 e0       	ldi	r31, 0x06	; 6
     9b8:	84 81       	ldd	r24, Z+4	; 0x04
     9ba:	84 60       	ori	r24, 0x04	; 4
     9bc:	84 83       	std	Z+4, r24	; 0x04
        TC_SetCompareD (&MOTOR_TIMER,1001-right);
     9be:	89 ee       	ldi	r24, 0xE9	; 233
     9c0:	93 e0       	ldi	r25, 0x03	; 3
     9c2:	8c 1b       	sub	r24, r28
     9c4:	9d 0b       	sbc	r25, r29
     9c6:	80 93 3e 09 	sts	0x093E, r24
     9ca:	90 93 3f 09 	sts	0x093F, r25
     9ce:	21 c0       	rjmp	.+66     	; 0xa12 <motor_set+0x84>
    }
    else if (right < 0)
     9d0:	dd 23       	and	r29, r29
     9d2:	b4 f4       	brge	.+44     	; 0xa00 <motor_set+0x72>
    {
        // PWM to AIN2, AIN1 high
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCDEN_bm);
     9d4:	60 e8       	ldi	r22, 0x80	; 128
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	99 e0       	ldi	r25, 0x09	; 9
     9da:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        TC0_EnableCCChannels(&MOTOR_TIMER,TC0_CCCEN_bm);
     9de:	60 e4       	ldi	r22, 0x40	; 64
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	99 e0       	ldi	r25, 0x09	; 9
     9e4:	0e 94 ce 02 	call	0x59c	; 0x59c <TC0_EnableCCChannels>

        PORT_SetOutputBit(&MOTOR_PORT,AIN1);
     9e8:	e0 e6       	ldi	r30, 0x60	; 96
     9ea:	f6 e0       	ldi	r31, 0x06	; 6
     9ec:	84 81       	ldd	r24, Z+4	; 0x04
     9ee:	88 60       	ori	r24, 0x08	; 8
     9f0:	84 83       	std	Z+4, r24	; 0x04
        TC_SetCompareC (&MOTOR_TIMER,1001+right);
     9f2:	c7 51       	subi	r28, 0x17	; 23
     9f4:	dc 4f       	sbci	r29, 0xFC	; 252
     9f6:	e0 e0       	ldi	r30, 0x00	; 0
     9f8:	f9 e0       	ldi	r31, 0x09	; 9
     9fa:	c4 af       	std	Z+60, r28	; 0x3c
     9fc:	d5 af       	std	Z+61, r29	; 0x3d
     9fe:	09 c0       	rjmp	.+18     	; 0xa12 <motor_set+0x84>
    }
    else
    {
        // Pins LOW (coast)
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCCEN_bm|TC0_CCDEN_bm);
     a00:	60 ec       	ldi	r22, 0xC0	; 192
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	99 e0       	ldi	r25, 0x09	; 9
     a06:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        PORT_SetPins(&MOTOR_PORT,(1<<AIN1)|(1<<AIN2));
     a0a:	8c e0       	ldi	r24, 0x0C	; 12
     a0c:	e0 e6       	ldi	r30, 0x60	; 96
     a0e:	f6 e0       	ldi	r31, 0x06	; 6
     a10:	85 83       	std	Z+5, r24	; 0x05
    }

    if(left > 0)
     a12:	10 16       	cp	r1, r16
     a14:	11 06       	cpc	r1, r17
     a16:	c4 f4       	brge	.+48     	; 0xa48 <motor_set+0xba>
    {
        // PWM to BIN1, BIN2 low
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCBEN_bm);
     a18:	60 e2       	ldi	r22, 0x20	; 32
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	99 e0       	ldi	r25, 0x09	; 9
     a1e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        TC0_EnableCCChannels(&MOTOR_TIMER,TC0_CCAEN_bm);
     a22:	60 e1       	ldi	r22, 0x10	; 16
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	99 e0       	ldi	r25, 0x09	; 9
     a28:	0e 94 ce 02 	call	0x59c	; 0x59c <TC0_EnableCCChannels>

        PORT_SetOutputBit(&MOTOR_PORT,BIN2);
     a2c:	e0 e6       	ldi	r30, 0x60	; 96
     a2e:	f6 e0       	ldi	r31, 0x06	; 6
     a30:	84 81       	ldd	r24, Z+4	; 0x04
     a32:	82 60       	ori	r24, 0x02	; 2
     a34:	84 83       	std	Z+4, r24	; 0x04
        TC_SetCompareA (&MOTOR_TIMER,1001-left);
     a36:	89 ee       	ldi	r24, 0xE9	; 233
     a38:	93 e0       	ldi	r25, 0x03	; 3
     a3a:	80 1b       	sub	r24, r16
     a3c:	91 0b       	sbc	r25, r17
     a3e:	e0 e0       	ldi	r30, 0x00	; 0
     a40:	f9 e0       	ldi	r31, 0x09	; 9
     a42:	80 af       	std	Z+56, r24	; 0x38
     a44:	91 af       	std	Z+57, r25	; 0x39
     a46:	21 c0       	rjmp	.+66     	; 0xa8a <motor_set+0xfc>
    }
    else if (left < 0)
     a48:	11 23       	and	r17, r17
     a4a:	b4 f4       	brge	.+44     	; 0xa78 <motor_set+0xea>
    {
        // PWM to BIN2, BIN1 low
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCAEN_bm);
     a4c:	60 e1       	ldi	r22, 0x10	; 16
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	99 e0       	ldi	r25, 0x09	; 9
     a52:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        TC0_EnableCCChannels(&MOTOR_TIMER,TC0_CCBEN_bm);
     a56:	60 e2       	ldi	r22, 0x20	; 32
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	99 e0       	ldi	r25, 0x09	; 9
     a5c:	0e 94 ce 02 	call	0x59c	; 0x59c <TC0_EnableCCChannels>

        PORT_SetOutputBit(&MOTOR_PORT,BIN1);
     a60:	e0 e6       	ldi	r30, 0x60	; 96
     a62:	f6 e0       	ldi	r31, 0x06	; 6
     a64:	84 81       	ldd	r24, Z+4	; 0x04
     a66:	81 60       	ori	r24, 0x01	; 1
     a68:	84 83       	std	Z+4, r24	; 0x04
        TC_SetCompareB (&MOTOR_TIMER,1001+left);
     a6a:	07 51       	subi	r16, 0x17	; 23
     a6c:	1c 4f       	sbci	r17, 0xFC	; 252
     a6e:	e0 e0       	ldi	r30, 0x00	; 0
     a70:	f9 e0       	ldi	r31, 0x09	; 9
     a72:	02 af       	std	Z+58, r16	; 0x3a
     a74:	13 af       	std	Z+59, r17	; 0x3b
     a76:	09 c0       	rjmp	.+18     	; 0xa8a <motor_set+0xfc>
    }
    else
    {
        // Pins LOW (coast)
        TC0_DisableCCChannels(&MOTOR_TIMER,TC0_CCAEN_bm|TC0_CCBEN_bm);
     a78:	60 e3       	ldi	r22, 0x30	; 48
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	99 e0       	ldi	r25, 0x09	; 9
     a7e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TC0_DisableCCChannels>
        PORT_SetPins(&MOTOR_PORT,(1<<BIN1)|(1<<BIN2));
     a82:	83 e0       	ldi	r24, 0x03	; 3
     a84:	e0 e6       	ldi	r30, 0x60	; 96
     a86:	f6 e0       	ldi	r31, 0x06	; 6
     a88:	85 83       	std	Z+5, r24	; 0x05
    }
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	08 95       	ret

00000a94 <delay_ms>:
int front_right_sens= 3;
int right_sens = 5;
int right_diag_sens = 2;
			
void delay_ms(uint16_t count) {
	while(count--) {
     a94:	00 97       	sbiw	r24, 0x00	; 0
     a96:	49 f0       	breq	.+18     	; 0xaaa <delay_ms+0x16>
     a98:	ef e3       	ldi	r30, 0x3F	; 63
     a9a:	ff e1       	ldi	r31, 0x1F	; 31
     a9c:	31 97       	sbiw	r30, 0x01	; 1
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <delay_ms+0x8>
     aa0:	00 c0       	rjmp	.+0      	; 0xaa2 <delay_ms+0xe>
     aa2:	00 00       	nop
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	00 97       	sbiw	r24, 0x00	; 0
     aa8:	b9 f7       	brne	.-18     	; 0xa98 <delay_ms+0x4>
     aaa:	08 95       	ret

00000aac <turn_right_and_back>:
}

void turn_right_and_back() {
	int turn_time = 350;
	int16_t turn_speed = 1000;
	motor_left_set(turn_speed);
     aac:	88 ee       	ldi	r24, 0xE8	; 232
     aae:	93 e0       	ldi	r25, 0x03	; 3
     ab0:	0e 94 85 04 	call	0x90a	; 0x90a <motor_left_set>
	delay_ms(turn_time);
     ab4:	8e e5       	ldi	r24, 0x5E	; 94
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	0e 94 4a 05 	call	0xa94	; 0xa94 <delay_ms>
	motor_left_set(0);
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 85 04 	call	0x90a	; 0x90a <motor_left_set>
	delay_ms(turn_time);
     ac4:	8e e5       	ldi	r24, 0x5E	; 94
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	0e 94 4a 05 	call	0xa94	; 0xa94 <delay_ms>
	motor_left_set(-turn_speed);
     acc:	88 e1       	ldi	r24, 0x18	; 24
     ace:	9c ef       	ldi	r25, 0xFC	; 252
     ad0:	0e 94 85 04 	call	0x90a	; 0x90a <motor_left_set>
	delay_ms(turn_time);
     ad4:	8e e5       	ldi	r24, 0x5E	; 94
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	0e 94 4a 05 	call	0xa94	; 0xa94 <delay_ms>
	motor_left_set(0);
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 85 04 	call	0x90a	; 0x90a <motor_left_set>
     ae4:	08 95       	ret

00000ae6 <turn_left_and_back>:

}

void turn_left_and_back() {
	int16_t turn_speed = 1000;
	motor_right_set(turn_speed);
     ae6:	88 ee       	ldi	r24, 0xE8	; 232
     ae8:	93 e0       	ldi	r25, 0x03	; 3
     aea:	0e 94 43 04 	call	0x886	; 0x886 <motor_right_set>
	delay_ms(Turn_time);
     aee:	8e e5       	ldi	r24, 0x5E	; 94
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	0e 94 4a 05 	call	0xa94	; 0xa94 <delay_ms>
	motor_right_set(0);
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 43 04 	call	0x886	; 0x886 <motor_right_set>
	delay_ms(Turn_time);
     afe:	8e e5       	ldi	r24, 0x5E	; 94
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	0e 94 4a 05 	call	0xa94	; 0xa94 <delay_ms>
	motor_right_set(-turn_speed);
     b06:	88 e1       	ldi	r24, 0x18	; 24
     b08:	9c ef       	ldi	r25, 0xFC	; 252
     b0a:	0e 94 43 04 	call	0x886	; 0x886 <motor_right_set>
	delay_ms(Turn_time);
     b0e:	8e e5       	ldi	r24, 0x5E	; 94
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	0e 94 4a 05 	call	0xa94	; 0xa94 <delay_ms>
	motor_right_set(0);
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 43 04 	call	0x886	; 0x886 <motor_right_set>
     b1e:	08 95       	ret

00000b20 <turn_around>:
}

void turn_around(int right) {
	int16_t turn_speed = 1000;
	if (right) {
     b20:	89 2b       	or	r24, r25
     b22:	39 f0       	breq	.+14     	; 0xb32 <turn_around+0x12>
		motor_set(turn_speed, -turn_speed);
     b24:	68 e1       	ldi	r22, 0x18	; 24
     b26:	7c ef       	ldi	r23, 0xFC	; 252
     b28:	88 ee       	ldi	r24, 0xE8	; 232
     b2a:	93 e0       	ldi	r25, 0x03	; 3
     b2c:	0e 94 c7 04 	call	0x98e	; 0x98e <motor_set>
     b30:	06 c0       	rjmp	.+12     	; 0xb3e <turn_around+0x1e>
		} else {
		motor_set(-turn_speed, turn_speed);
     b32:	68 ee       	ldi	r22, 0xE8	; 232
     b34:	73 e0       	ldi	r23, 0x03	; 3
     b36:	88 e1       	ldi	r24, 0x18	; 24
     b38:	9c ef       	ldi	r25, 0xFC	; 252
     b3a:	0e 94 c7 04 	call	0x98e	; 0x98e <motor_set>
	}
	delay_ms(350);
     b3e:	8e e5       	ldi	r24, 0x5E	; 94
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	0e 94 4a 05 	call	0xa94	; 0xa94 <delay_ms>
	motor_set(0, 0);
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 c7 04 	call	0x98e	; 0x98e <motor_set>
     b52:	08 95       	ret

00000b54 <straight>:
	
}

void straight(int move_time) {
     b54:	cf 92       	push	r12
     b56:	df 92       	push	r13
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	ec 01       	movw	r28, r24
	int16_t move_speed = 700;
	int count = move_time;
	while (count) {
     b66:	00 97       	sbiw	r24, 0x00	; 0
     b68:	71 f1       	breq	.+92     	; 0xbc6 <straight+0x72>
		count -= 10;
		motor_set(move_speed, move_speed);
		delay_ms(10);
		int error = adc_read(left_diag_sens) - adc_read(right_diag_sens);
     b6a:	0f 2e       	mov	r0, r31
     b6c:	f6 e0       	ldi	r31, 0x06	; 6
     b6e:	cf 2e       	mov	r12, r31
     b70:	f0 e2       	ldi	r31, 0x20	; 32
     b72:	df 2e       	mov	r13, r31
     b74:	f0 2d       	mov	r31, r0
     b76:	0f 2e       	mov	r0, r31
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	ef 2e       	mov	r14, r31
     b7c:	f0 e2       	ldi	r31, 0x20	; 32
     b7e:	ff 2e       	mov	r15, r31
     b80:	f0 2d       	mov	r31, r0

void straight(int move_time) {
	int16_t move_speed = 700;
	int count = move_time;
	while (count) {
		count -= 10;
     b82:	2a 97       	sbiw	r28, 0x0a	; 10
		motor_set(move_speed, move_speed);
     b84:	6c eb       	ldi	r22, 0xBC	; 188
     b86:	72 e0       	ldi	r23, 0x02	; 2
     b88:	8c eb       	ldi	r24, 0xBC	; 188
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	0e 94 c7 04 	call	0x98e	; 0x98e <motor_set>
		delay_ms(10);
     b90:	8a e0       	ldi	r24, 0x0A	; 10
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 4a 05 	call	0xa94	; 0xa94 <delay_ms>
		int error = adc_read(left_diag_sens) - adc_read(right_diag_sens);
     b98:	f6 01       	movw	r30, r12
     b9a:	80 81       	ld	r24, Z
     b9c:	0e 94 49 01 	call	0x292	; 0x292 <adc_read>
     ba0:	8c 01       	movw	r16, r24
     ba2:	f7 01       	movw	r30, r14
     ba4:	80 81       	ld	r24, Z
     ba6:	0e 94 49 01 	call	0x292	; 0x292 <adc_read>
     baa:	98 01       	movw	r18, r16
     bac:	28 1b       	sub	r18, r24
     bae:	39 0b       	sbc	r19, r25
		int right = move_speed + error;
     bb0:	b9 01       	movw	r22, r18
     bb2:	64 54       	subi	r22, 0x44	; 68
     bb4:	7d 4f       	sbci	r23, 0xFD	; 253
		int left = move_speed - error;
		motor_set(left,right);
     bb6:	8c eb       	ldi	r24, 0xBC	; 188
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	82 1b       	sub	r24, r18
     bbc:	93 0b       	sbc	r25, r19
     bbe:	0e 94 c7 04 	call	0x98e	; 0x98e <motor_set>
}

void straight(int move_time) {
	int16_t move_speed = 700;
	int count = move_time;
	while (count) {
     bc2:	20 97       	sbiw	r28, 0x00	; 0
     bc4:	f1 f6       	brne	.-68     	; 0xb82 <straight+0x2e>
		int error = adc_read(left_diag_sens) - adc_read(right_diag_sens);
		int right = move_speed + error;
		int left = move_speed - error;
		motor_set(left,right);
	}
	motor_set(0, 0);
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 c7 04 	call	0x98e	; 0x98e <motor_set>
}
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	df 90       	pop	r13
     be0:	cf 90       	pop	r12
     be2:	08 95       	ret

00000be4 <send_debug_msg>:

void send_debug_msg(char * buff) {
     be4:	4f 92       	push	r4
     be6:	5f 92       	push	r5
     be8:	6f 92       	push	r6
     bea:	7f 92       	push	r7
     bec:	8f 92       	push	r8
     bee:	9f 92       	push	r9
     bf0:	af 92       	push	r10
     bf2:	bf 92       	push	r11
     bf4:	cf 92       	push	r12
     bf6:	df 92       	push	r13
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	a8 2e       	mov	r10, r24
     c06:	b9 2e       	mov	r11, r25
	int difference = adc_read(left_diag_sens) - adc_read(right_diag_sens);
     c08:	c6 e0       	ldi	r28, 0x06	; 6
     c0a:	d0 e2       	ldi	r29, 0x20	; 32
     c0c:	88 81       	ld	r24, Y
     c0e:	0e 94 49 01 	call	0x292	; 0x292 <adc_read>
     c12:	6c 01       	movw	r12, r24
     c14:	00 e0       	ldi	r16, 0x00	; 0
     c16:	10 e2       	ldi	r17, 0x20	; 32
     c18:	f8 01       	movw	r30, r16
     c1a:	80 81       	ld	r24, Z
     c1c:	0e 94 49 01 	call	0x292	; 0x292 <adc_read>
     c20:	7c 01       	movw	r14, r24
	sprintf(buff,"%4d,%4d,%4d,%4d,%4d,%4d,%4d\n\r",
     c22:	f8 01       	movw	r30, r16
     c24:	80 81       	ld	r24, Z
     c26:	0e 94 49 01 	call	0x292	; 0x292 <adc_read>
     c2a:	78 2e       	mov	r7, r24
     c2c:	69 2e       	mov	r6, r25
     c2e:	80 91 02 20 	lds	r24, 0x2002
     c32:	0e 94 49 01 	call	0x292	; 0x292 <adc_read>
     c36:	98 2e       	mov	r9, r24
     c38:	89 2e       	mov	r8, r25
     c3a:	80 91 04 20 	lds	r24, 0x2004
     c3e:	0e 94 49 01 	call	0x292	; 0x292 <adc_read>
     c42:	18 2f       	mov	r17, r24
     c44:	09 2f       	mov	r16, r25
     c46:	88 81       	ld	r24, Y
     c48:	0e 94 49 01 	call	0x292	; 0x292 <adc_read>
     c4c:	58 2e       	mov	r5, r24
     c4e:	49 2e       	mov	r4, r25
     c50:	80 91 08 20 	lds	r24, 0x2008
     c54:	0e 94 49 01 	call	0x292	; 0x292 <adc_read>
     c58:	c8 2f       	mov	r28, r24
     c5a:	d9 2f       	mov	r29, r25
     c5c:	80 91 2d 20 	lds	r24, 0x202D
     c60:	0e 94 49 01 	call	0x292	; 0x292 <adc_read>
	}
	motor_set(0, 0);
}

void send_debug_msg(char * buff) {
	int difference = adc_read(left_diag_sens) - adc_read(right_diag_sens);
     c64:	96 01       	movw	r18, r12
     c66:	2e 19       	sub	r18, r14
     c68:	3f 09       	sbc	r19, r15
	sprintf(buff,"%4d,%4d,%4d,%4d,%4d,%4d,%4d\n\r",
     c6a:	3f 93       	push	r19
     c6c:	2f 93       	push	r18
     c6e:	6f 92       	push	r6
     c70:	7f 92       	push	r7
     c72:	8f 92       	push	r8
     c74:	9f 92       	push	r9
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	4f 92       	push	r4
     c7c:	5f 92       	push	r5
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	9f 93       	push	r25
     c84:	8f 93       	push	r24
     c86:	2a e0       	ldi	r18, 0x0A	; 10
     c88:	30 e2       	ldi	r19, 0x20	; 32
     c8a:	3f 93       	push	r19
     c8c:	2f 93       	push	r18
     c8e:	bf 92       	push	r11
     c90:	af 92       	push	r10
     c92:	0e 94 29 07 	call	0xe52	; 0xe52 <sprintf>
	adc_read(front_left_sens),adc_read(left_sens),adc_read(left_diag_sens),
	adc_read(front_right_sens), adc_read(right_sens), adc_read(right_diag_sens),
	difference);
	radio_puts(buff);
     c96:	8a 2d       	mov	r24, r10
     c98:	9b 2d       	mov	r25, r11
     c9a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <radio_puts>
     c9e:	8d b7       	in	r24, 0x3d	; 61
     ca0:	9e b7       	in	r25, 0x3e	; 62
     ca2:	42 96       	adiw	r24, 0x12	; 18
     ca4:	8d bf       	out	0x3d, r24	; 61
     ca6:	9e bf       	out	0x3e, r25	; 62
}
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	df 90       	pop	r13
     cb6:	cf 90       	pop	r12
     cb8:	bf 90       	pop	r11
     cba:	af 90       	pop	r10
     cbc:	9f 90       	pop	r9
     cbe:	8f 90       	pop	r8
     cc0:	7f 90       	pop	r7
     cc2:	6f 90       	pop	r6
     cc4:	5f 90       	pop	r5
     cc6:	4f 90       	pop	r4
     cc8:	08 95       	ret

00000cca <main>:

int main(void)
{
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	6e 97       	sbiw	r28, 0x1e	; 30
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	de bf       	out	0x3e, r29	; 62
{
    /*  Enable internal 32 MHz ring oscillator and wait until it's
    	 *  stable. Divide clock by two with the prescaler C and set the
    	 *  32 MHz ring oscillator as the main clock source.
    	 */
    CLKSYS_Enable( OSC_RC32MEN_bm );
     cd8:	e0 e5       	ldi	r30, 0x50	; 80
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	82 60       	ori	r24, 0x02	; 2
     ce0:	80 83       	st	Z, r24
    CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	0e 94 a9 02 	call	0x552	; 0x552 <CLKSYS_Prescalers_Config>
    do {}
    while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
     cea:	e0 e5       	ldi	r30, 0x50	; 80
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	81 81       	ldd	r24, Z+1	; 0x01
     cf0:	81 ff       	sbrs	r24, 1
     cf2:	fd cf       	rjmp	.-6      	; 0xcee <main+0x24>
    CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	0e 94 af 02 	call	0x55e	; 0x55e <CLKSYS_Main_ClockSource_Select>
extern volatile uint32_t systick;

// Initialize board LEDs, switches and systick timer
inline void board_init()
{
    PORT_SetPinsAsOutput(&PORTB,0x0E);	// Set PORTB LED pins as output
     cfa:	8e e0       	ldi	r24, 0x0E	; 14
     cfc:	e0 e2       	ldi	r30, 0x20	; 32
     cfe:	f6 e0       	ldi	r31, 0x06	; 6
     d00:	81 83       	std	Z+1, r24	; 0x01
    PORT_SetPinsAsInput(&PORTD,0x30);	// Set PORTD Button pins as input
     d02:	80 e3       	ldi	r24, 0x30	; 48
     d04:	e0 e6       	ldi	r30, 0x60	; 96
     d06:	f6 e0       	ldi	r31, 0x06	; 6
     d08:	82 83       	std	Z+2, r24	; 0x02

    // Configure Systick timer 1kHz freq
    TC_SetPeriod(&SYSTICK_TIMER,32000);
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	9d e7       	ldi	r25, 0x7D	; 125
     d0e:	e0 e0       	ldi	r30, 0x00	; 0
     d10:	fa e0       	ldi	r31, 0x0A	; 10
     d12:	86 a3       	std	Z+38, r24	; 0x26
     d14:	97 a3       	std	Z+39, r25	; 0x27
    TC0_ConfigWGM(&SYSTICK_TIMER,TC_WGMODE_NORMAL_gc);
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	9a e0       	ldi	r25, 0x0A	; 10
     d1c:	0e 94 c8 02 	call	0x590	; 0x590 <TC0_ConfigWGM>
    TC0_SetOverflowIntLevel(&SYSTICK_TIMER,TC_OVFINTLVL_MED_gc);
     d20:	62 e0       	ldi	r22, 0x02	; 2
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	9a e0       	ldi	r25, 0x0A	; 10
     d26:	0e 94 db 02 	call	0x5b6	; 0x5b6 <TC0_SetOverflowIntLevel>
    TC0_ConfigClockSource(&SYSTICK_TIMER,TC_CLKSEL_DIV1_gc);
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	9a e0       	ldi	r25, 0x0A	; 10
     d30:	0e 94 c2 02 	call	0x584	; 0x584 <TC0_ConfigClockSource>

    // Enable PMIC interrupt levels and interrupts globally
    PMIC.CTRL |= PMIC_LOLVLEX_bm|PMIC_MEDLVLEX_bm|PMIC_HILVLEX_bm;
     d34:	e0 ea       	ldi	r30, 0xA0	; 160
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	82 81       	ldd	r24, Z+2	; 0x02
     d3a:	87 60       	ori	r24, 0x07	; 7
     d3c:	82 83       	std	Z+2, r24	; 0x02
    sei();
     d3e:	78 94       	sei
	char buff[30];
	clock_init();		// Seadista s?steemi kell 32MHz peale
	board_init();		// Seadista LED ja nupud
	adc_init();			// Seadista ADC kanal 0
     d40:	0e 94 1d 01 	call	0x23a	; 0x23a <adc_init>
	radio_init(57600);	// Seadista raadiomooduli UART
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	71 ee       	ldi	r23, 0xE1	; 225
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 81 01 	call	0x302	; 0x302 <radio_init>
	motor_init();		// Seadista mootorikontroller
     d50:	0e 94 0d 04 	call	0x81a	; 0x81a <motor_init>
    PORT_SetOutputValue(&LED_PORT,((colour & 7) << 1)|(1 & PORTB.OUT));
}

inline int sw1_read()
{
    return (((~PORT_GetPortValue(&SW_PORT) & SW1) >> 4));
     d54:	0f 2e       	mov	r0, r31
     d56:	f0 e6       	ldi	r31, 0x60	; 96
     d58:	ef 2e       	mov	r14, r31
     d5a:	f6 e0       	ldi	r31, 0x06	; 6
     d5c:	ff 2e       	mov	r15, r31
     d5e:	f0 2d       	mov	r31, r0
}

// Set value for RGB LED
inline void rgb_set(RGB_colour colour)
{
    PORT_SetOutputValue(&LED_PORT,((colour & 7) << 1)|(1 & PORTB.OUT));
     d60:	00 e2       	ldi	r16, 0x20	; 32
     d62:	16 e0       	ldi	r17, 0x06	; 6
}

inline int sw1_read()
{
    return (((~PORT_GetPortValue(&SW_PORT) & SW1) >> 4));
     d64:	f7 01       	movw	r30, r14
     d66:	80 85       	ldd	r24, Z+8	; 0x08
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	80 95       	com	r24
     d6c:	90 95       	com	r25
	
	while(1)
	{
		if(sw1_read())
     d6e:	84 ff       	sbrs	r24, 4
     d70:	22 c0       	rjmp	.+68     	; 0xdb6 <main+0xec>
}

// Set value for RGB LED
inline void rgb_set(RGB_colour colour)
{
    PORT_SetOutputValue(&LED_PORT,((colour & 7) << 1)|(1 & PORTB.OUT));
     d72:	f8 01       	movw	r30, r16
     d74:	84 81       	ldd	r24, Z+4	; 0x04
     d76:	81 70       	andi	r24, 0x01	; 1
     d78:	82 60       	ori	r24, 0x02	; 2
     d7a:	84 83       	std	Z+4, r24	; 0x04
		{
			rgb_set(RED);
			delay_ms(1000);
     d7c:	88 ee       	ldi	r24, 0xE8	; 232
     d7e:	93 e0       	ldi	r25, 0x03	; 3
     d80:	0e 94 4a 05 	call	0xa94	; 0xa94 <delay_ms>
			turn_right_and_back();
     d84:	0e 94 56 05 	call	0xaac	; 0xaac <turn_right_and_back>
			delay_ms(1000);
     d88:	88 ee       	ldi	r24, 0xE8	; 232
     d8a:	93 e0       	ldi	r25, 0x03	; 3
     d8c:	0e 94 4a 05 	call	0xa94	; 0xa94 <delay_ms>
			turn_left_and_back();
     d90:	0e 94 73 05 	call	0xae6	; 0xae6 <turn_left_and_back>
			delay_ms(1000);
     d94:	88 ee       	ldi	r24, 0xE8	; 232
     d96:	93 e0       	ldi	r25, 0x03	; 3
     d98:	0e 94 4a 05 	call	0xa94	; 0xa94 <delay_ms>
			turn_around(1);
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 90 05 	call	0xb20	; 0xb20 <turn_around>
			delay_ms(1000);
     da4:	88 ee       	ldi	r24, 0xE8	; 232
     da6:	93 e0       	ldi	r25, 0x03	; 3
     da8:	0e 94 4a 05 	call	0xa94	; 0xa94 <delay_ms>
			turn_around(0);
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 90 05 	call	0xb20	; 0xb20 <turn_around>
     db4:	d7 cf       	rjmp	.-82     	; 0xd64 <main+0x9a>
    return (((~PORT_GetPortValue(&SW_PORT) & SW1) >> 4));
}

inline int sw2_read()
{
    return (((~PORT_GetPortValue(&SW_PORT) & SW2) >> 5));
     db6:	f7 01       	movw	r30, r14
     db8:	80 85       	ldd	r24, Z+8	; 0x08
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	80 95       	com	r24
     dbe:	90 95       	com	r25

		}
		else if(sw2_read())
     dc0:	85 ff       	sbrs	r24, 5
     dc2:	12 c0       	rjmp	.+36     	; 0xde8 <main+0x11e>
}

// Set value for RGB LED
inline void rgb_set(RGB_colour colour)
{
    PORT_SetOutputValue(&LED_PORT,((colour & 7) << 1)|(1 & PORTB.OUT));
     dc4:	f8 01       	movw	r30, r16
     dc6:	84 81       	ldd	r24, Z+4	; 0x04
     dc8:	81 70       	andi	r24, 0x01	; 1
     dca:	88 60       	ori	r24, 0x08	; 8
     dcc:	84 83       	std	Z+4, r24	; 0x04
		{
			rgb_set(BLUE);
			delay_ms(1000);
     dce:	88 ee       	ldi	r24, 0xE8	; 232
     dd0:	93 e0       	ldi	r25, 0x03	; 3
     dd2:	0e 94 4a 05 	call	0xa94	; 0xa94 <delay_ms>
			straight(5000);
     dd6:	88 e8       	ldi	r24, 0x88	; 136
     dd8:	93 e1       	ldi	r25, 0x13	; 19
     dda:	0e 94 aa 05 	call	0xb54	; 0xb54 <straight>
			delay_ms(1000);
     dde:	88 ee       	ldi	r24, 0xE8	; 232
     de0:	93 e0       	ldi	r25, 0x03	; 3
     de2:	0e 94 4a 05 	call	0xa94	; 0xa94 <delay_ms>
     de6:	be cf       	rjmp	.-132    	; 0xd64 <main+0x9a>
     de8:	f8 01       	movw	r30, r16
     dea:	84 81       	ldd	r24, Z+4	; 0x04
     dec:	81 70       	andi	r24, 0x01	; 1
     dee:	84 60       	ori	r24, 0x04	; 4
     df0:	84 83       	std	Z+4, r24	; 0x04
		}
		else
		{
			rgb_set(GREEN);
			send_debug_msg(buff);
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <send_debug_msg>
     dfa:	ff ef       	ldi	r31, 0xFF	; 255
     dfc:	23 ed       	ldi	r18, 0xD3	; 211
     dfe:	80 e3       	ldi	r24, 0x30	; 48
     e00:	f1 50       	subi	r31, 0x01	; 1
     e02:	20 40       	sbci	r18, 0x00	; 0
     e04:	80 40       	sbci	r24, 0x00	; 0
     e06:	e1 f7       	brne	.-8      	; 0xe00 <main+0x136>
     e08:	00 c0       	rjmp	.+0      	; 0xe0a <main+0x140>
     e0a:	00 00       	nop
     e0c:	ab cf       	rjmp	.-170    	; 0xd64 <main+0x9a>

00000e0e <__udivmodsi4>:
     e0e:	a1 e2       	ldi	r26, 0x21	; 33
     e10:	1a 2e       	mov	r1, r26
     e12:	aa 1b       	sub	r26, r26
     e14:	bb 1b       	sub	r27, r27
     e16:	fd 01       	movw	r30, r26
     e18:	0d c0       	rjmp	.+26     	; 0xe34 <__udivmodsi4_ep>

00000e1a <__udivmodsi4_loop>:
     e1a:	aa 1f       	adc	r26, r26
     e1c:	bb 1f       	adc	r27, r27
     e1e:	ee 1f       	adc	r30, r30
     e20:	ff 1f       	adc	r31, r31
     e22:	a2 17       	cp	r26, r18
     e24:	b3 07       	cpc	r27, r19
     e26:	e4 07       	cpc	r30, r20
     e28:	f5 07       	cpc	r31, r21
     e2a:	20 f0       	brcs	.+8      	; 0xe34 <__udivmodsi4_ep>
     e2c:	a2 1b       	sub	r26, r18
     e2e:	b3 0b       	sbc	r27, r19
     e30:	e4 0b       	sbc	r30, r20
     e32:	f5 0b       	sbc	r31, r21

00000e34 <__udivmodsi4_ep>:
     e34:	66 1f       	adc	r22, r22
     e36:	77 1f       	adc	r23, r23
     e38:	88 1f       	adc	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	1a 94       	dec	r1
     e3e:	69 f7       	brne	.-38     	; 0xe1a <__udivmodsi4_loop>
     e40:	60 95       	com	r22
     e42:	70 95       	com	r23
     e44:	80 95       	com	r24
     e46:	90 95       	com	r25
     e48:	9b 01       	movw	r18, r22
     e4a:	ac 01       	movw	r20, r24
     e4c:	bd 01       	movw	r22, r26
     e4e:	cf 01       	movw	r24, r30
     e50:	08 95       	ret

00000e52 <sprintf>:
     e52:	ae e0       	ldi	r26, 0x0E	; 14
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ef e2       	ldi	r30, 0x2F	; 47
     e58:	f7 e0       	ldi	r31, 0x07	; 7
     e5a:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__prologue_saves__+0x1c>
     e5e:	0d 89       	ldd	r16, Y+21	; 0x15
     e60:	1e 89       	ldd	r17, Y+22	; 0x16
     e62:	86 e0       	ldi	r24, 0x06	; 6
     e64:	8c 83       	std	Y+4, r24	; 0x04
     e66:	09 83       	std	Y+1, r16	; 0x01
     e68:	1a 83       	std	Y+2, r17	; 0x02
     e6a:	8f ef       	ldi	r24, 0xFF	; 255
     e6c:	9f e7       	ldi	r25, 0x7F	; 127
     e6e:	8d 83       	std	Y+5, r24	; 0x05
     e70:	9e 83       	std	Y+6, r25	; 0x06
     e72:	ae 01       	movw	r20, r28
     e74:	47 5e       	subi	r20, 0xE7	; 231
     e76:	5f 4f       	sbci	r21, 0xFF	; 255
     e78:	6f 89       	ldd	r22, Y+23	; 0x17
     e7a:	78 8d       	ldd	r23, Y+24	; 0x18
     e7c:	ce 01       	movw	r24, r28
     e7e:	01 96       	adiw	r24, 0x01	; 1
     e80:	0e 94 4b 07 	call	0xe96	; 0xe96 <vfprintf>
     e84:	ef 81       	ldd	r30, Y+7	; 0x07
     e86:	f8 85       	ldd	r31, Y+8	; 0x08
     e88:	e0 0f       	add	r30, r16
     e8a:	f1 1f       	adc	r31, r17
     e8c:	10 82       	st	Z, r1
     e8e:	2e 96       	adiw	r28, 0x0e	; 14
     e90:	e4 e0       	ldi	r30, 0x04	; 4
     e92:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__epilogue_restores__+0x1c>

00000e96 <vfprintf>:
     e96:	ac e0       	ldi	r26, 0x0C	; 12
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e1 e5       	ldi	r30, 0x51	; 81
     e9c:	f7 e0       	ldi	r31, 0x07	; 7
     e9e:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__prologue_saves__>
     ea2:	7c 01       	movw	r14, r24
     ea4:	6b 01       	movw	r12, r22
     ea6:	8a 01       	movw	r16, r20
     ea8:	fc 01       	movw	r30, r24
     eaa:	16 82       	std	Z+6, r1	; 0x06
     eac:	17 82       	std	Z+7, r1	; 0x07
     eae:	83 81       	ldd	r24, Z+3	; 0x03
     eb0:	81 ff       	sbrs	r24, 1
     eb2:	bd c1       	rjmp	.+890    	; 0x122e <vfprintf+0x398>
     eb4:	ce 01       	movw	r24, r28
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	4c 01       	movw	r8, r24
     eba:	f7 01       	movw	r30, r14
     ebc:	93 81       	ldd	r25, Z+3	; 0x03
     ebe:	f6 01       	movw	r30, r12
     ec0:	93 fd       	sbrc	r25, 3
     ec2:	85 91       	lpm	r24, Z+
     ec4:	93 ff       	sbrs	r25, 3
     ec6:	81 91       	ld	r24, Z+
     ec8:	6f 01       	movw	r12, r30
     eca:	88 23       	and	r24, r24
     ecc:	09 f4       	brne	.+2      	; 0xed0 <vfprintf+0x3a>
     ece:	ab c1       	rjmp	.+854    	; 0x1226 <vfprintf+0x390>
     ed0:	85 32       	cpi	r24, 0x25	; 37
     ed2:	39 f4       	brne	.+14     	; 0xee2 <vfprintf+0x4c>
     ed4:	93 fd       	sbrc	r25, 3
     ed6:	85 91       	lpm	r24, Z+
     ed8:	93 ff       	sbrs	r25, 3
     eda:	81 91       	ld	r24, Z+
     edc:	6f 01       	movw	r12, r30
     ede:	85 32       	cpi	r24, 0x25	; 37
     ee0:	29 f4       	brne	.+10     	; 0xeec <vfprintf+0x56>
     ee2:	b7 01       	movw	r22, r14
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     eea:	e7 cf       	rjmp	.-50     	; 0xeba <vfprintf+0x24>
     eec:	51 2c       	mov	r5, r1
     eee:	31 2c       	mov	r3, r1
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	20 32       	cpi	r18, 0x20	; 32
     ef4:	a0 f4       	brcc	.+40     	; 0xf1e <vfprintf+0x88>
     ef6:	8b 32       	cpi	r24, 0x2B	; 43
     ef8:	69 f0       	breq	.+26     	; 0xf14 <vfprintf+0x7e>
     efa:	30 f4       	brcc	.+12     	; 0xf08 <vfprintf+0x72>
     efc:	80 32       	cpi	r24, 0x20	; 32
     efe:	59 f0       	breq	.+22     	; 0xf16 <vfprintf+0x80>
     f00:	83 32       	cpi	r24, 0x23	; 35
     f02:	69 f4       	brne	.+26     	; 0xf1e <vfprintf+0x88>
     f04:	20 61       	ori	r18, 0x10	; 16
     f06:	2c c0       	rjmp	.+88     	; 0xf60 <vfprintf+0xca>
     f08:	8d 32       	cpi	r24, 0x2D	; 45
     f0a:	39 f0       	breq	.+14     	; 0xf1a <vfprintf+0x84>
     f0c:	80 33       	cpi	r24, 0x30	; 48
     f0e:	39 f4       	brne	.+14     	; 0xf1e <vfprintf+0x88>
     f10:	21 60       	ori	r18, 0x01	; 1
     f12:	26 c0       	rjmp	.+76     	; 0xf60 <vfprintf+0xca>
     f14:	22 60       	ori	r18, 0x02	; 2
     f16:	24 60       	ori	r18, 0x04	; 4
     f18:	23 c0       	rjmp	.+70     	; 0xf60 <vfprintf+0xca>
     f1a:	28 60       	ori	r18, 0x08	; 8
     f1c:	21 c0       	rjmp	.+66     	; 0xf60 <vfprintf+0xca>
     f1e:	27 fd       	sbrc	r18, 7
     f20:	27 c0       	rjmp	.+78     	; 0xf70 <vfprintf+0xda>
     f22:	30 ed       	ldi	r19, 0xD0	; 208
     f24:	38 0f       	add	r19, r24
     f26:	3a 30       	cpi	r19, 0x0A	; 10
     f28:	78 f4       	brcc	.+30     	; 0xf48 <vfprintf+0xb2>
     f2a:	26 ff       	sbrs	r18, 6
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <vfprintf+0xa4>
     f2e:	fa e0       	ldi	r31, 0x0A	; 10
     f30:	5f 9e       	mul	r5, r31
     f32:	30 0d       	add	r19, r0
     f34:	11 24       	eor	r1, r1
     f36:	53 2e       	mov	r5, r19
     f38:	13 c0       	rjmp	.+38     	; 0xf60 <vfprintf+0xca>
     f3a:	8a e0       	ldi	r24, 0x0A	; 10
     f3c:	38 9e       	mul	r3, r24
     f3e:	30 0d       	add	r19, r0
     f40:	11 24       	eor	r1, r1
     f42:	33 2e       	mov	r3, r19
     f44:	20 62       	ori	r18, 0x20	; 32
     f46:	0c c0       	rjmp	.+24     	; 0xf60 <vfprintf+0xca>
     f48:	8e 32       	cpi	r24, 0x2E	; 46
     f4a:	21 f4       	brne	.+8      	; 0xf54 <vfprintf+0xbe>
     f4c:	26 fd       	sbrc	r18, 6
     f4e:	6b c1       	rjmp	.+726    	; 0x1226 <vfprintf+0x390>
     f50:	20 64       	ori	r18, 0x40	; 64
     f52:	06 c0       	rjmp	.+12     	; 0xf60 <vfprintf+0xca>
     f54:	8c 36       	cpi	r24, 0x6C	; 108
     f56:	11 f4       	brne	.+4      	; 0xf5c <vfprintf+0xc6>
     f58:	20 68       	ori	r18, 0x80	; 128
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <vfprintf+0xca>
     f5c:	88 36       	cpi	r24, 0x68	; 104
     f5e:	41 f4       	brne	.+16     	; 0xf70 <vfprintf+0xda>
     f60:	f6 01       	movw	r30, r12
     f62:	93 fd       	sbrc	r25, 3
     f64:	85 91       	lpm	r24, Z+
     f66:	93 ff       	sbrs	r25, 3
     f68:	81 91       	ld	r24, Z+
     f6a:	6f 01       	movw	r12, r30
     f6c:	81 11       	cpse	r24, r1
     f6e:	c1 cf       	rjmp	.-126    	; 0xef2 <vfprintf+0x5c>
     f70:	98 2f       	mov	r25, r24
     f72:	9f 7d       	andi	r25, 0xDF	; 223
     f74:	95 54       	subi	r25, 0x45	; 69
     f76:	93 30       	cpi	r25, 0x03	; 3
     f78:	28 f4       	brcc	.+10     	; 0xf84 <vfprintf+0xee>
     f7a:	0c 5f       	subi	r16, 0xFC	; 252
     f7c:	1f 4f       	sbci	r17, 0xFF	; 255
     f7e:	ff e3       	ldi	r31, 0x3F	; 63
     f80:	f9 83       	std	Y+1, r31	; 0x01
     f82:	0d c0       	rjmp	.+26     	; 0xf9e <vfprintf+0x108>
     f84:	83 36       	cpi	r24, 0x63	; 99
     f86:	31 f0       	breq	.+12     	; 0xf94 <vfprintf+0xfe>
     f88:	83 37       	cpi	r24, 0x73	; 115
     f8a:	71 f0       	breq	.+28     	; 0xfa8 <vfprintf+0x112>
     f8c:	83 35       	cpi	r24, 0x53	; 83
     f8e:	09 f0       	breq	.+2      	; 0xf92 <vfprintf+0xfc>
     f90:	5b c0       	rjmp	.+182    	; 0x1048 <vfprintf+0x1b2>
     f92:	22 c0       	rjmp	.+68     	; 0xfd8 <vfprintf+0x142>
     f94:	f8 01       	movw	r30, r16
     f96:	80 81       	ld	r24, Z
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	0e 5f       	subi	r16, 0xFE	; 254
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	44 24       	eor	r4, r4
     fa0:	43 94       	inc	r4
     fa2:	51 2c       	mov	r5, r1
     fa4:	54 01       	movw	r10, r8
     fa6:	15 c0       	rjmp	.+42     	; 0xfd2 <vfprintf+0x13c>
     fa8:	38 01       	movw	r6, r16
     faa:	f2 e0       	ldi	r31, 0x02	; 2
     fac:	6f 0e       	add	r6, r31
     fae:	71 1c       	adc	r7, r1
     fb0:	f8 01       	movw	r30, r16
     fb2:	a0 80       	ld	r10, Z
     fb4:	b1 80       	ldd	r11, Z+1	; 0x01
     fb6:	26 ff       	sbrs	r18, 6
     fb8:	03 c0       	rjmp	.+6      	; 0xfc0 <vfprintf+0x12a>
     fba:	65 2d       	mov	r22, r5
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <vfprintf+0x12e>
     fc0:	6f ef       	ldi	r22, 0xFF	; 255
     fc2:	7f ef       	ldi	r23, 0xFF	; 255
     fc4:	c5 01       	movw	r24, r10
     fc6:	2c 87       	std	Y+12, r18	; 0x0c
     fc8:	0e 94 28 09 	call	0x1250	; 0x1250 <strnlen>
     fcc:	2c 01       	movw	r4, r24
     fce:	83 01       	movw	r16, r6
     fd0:	2c 85       	ldd	r18, Y+12	; 0x0c
     fd2:	2f 77       	andi	r18, 0x7F	; 127
     fd4:	22 2e       	mov	r2, r18
     fd6:	17 c0       	rjmp	.+46     	; 0x1006 <vfprintf+0x170>
     fd8:	38 01       	movw	r6, r16
     fda:	f2 e0       	ldi	r31, 0x02	; 2
     fdc:	6f 0e       	add	r6, r31
     fde:	71 1c       	adc	r7, r1
     fe0:	f8 01       	movw	r30, r16
     fe2:	a0 80       	ld	r10, Z
     fe4:	b1 80       	ldd	r11, Z+1	; 0x01
     fe6:	26 ff       	sbrs	r18, 6
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <vfprintf+0x15a>
     fea:	65 2d       	mov	r22, r5
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <vfprintf+0x15e>
     ff0:	6f ef       	ldi	r22, 0xFF	; 255
     ff2:	7f ef       	ldi	r23, 0xFF	; 255
     ff4:	c5 01       	movw	r24, r10
     ff6:	2c 87       	std	Y+12, r18	; 0x0c
     ff8:	0e 94 1d 09 	call	0x123a	; 0x123a <strnlen_P>
     ffc:	2c 01       	movw	r4, r24
     ffe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1000:	20 68       	ori	r18, 0x80	; 128
    1002:	22 2e       	mov	r2, r18
    1004:	83 01       	movw	r16, r6
    1006:	23 fc       	sbrc	r2, 3
    1008:	1b c0       	rjmp	.+54     	; 0x1040 <vfprintf+0x1aa>
    100a:	83 2d       	mov	r24, r3
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	48 16       	cp	r4, r24
    1010:	59 06       	cpc	r5, r25
    1012:	b0 f4       	brcc	.+44     	; 0x1040 <vfprintf+0x1aa>
    1014:	b7 01       	movw	r22, r14
    1016:	80 e2       	ldi	r24, 0x20	; 32
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
    101e:	3a 94       	dec	r3
    1020:	f4 cf       	rjmp	.-24     	; 0x100a <vfprintf+0x174>
    1022:	f5 01       	movw	r30, r10
    1024:	27 fc       	sbrc	r2, 7
    1026:	85 91       	lpm	r24, Z+
    1028:	27 fe       	sbrs	r2, 7
    102a:	81 91       	ld	r24, Z+
    102c:	5f 01       	movw	r10, r30
    102e:	b7 01       	movw	r22, r14
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
    1036:	31 10       	cpse	r3, r1
    1038:	3a 94       	dec	r3
    103a:	f1 e0       	ldi	r31, 0x01	; 1
    103c:	4f 1a       	sub	r4, r31
    103e:	51 08       	sbc	r5, r1
    1040:	41 14       	cp	r4, r1
    1042:	51 04       	cpc	r5, r1
    1044:	71 f7       	brne	.-36     	; 0x1022 <vfprintf+0x18c>
    1046:	e5 c0       	rjmp	.+458    	; 0x1212 <vfprintf+0x37c>
    1048:	84 36       	cpi	r24, 0x64	; 100
    104a:	11 f0       	breq	.+4      	; 0x1050 <vfprintf+0x1ba>
    104c:	89 36       	cpi	r24, 0x69	; 105
    104e:	39 f5       	brne	.+78     	; 0x109e <vfprintf+0x208>
    1050:	f8 01       	movw	r30, r16
    1052:	27 ff       	sbrs	r18, 7
    1054:	07 c0       	rjmp	.+14     	; 0x1064 <vfprintf+0x1ce>
    1056:	60 81       	ld	r22, Z
    1058:	71 81       	ldd	r23, Z+1	; 0x01
    105a:	82 81       	ldd	r24, Z+2	; 0x02
    105c:	93 81       	ldd	r25, Z+3	; 0x03
    105e:	0c 5f       	subi	r16, 0xFC	; 252
    1060:	1f 4f       	sbci	r17, 0xFF	; 255
    1062:	08 c0       	rjmp	.+16     	; 0x1074 <vfprintf+0x1de>
    1064:	60 81       	ld	r22, Z
    1066:	71 81       	ldd	r23, Z+1	; 0x01
    1068:	88 27       	eor	r24, r24
    106a:	77 fd       	sbrc	r23, 7
    106c:	80 95       	com	r24
    106e:	98 2f       	mov	r25, r24
    1070:	0e 5f       	subi	r16, 0xFE	; 254
    1072:	1f 4f       	sbci	r17, 0xFF	; 255
    1074:	2f 76       	andi	r18, 0x6F	; 111
    1076:	b2 2e       	mov	r11, r18
    1078:	97 ff       	sbrs	r25, 7
    107a:	09 c0       	rjmp	.+18     	; 0x108e <vfprintf+0x1f8>
    107c:	90 95       	com	r25
    107e:	80 95       	com	r24
    1080:	70 95       	com	r23
    1082:	61 95       	neg	r22
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	8f 4f       	sbci	r24, 0xFF	; 255
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	20 68       	ori	r18, 0x80	; 128
    108c:	b2 2e       	mov	r11, r18
    108e:	2a e0       	ldi	r18, 0x0A	; 10
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	a4 01       	movw	r20, r8
    1094:	0e 94 65 09 	call	0x12ca	; 0x12ca <__ultoa_invert>
    1098:	a8 2e       	mov	r10, r24
    109a:	a8 18       	sub	r10, r8
    109c:	44 c0       	rjmp	.+136    	; 0x1126 <vfprintf+0x290>
    109e:	85 37       	cpi	r24, 0x75	; 117
    10a0:	29 f4       	brne	.+10     	; 0x10ac <vfprintf+0x216>
    10a2:	2f 7e       	andi	r18, 0xEF	; 239
    10a4:	b2 2e       	mov	r11, r18
    10a6:	2a e0       	ldi	r18, 0x0A	; 10
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	25 c0       	rjmp	.+74     	; 0x10f6 <vfprintf+0x260>
    10ac:	f2 2f       	mov	r31, r18
    10ae:	f9 7f       	andi	r31, 0xF9	; 249
    10b0:	bf 2e       	mov	r11, r31
    10b2:	8f 36       	cpi	r24, 0x6F	; 111
    10b4:	c1 f0       	breq	.+48     	; 0x10e6 <vfprintf+0x250>
    10b6:	18 f4       	brcc	.+6      	; 0x10be <vfprintf+0x228>
    10b8:	88 35       	cpi	r24, 0x58	; 88
    10ba:	79 f0       	breq	.+30     	; 0x10da <vfprintf+0x244>
    10bc:	b4 c0       	rjmp	.+360    	; 0x1226 <vfprintf+0x390>
    10be:	80 37       	cpi	r24, 0x70	; 112
    10c0:	19 f0       	breq	.+6      	; 0x10c8 <vfprintf+0x232>
    10c2:	88 37       	cpi	r24, 0x78	; 120
    10c4:	21 f0       	breq	.+8      	; 0x10ce <vfprintf+0x238>
    10c6:	af c0       	rjmp	.+350    	; 0x1226 <vfprintf+0x390>
    10c8:	2f 2f       	mov	r18, r31
    10ca:	20 61       	ori	r18, 0x10	; 16
    10cc:	b2 2e       	mov	r11, r18
    10ce:	b4 fe       	sbrs	r11, 4
    10d0:	0d c0       	rjmp	.+26     	; 0x10ec <vfprintf+0x256>
    10d2:	8b 2d       	mov	r24, r11
    10d4:	84 60       	ori	r24, 0x04	; 4
    10d6:	b8 2e       	mov	r11, r24
    10d8:	09 c0       	rjmp	.+18     	; 0x10ec <vfprintf+0x256>
    10da:	24 ff       	sbrs	r18, 4
    10dc:	0a c0       	rjmp	.+20     	; 0x10f2 <vfprintf+0x25c>
    10de:	9f 2f       	mov	r25, r31
    10e0:	96 60       	ori	r25, 0x06	; 6
    10e2:	b9 2e       	mov	r11, r25
    10e4:	06 c0       	rjmp	.+12     	; 0x10f2 <vfprintf+0x25c>
    10e6:	28 e0       	ldi	r18, 0x08	; 8
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	05 c0       	rjmp	.+10     	; 0x10f6 <vfprintf+0x260>
    10ec:	20 e1       	ldi	r18, 0x10	; 16
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <vfprintf+0x260>
    10f2:	20 e1       	ldi	r18, 0x10	; 16
    10f4:	32 e0       	ldi	r19, 0x02	; 2
    10f6:	f8 01       	movw	r30, r16
    10f8:	b7 fe       	sbrs	r11, 7
    10fa:	07 c0       	rjmp	.+14     	; 0x110a <vfprintf+0x274>
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	0c 5f       	subi	r16, 0xFC	; 252
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	06 c0       	rjmp	.+12     	; 0x1116 <vfprintf+0x280>
    110a:	60 81       	ld	r22, Z
    110c:	71 81       	ldd	r23, Z+1	; 0x01
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 5f       	subi	r16, 0xFE	; 254
    1114:	1f 4f       	sbci	r17, 0xFF	; 255
    1116:	a4 01       	movw	r20, r8
    1118:	0e 94 65 09 	call	0x12ca	; 0x12ca <__ultoa_invert>
    111c:	a8 2e       	mov	r10, r24
    111e:	a8 18       	sub	r10, r8
    1120:	fb 2d       	mov	r31, r11
    1122:	ff 77       	andi	r31, 0x7F	; 127
    1124:	bf 2e       	mov	r11, r31
    1126:	b6 fe       	sbrs	r11, 6
    1128:	0b c0       	rjmp	.+22     	; 0x1140 <vfprintf+0x2aa>
    112a:	2b 2d       	mov	r18, r11
    112c:	2e 7f       	andi	r18, 0xFE	; 254
    112e:	a5 14       	cp	r10, r5
    1130:	50 f4       	brcc	.+20     	; 0x1146 <vfprintf+0x2b0>
    1132:	b4 fe       	sbrs	r11, 4
    1134:	0a c0       	rjmp	.+20     	; 0x114a <vfprintf+0x2b4>
    1136:	b2 fc       	sbrc	r11, 2
    1138:	08 c0       	rjmp	.+16     	; 0x114a <vfprintf+0x2b4>
    113a:	2b 2d       	mov	r18, r11
    113c:	2e 7e       	andi	r18, 0xEE	; 238
    113e:	05 c0       	rjmp	.+10     	; 0x114a <vfprintf+0x2b4>
    1140:	7a 2c       	mov	r7, r10
    1142:	2b 2d       	mov	r18, r11
    1144:	03 c0       	rjmp	.+6      	; 0x114c <vfprintf+0x2b6>
    1146:	7a 2c       	mov	r7, r10
    1148:	01 c0       	rjmp	.+2      	; 0x114c <vfprintf+0x2b6>
    114a:	75 2c       	mov	r7, r5
    114c:	24 ff       	sbrs	r18, 4
    114e:	0d c0       	rjmp	.+26     	; 0x116a <vfprintf+0x2d4>
    1150:	fe 01       	movw	r30, r28
    1152:	ea 0d       	add	r30, r10
    1154:	f1 1d       	adc	r31, r1
    1156:	80 81       	ld	r24, Z
    1158:	80 33       	cpi	r24, 0x30	; 48
    115a:	11 f4       	brne	.+4      	; 0x1160 <vfprintf+0x2ca>
    115c:	29 7e       	andi	r18, 0xE9	; 233
    115e:	09 c0       	rjmp	.+18     	; 0x1172 <vfprintf+0x2dc>
    1160:	22 ff       	sbrs	r18, 2
    1162:	06 c0       	rjmp	.+12     	; 0x1170 <vfprintf+0x2da>
    1164:	73 94       	inc	r7
    1166:	73 94       	inc	r7
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <vfprintf+0x2dc>
    116a:	82 2f       	mov	r24, r18
    116c:	86 78       	andi	r24, 0x86	; 134
    116e:	09 f0       	breq	.+2      	; 0x1172 <vfprintf+0x2dc>
    1170:	73 94       	inc	r7
    1172:	23 fd       	sbrc	r18, 3
    1174:	13 c0       	rjmp	.+38     	; 0x119c <vfprintf+0x306>
    1176:	20 ff       	sbrs	r18, 0
    1178:	06 c0       	rjmp	.+12     	; 0x1186 <vfprintf+0x2f0>
    117a:	5a 2c       	mov	r5, r10
    117c:	73 14       	cp	r7, r3
    117e:	18 f4       	brcc	.+6      	; 0x1186 <vfprintf+0x2f0>
    1180:	53 0c       	add	r5, r3
    1182:	57 18       	sub	r5, r7
    1184:	73 2c       	mov	r7, r3
    1186:	73 14       	cp	r7, r3
    1188:	68 f4       	brcc	.+26     	; 0x11a4 <vfprintf+0x30e>
    118a:	b7 01       	movw	r22, r14
    118c:	80 e2       	ldi	r24, 0x20	; 32
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	2c 87       	std	Y+12, r18	; 0x0c
    1192:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
    1196:	73 94       	inc	r7
    1198:	2c 85       	ldd	r18, Y+12	; 0x0c
    119a:	f5 cf       	rjmp	.-22     	; 0x1186 <vfprintf+0x2f0>
    119c:	73 14       	cp	r7, r3
    119e:	10 f4       	brcc	.+4      	; 0x11a4 <vfprintf+0x30e>
    11a0:	37 18       	sub	r3, r7
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <vfprintf+0x310>
    11a4:	31 2c       	mov	r3, r1
    11a6:	24 ff       	sbrs	r18, 4
    11a8:	12 c0       	rjmp	.+36     	; 0x11ce <vfprintf+0x338>
    11aa:	b7 01       	movw	r22, r14
    11ac:	80 e3       	ldi	r24, 0x30	; 48
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	2c 87       	std	Y+12, r18	; 0x0c
    11b2:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
    11b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    11b8:	22 ff       	sbrs	r18, 2
    11ba:	17 c0       	rjmp	.+46     	; 0x11ea <vfprintf+0x354>
    11bc:	21 ff       	sbrs	r18, 1
    11be:	03 c0       	rjmp	.+6      	; 0x11c6 <vfprintf+0x330>
    11c0:	88 e5       	ldi	r24, 0x58	; 88
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <vfprintf+0x334>
    11c6:	88 e7       	ldi	r24, 0x78	; 120
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	b7 01       	movw	r22, r14
    11cc:	0c c0       	rjmp	.+24     	; 0x11e6 <vfprintf+0x350>
    11ce:	82 2f       	mov	r24, r18
    11d0:	86 78       	andi	r24, 0x86	; 134
    11d2:	59 f0       	breq	.+22     	; 0x11ea <vfprintf+0x354>
    11d4:	21 fd       	sbrc	r18, 1
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <vfprintf+0x346>
    11d8:	80 e2       	ldi	r24, 0x20	; 32
    11da:	01 c0       	rjmp	.+2      	; 0x11de <vfprintf+0x348>
    11dc:	8b e2       	ldi	r24, 0x2B	; 43
    11de:	27 fd       	sbrc	r18, 7
    11e0:	8d e2       	ldi	r24, 0x2D	; 45
    11e2:	b7 01       	movw	r22, r14
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
    11ea:	a5 14       	cp	r10, r5
    11ec:	38 f4       	brcc	.+14     	; 0x11fc <vfprintf+0x366>
    11ee:	b7 01       	movw	r22, r14
    11f0:	80 e3       	ldi	r24, 0x30	; 48
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
    11f8:	5a 94       	dec	r5
    11fa:	f7 cf       	rjmp	.-18     	; 0x11ea <vfprintf+0x354>
    11fc:	aa 94       	dec	r10
    11fe:	f4 01       	movw	r30, r8
    1200:	ea 0d       	add	r30, r10
    1202:	f1 1d       	adc	r31, r1
    1204:	80 81       	ld	r24, Z
    1206:	b7 01       	movw	r22, r14
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
    120e:	a1 10       	cpse	r10, r1
    1210:	f5 cf       	rjmp	.-22     	; 0x11fc <vfprintf+0x366>
    1212:	33 20       	and	r3, r3
    1214:	09 f4       	brne	.+2      	; 0x1218 <vfprintf+0x382>
    1216:	51 ce       	rjmp	.-862    	; 0xeba <vfprintf+0x24>
    1218:	b7 01       	movw	r22, r14
    121a:	80 e2       	ldi	r24, 0x20	; 32
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
    1222:	3a 94       	dec	r3
    1224:	f6 cf       	rjmp	.-20     	; 0x1212 <vfprintf+0x37c>
    1226:	f7 01       	movw	r30, r14
    1228:	86 81       	ldd	r24, Z+6	; 0x06
    122a:	97 81       	ldd	r25, Z+7	; 0x07
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <vfprintf+0x39c>
    122e:	8f ef       	ldi	r24, 0xFF	; 255
    1230:	9f ef       	ldi	r25, 0xFF	; 255
    1232:	2c 96       	adiw	r28, 0x0c	; 12
    1234:	e2 e1       	ldi	r30, 0x12	; 18
    1236:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__epilogue_restores__>

0000123a <strnlen_P>:
    123a:	fc 01       	movw	r30, r24
    123c:	05 90       	lpm	r0, Z+
    123e:	61 50       	subi	r22, 0x01	; 1
    1240:	70 40       	sbci	r23, 0x00	; 0
    1242:	01 10       	cpse	r0, r1
    1244:	d8 f7       	brcc	.-10     	; 0x123c <strnlen_P+0x2>
    1246:	80 95       	com	r24
    1248:	90 95       	com	r25
    124a:	8e 0f       	add	r24, r30
    124c:	9f 1f       	adc	r25, r31
    124e:	08 95       	ret

00001250 <strnlen>:
    1250:	fc 01       	movw	r30, r24
    1252:	61 50       	subi	r22, 0x01	; 1
    1254:	70 40       	sbci	r23, 0x00	; 0
    1256:	01 90       	ld	r0, Z+
    1258:	01 10       	cpse	r0, r1
    125a:	d8 f7       	brcc	.-10     	; 0x1252 <strnlen+0x2>
    125c:	80 95       	com	r24
    125e:	90 95       	com	r25
    1260:	8e 0f       	add	r24, r30
    1262:	9f 1f       	adc	r25, r31
    1264:	08 95       	ret

00001266 <fputc>:
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	18 2f       	mov	r17, r24
    1270:	09 2f       	mov	r16, r25
    1272:	eb 01       	movw	r28, r22
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	81 fd       	sbrc	r24, 1
    1278:	03 c0       	rjmp	.+6      	; 0x1280 <fputc+0x1a>
    127a:	8f ef       	ldi	r24, 0xFF	; 255
    127c:	9f ef       	ldi	r25, 0xFF	; 255
    127e:	20 c0       	rjmp	.+64     	; 0x12c0 <fputc+0x5a>
    1280:	82 ff       	sbrs	r24, 2
    1282:	10 c0       	rjmp	.+32     	; 0x12a4 <fputc+0x3e>
    1284:	4e 81       	ldd	r20, Y+6	; 0x06
    1286:	5f 81       	ldd	r21, Y+7	; 0x07
    1288:	2c 81       	ldd	r18, Y+4	; 0x04
    128a:	3d 81       	ldd	r19, Y+5	; 0x05
    128c:	42 17       	cp	r20, r18
    128e:	53 07       	cpc	r21, r19
    1290:	7c f4       	brge	.+30     	; 0x12b0 <fputc+0x4a>
    1292:	e8 81       	ld	r30, Y
    1294:	f9 81       	ldd	r31, Y+1	; 0x01
    1296:	9f 01       	movw	r18, r30
    1298:	2f 5f       	subi	r18, 0xFF	; 255
    129a:	3f 4f       	sbci	r19, 0xFF	; 255
    129c:	28 83       	st	Y, r18
    129e:	39 83       	std	Y+1, r19	; 0x01
    12a0:	10 83       	st	Z, r17
    12a2:	06 c0       	rjmp	.+12     	; 0x12b0 <fputc+0x4a>
    12a4:	e8 85       	ldd	r30, Y+8	; 0x08
    12a6:	f9 85       	ldd	r31, Y+9	; 0x09
    12a8:	81 2f       	mov	r24, r17
    12aa:	09 95       	icall
    12ac:	89 2b       	or	r24, r25
    12ae:	29 f7       	brne	.-54     	; 0x127a <fputc+0x14>
    12b0:	2e 81       	ldd	r18, Y+6	; 0x06
    12b2:	3f 81       	ldd	r19, Y+7	; 0x07
    12b4:	2f 5f       	subi	r18, 0xFF	; 255
    12b6:	3f 4f       	sbci	r19, 0xFF	; 255
    12b8:	2e 83       	std	Y+6, r18	; 0x06
    12ba:	3f 83       	std	Y+7, r19	; 0x07
    12bc:	81 2f       	mov	r24, r17
    12be:	90 2f       	mov	r25, r16
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	08 95       	ret

000012ca <__ultoa_invert>:
    12ca:	fa 01       	movw	r30, r20
    12cc:	aa 27       	eor	r26, r26
    12ce:	28 30       	cpi	r18, 0x08	; 8
    12d0:	51 f1       	breq	.+84     	; 0x1326 <__ultoa_invert+0x5c>
    12d2:	20 31       	cpi	r18, 0x10	; 16
    12d4:	81 f1       	breq	.+96     	; 0x1336 <__ultoa_invert+0x6c>
    12d6:	e8 94       	clt
    12d8:	6f 93       	push	r22
    12da:	6e 7f       	andi	r22, 0xFE	; 254
    12dc:	6e 5f       	subi	r22, 0xFE	; 254
    12de:	7f 4f       	sbci	r23, 0xFF	; 255
    12e0:	8f 4f       	sbci	r24, 0xFF	; 255
    12e2:	9f 4f       	sbci	r25, 0xFF	; 255
    12e4:	af 4f       	sbci	r26, 0xFF	; 255
    12e6:	b1 e0       	ldi	r27, 0x01	; 1
    12e8:	3e d0       	rcall	.+124    	; 0x1366 <__ultoa_invert+0x9c>
    12ea:	b4 e0       	ldi	r27, 0x04	; 4
    12ec:	3c d0       	rcall	.+120    	; 0x1366 <__ultoa_invert+0x9c>
    12ee:	67 0f       	add	r22, r23
    12f0:	78 1f       	adc	r23, r24
    12f2:	89 1f       	adc	r24, r25
    12f4:	9a 1f       	adc	r25, r26
    12f6:	a1 1d       	adc	r26, r1
    12f8:	68 0f       	add	r22, r24
    12fa:	79 1f       	adc	r23, r25
    12fc:	8a 1f       	adc	r24, r26
    12fe:	91 1d       	adc	r25, r1
    1300:	a1 1d       	adc	r26, r1
    1302:	6a 0f       	add	r22, r26
    1304:	71 1d       	adc	r23, r1
    1306:	81 1d       	adc	r24, r1
    1308:	91 1d       	adc	r25, r1
    130a:	a1 1d       	adc	r26, r1
    130c:	20 d0       	rcall	.+64     	; 0x134e <__ultoa_invert+0x84>
    130e:	09 f4       	brne	.+2      	; 0x1312 <__ultoa_invert+0x48>
    1310:	68 94       	set
    1312:	3f 91       	pop	r19
    1314:	2a e0       	ldi	r18, 0x0A	; 10
    1316:	26 9f       	mul	r18, r22
    1318:	11 24       	eor	r1, r1
    131a:	30 19       	sub	r19, r0
    131c:	30 5d       	subi	r19, 0xD0	; 208
    131e:	31 93       	st	Z+, r19
    1320:	de f6       	brtc	.-74     	; 0x12d8 <__ultoa_invert+0xe>
    1322:	cf 01       	movw	r24, r30
    1324:	08 95       	ret
    1326:	46 2f       	mov	r20, r22
    1328:	47 70       	andi	r20, 0x07	; 7
    132a:	40 5d       	subi	r20, 0xD0	; 208
    132c:	41 93       	st	Z+, r20
    132e:	b3 e0       	ldi	r27, 0x03	; 3
    1330:	0f d0       	rcall	.+30     	; 0x1350 <__ultoa_invert+0x86>
    1332:	c9 f7       	brne	.-14     	; 0x1326 <__ultoa_invert+0x5c>
    1334:	f6 cf       	rjmp	.-20     	; 0x1322 <__ultoa_invert+0x58>
    1336:	46 2f       	mov	r20, r22
    1338:	4f 70       	andi	r20, 0x0F	; 15
    133a:	40 5d       	subi	r20, 0xD0	; 208
    133c:	4a 33       	cpi	r20, 0x3A	; 58
    133e:	18 f0       	brcs	.+6      	; 0x1346 <__ultoa_invert+0x7c>
    1340:	49 5d       	subi	r20, 0xD9	; 217
    1342:	31 fd       	sbrc	r19, 1
    1344:	40 52       	subi	r20, 0x20	; 32
    1346:	41 93       	st	Z+, r20
    1348:	02 d0       	rcall	.+4      	; 0x134e <__ultoa_invert+0x84>
    134a:	a9 f7       	brne	.-22     	; 0x1336 <__ultoa_invert+0x6c>
    134c:	ea cf       	rjmp	.-44     	; 0x1322 <__ultoa_invert+0x58>
    134e:	b4 e0       	ldi	r27, 0x04	; 4
    1350:	a6 95       	lsr	r26
    1352:	97 95       	ror	r25
    1354:	87 95       	ror	r24
    1356:	77 95       	ror	r23
    1358:	67 95       	ror	r22
    135a:	ba 95       	dec	r27
    135c:	c9 f7       	brne	.-14     	; 0x1350 <__ultoa_invert+0x86>
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	61 05       	cpc	r22, r1
    1362:	71 05       	cpc	r23, r1
    1364:	08 95       	ret
    1366:	9b 01       	movw	r18, r22
    1368:	ac 01       	movw	r20, r24
    136a:	0a 2e       	mov	r0, r26
    136c:	06 94       	lsr	r0
    136e:	57 95       	ror	r21
    1370:	47 95       	ror	r20
    1372:	37 95       	ror	r19
    1374:	27 95       	ror	r18
    1376:	ba 95       	dec	r27
    1378:	c9 f7       	brne	.-14     	; 0x136c <__ultoa_invert+0xa2>
    137a:	62 0f       	add	r22, r18
    137c:	73 1f       	adc	r23, r19
    137e:	84 1f       	adc	r24, r20
    1380:	95 1f       	adc	r25, r21
    1382:	a0 1d       	adc	r26, r0
    1384:	08 95       	ret

00001386 <__prologue_saves__>:
    1386:	2f 92       	push	r2
    1388:	3f 92       	push	r3
    138a:	4f 92       	push	r4
    138c:	5f 92       	push	r5
    138e:	6f 92       	push	r6
    1390:	7f 92       	push	r7
    1392:	8f 92       	push	r8
    1394:	9f 92       	push	r9
    1396:	af 92       	push	r10
    1398:	bf 92       	push	r11
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	ca 1b       	sub	r28, r26
    13b0:	db 0b       	sbc	r29, r27
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	09 94       	ijmp

000013b8 <__epilogue_restores__>:
    13b8:	2a 88       	ldd	r2, Y+18	; 0x12
    13ba:	39 88       	ldd	r3, Y+17	; 0x11
    13bc:	48 88       	ldd	r4, Y+16	; 0x10
    13be:	5f 84       	ldd	r5, Y+15	; 0x0f
    13c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    13c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    13c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    13c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    13c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    13ca:	b9 84       	ldd	r11, Y+9	; 0x09
    13cc:	c8 84       	ldd	r12, Y+8	; 0x08
    13ce:	df 80       	ldd	r13, Y+7	; 0x07
    13d0:	ee 80       	ldd	r14, Y+6	; 0x06
    13d2:	fd 80       	ldd	r15, Y+5	; 0x05
    13d4:	0c 81       	ldd	r16, Y+4	; 0x04
    13d6:	1b 81       	ldd	r17, Y+3	; 0x03
    13d8:	aa 81       	ldd	r26, Y+2	; 0x02
    13da:	b9 81       	ldd	r27, Y+1	; 0x01
    13dc:	ce 0f       	add	r28, r30
    13de:	d1 1d       	adc	r29, r1
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	ed 01       	movw	r28, r26
    13e6:	08 95       	ret

000013e8 <_exit>:
    13e8:	f8 94       	cli

000013ea <__stop_program>:
    13ea:	ff cf       	rjmp	.-2      	; 0x13ea <__stop_program>
